<?php
/**
 * TmuxPaneIoDocument
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the TmuxPaneIoDocument model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class TmuxPaneIoDocument 
{
        /**
     * User input
     *
     * @var string|null
     * @SerializedName("input")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Length(min: 1)]
    protected ?string $input = null;

    /**
     * Command output (mix of stdout &amp; stderr)
     *
     * @var string|null
     * @SerializedName("output")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Length(min: 0)]
    protected ?string $output = null;

    /**
     * ps1 (prompt) AFTER the input and output
     *
     * @var string|null
     * @SerializedName("ps1")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Length(min: 1)]
    protected ?string $ps1 = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->input = array_key_exists('input', $data) ? $data['input'] : $this->input;
            $this->output = array_key_exists('output', $data) ? $data['output'] : $this->output;
            $this->ps1 = array_key_exists('ps1', $data) ? $data['ps1'] : $this->ps1;
        }
    }

    /**
     * Gets input.
     *
     * @return string|null
     */
    public function getInput(): ?string
    {
        return $this->input;
    }

    /**
    * Sets input.
    *
    * @param string|null $input  User input
    *
    * @return $this
    */
    public function setInput(?string $input): self
    {
        $this->input = $input;

        return $this;
    }




    /**
     * Gets output.
     *
     * @return string|null
     */
    public function getOutput(): ?string
    {
        return $this->output;
    }

    /**
    * Sets output.
    *
    * @param string|null $output  Command output (mix of stdout & stderr)
    *
    * @return $this
    */
    public function setOutput(?string $output): self
    {
        $this->output = $output;

        return $this;
    }




    /**
     * Gets ps1.
     *
     * @return string|null
     */
    public function getPs1(): ?string
    {
        return $this->ps1;
    }

    /**
    * Sets ps1.
    *
    * @param string|null $ps1  ps1 (prompt) AFTER the input and output
    *
    * @return $this
    */
    public function setPs1(?string $ps1): self
    {
        $this->ps1 = $ps1;

        return $this;
    }



}


