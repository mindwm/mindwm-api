/*
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MindwWM.Client.OpenAPIDateConverter;

namespace MindwWM.Model
{
    /// <summary>
    /// CloudEvents Specification JSON Schema
    /// </summary>
    [DataContract(Name = "CloudEvent")]
    public partial class CloudEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CloudEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CloudEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CloudEvent" /> class.
        /// </summary>
        /// <param name="id">Identifies the event. (required).</param>
        /// <param name="source">Identifies the context in which an event happened. (required).</param>
        /// <param name="specversion">The version of the CloudEvents specification which the event uses. (required).</param>
        /// <param name="type">Describes the type of event related to the originating occurrence. (required).</param>
        /// <param name="datacontenttype">Content type of the data value. Must adhere to RFC 2046 format..</param>
        /// <param name="dataschema">Identifies the schema that data adheres to..</param>
        /// <param name="subject">Describes the subject of the event in the context of the event producer (identified by source)..</param>
        /// <param name="time">Timestamp of when the occurrence happened. Must adhere to RFC 3339..</param>
        /// <param name="data">data.</param>
        /// <param name="dataBase64">Base64 encoded event payload. Must adhere to RFC4648..</param>
        public CloudEvent(string id = default(string), string source = default(string), string specversion = default(string), string type = default(string), string datacontenttype = default(string), string dataschema = default(string), string subject = default(string), DateTime? time = default(DateTime?), CloudEventData data = default(CloudEventData), string dataBase64 = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CloudEvent and cannot be null");
            }
            this.Id = id;
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new ArgumentNullException("source is a required property for CloudEvent and cannot be null");
            }
            this.Source = source;
            // to ensure "specversion" is required (not null)
            if (specversion == null)
            {
                throw new ArgumentNullException("specversion is a required property for CloudEvent and cannot be null");
            }
            this.Specversion = specversion;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for CloudEvent and cannot be null");
            }
            this.Type = type;
            this.Datacontenttype = datacontenttype;
            this.Dataschema = dataschema;
            this.Subject = subject;
            this.Time = time;
            this.Data = data;
            this.DataBase64 = dataBase64;
        }

        /// <summary>
        /// Identifies the event.
        /// </summary>
        /// <value>Identifies the event.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Identifies the context in which an event happened.
        /// </summary>
        /// <value>Identifies the context in which an event happened.</value>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// The version of the CloudEvents specification which the event uses.
        /// </summary>
        /// <value>The version of the CloudEvents specification which the event uses.</value>
        [DataMember(Name = "specversion", IsRequired = true, EmitDefaultValue = true)]
        public string Specversion { get; set; }

        /// <summary>
        /// Describes the type of event related to the originating occurrence.
        /// </summary>
        /// <value>Describes the type of event related to the originating occurrence.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Content type of the data value. Must adhere to RFC 2046 format.
        /// </summary>
        /// <value>Content type of the data value. Must adhere to RFC 2046 format.</value>
        [DataMember(Name = "datacontenttype", EmitDefaultValue = true)]
        public string Datacontenttype { get; set; }

        /// <summary>
        /// Identifies the schema that data adheres to.
        /// </summary>
        /// <value>Identifies the schema that data adheres to.</value>
        [DataMember(Name = "dataschema", EmitDefaultValue = true)]
        public string Dataschema { get; set; }

        /// <summary>
        /// Describes the subject of the event in the context of the event producer (identified by source).
        /// </summary>
        /// <value>Describes the subject of the event in the context of the event producer (identified by source).</value>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// Timestamp of when the occurrence happened. Must adhere to RFC 3339.
        /// </summary>
        /// <value>Timestamp of when the occurrence happened. Must adhere to RFC 3339.</value>
        [DataMember(Name = "time", EmitDefaultValue = true)]
        public DateTime? Time { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = true)]
        public CloudEventData Data { get; set; }

        /// <summary>
        /// Base64 encoded event payload. Must adhere to RFC4648.
        /// </summary>
        /// <value>Base64 encoded event payload. Must adhere to RFC4648.</value>
        [DataMember(Name = "data_base64", EmitDefaultValue = true)]
        public string DataBase64 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CloudEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Specversion: ").Append(Specversion).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Datacontenttype: ").Append(Datacontenttype).Append("\n");
            sb.Append("  Dataschema: ").Append(Dataschema).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DataBase64: ").Append(DataBase64).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // Source (string) minLength
            if (this.Source != null && this.Source.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Source, length must be greater than 1.", new [] { "Source" });
            }

            // Specversion (string) minLength
            if (this.Specversion != null && this.Specversion.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Specversion, length must be greater than 1.", new [] { "Specversion" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            // Datacontenttype (string) minLength
            if (this.Datacontenttype != null && this.Datacontenttype.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Datacontenttype, length must be greater than 1.", new [] { "Datacontenttype" });
            }

            // Dataschema (string) minLength
            if (this.Dataschema != null && this.Dataschema.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Dataschema, length must be greater than 1.", new [] { "Dataschema" });
            }

            // Subject (string) minLength
            if (this.Subject != null && this.Subject.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Subject, length must be greater than 1.", new [] { "Subject" });
            }

            // Time (DateTime?) minLength
            if (this.Time != null && this.Time.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Time, length must be greater than 1.", new [] { "Time" });
            }

            yield break;
        }
    }

}
