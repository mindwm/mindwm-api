/*
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MindwWM.Client.OpenAPIDateConverter;

namespace MindwWM.Model
{
    /// <summary>
    /// TmuxPaneIoDocument
    /// </summary>
    [DataContract(Name = "TmuxPaneIoDocument")]
    public partial class TmuxPaneIoDocument : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TmuxPaneIoDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TmuxPaneIoDocument()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="TmuxPaneIoDocument" /> class.
        /// </summary>
        /// <param name="input">User input (required).</param>
        /// <param name="output">Command output (mix of stdout &amp; stderr) (required).</param>
        /// <param name="ps1">ps1 (prompt) AFTER the input and output (required).</param>
        public TmuxPaneIoDocument(string input = default(string), string output = default(string), string ps1 = default(string))
        {
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new ArgumentNullException("input is a required property for TmuxPaneIoDocument and cannot be null");
            }
            this.Input = input;
            // to ensure "output" is required (not null)
            if (output == null)
            {
                throw new ArgumentNullException("output is a required property for TmuxPaneIoDocument and cannot be null");
            }
            this.Output = output;
            // to ensure "ps1" is required (not null)
            if (ps1 == null)
            {
                throw new ArgumentNullException("ps1 is a required property for TmuxPaneIoDocument and cannot be null");
            }
            this.Ps1 = ps1;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// User input
        /// </summary>
        /// <value>User input</value>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = true)]
        public string Input { get; set; }

        /// <summary>
        /// Command output (mix of stdout &amp; stderr)
        /// </summary>
        /// <value>Command output (mix of stdout &amp; stderr)</value>
        [DataMember(Name = "output", IsRequired = true, EmitDefaultValue = true)]
        public string Output { get; set; }

        /// <summary>
        /// ps1 (prompt) AFTER the input and output
        /// </summary>
        /// <value>ps1 (prompt) AFTER the input and output</value>
        [DataMember(Name = "ps1", IsRequired = true, EmitDefaultValue = true)]
        public string Ps1 { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TmuxPaneIoDocument {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  Ps1: ").Append(Ps1).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Input (string) minLength
            if (this.Input != null && this.Input.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Input, length must be greater than 1.", new [] { "Input" });
            }

            // Output (string) minLength
            if (this.Output != null && this.Output.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Output, length must be greater than 0.", new [] { "Output" });
            }

            // Ps1 (string) minLength
            if (this.Ps1 != null && this.Ps1.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Ps1, length must be greater than 1.", new [] { "Ps1" });
            }

            yield break;
        }
    }

}
