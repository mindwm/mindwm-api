/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CloudEvent.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CloudEvent::CloudEvent(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CloudEvent::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CloudEvent::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CloudEvent::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("source", m_Source);
	pt.put("specversion", m_Specversion);
	pt.put("type", m_Type);
	pt.put("datacontenttype", m_Datacontenttype);
	pt.put("dataschema", m_Dataschema);
	pt.put("subject", m_Subject);
	pt.put("time", m_Time);
	pt.add_child("data", m_Data.toPropertyTree());
	pt.put("data_base64", m_Data_base64);
	return pt;
}

void CloudEvent::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_Source = pt.get("source", "");
	m_Specversion = pt.get("specversion", "");
	m_Type = pt.get("type", "");
	m_Datacontenttype = pt.get("datacontenttype", "");
	m_Dataschema = pt.get("dataschema", "");
	m_Subject = pt.get("subject", "");
	m_Time = pt.get("time", "");
	if (pt.get_child_optional("data")) {
        m_Data = fromPt<CloudEvent_data>(pt.get_child("data"));
	}
	m_Data_base64 = pt.get("data_base64", "");
}

std::string CloudEvent::getId() const
{
    return m_Id;
}

void CloudEvent::setId(std::string value)
{
    m_Id = value;
}


std::string CloudEvent::getSource() const
{
    return m_Source;
}

void CloudEvent::setSource(std::string value)
{
    m_Source = value;
}


std::string CloudEvent::getSpecversion() const
{
    return m_Specversion;
}

void CloudEvent::setSpecversion(std::string value)
{
    m_Specversion = value;
}


std::string CloudEvent::getType() const
{
    return m_Type;
}

void CloudEvent::setType(std::string value)
{
    m_Type = value;
}


std::string CloudEvent::getDatacontenttype() const
{
    return m_Datacontenttype;
}

void CloudEvent::setDatacontenttype(std::string value)
{
    m_Datacontenttype = value;
}


std::string CloudEvent::getDataschema() const
{
    return m_Dataschema;
}

void CloudEvent::setDataschema(std::string value)
{
    m_Dataschema = value;
}


std::string CloudEvent::getSubject() const
{
    return m_Subject;
}

void CloudEvent::setSubject(std::string value)
{
    m_Subject = value;
}


std::string CloudEvent::getTime() const
{
    return m_Time;
}

void CloudEvent::setTime(std::string value)
{
    m_Time = value;
}


CloudEvent_data CloudEvent::getData() const
{
    return m_Data;
}

void CloudEvent::setData(CloudEvent_data value)
{
    m_Data = value;
}


std::string CloudEvent::getDataBase64() const
{
    return m_Data_base64;
}

void CloudEvent::setDataBase64(std::string value)
{
    m_Data_base64 = value;
}



std::vector<CloudEvent> createCloudEventVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CloudEvent>();
    for (const auto& child: pt) {
        vec.emplace_back(CloudEvent(child.second));
    }

    return vec;
}

}
}
}
}

