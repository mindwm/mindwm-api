# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ClipboardPayload

    ClipboardPayload(;
        start=nothing,
        stop=nothing,
        data=nothing,
        type=nothing,
        context=nothing,
    )

    - start::Vector{Int64} : Starting position of clipboard selection [x,y]
    - stop::Vector{Int64} : Ending position of clipboard selection [x,y]
    - data::String : Clipboard data
    - type::String : Clipboard type
    - context::ClipboardPayloadContext
"""
Base.@kwdef mutable struct ClipboardPayload <: OpenAPI.APIModel
    start::Union{Nothing, Vector{Int64}} = nothing
    stop::Union{Nothing, Vector{Int64}} = nothing
    data::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    context = nothing # spec type: Union{ Nothing, ClipboardPayloadContext }

    function ClipboardPayload(start, stop, data, type, context, )
        OpenAPI.validate_property(ClipboardPayload, Symbol("start"), start)
        OpenAPI.validate_property(ClipboardPayload, Symbol("stop"), stop)
        OpenAPI.validate_property(ClipboardPayload, Symbol("data"), data)
        OpenAPI.validate_property(ClipboardPayload, Symbol("type"), type)
        OpenAPI.validate_property(ClipboardPayload, Symbol("context"), context)
        return new(start, stop, data, type, context, )
    end
end # type ClipboardPayload

const _property_types_ClipboardPayload = Dict{Symbol,String}(Symbol("start")=>"Vector{Int64}", Symbol("stop")=>"Vector{Int64}", Symbol("data")=>"String", Symbol("type")=>"String", Symbol("context")=>"ClipboardPayloadContext", )
OpenAPI.property_type(::Type{ ClipboardPayload }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ClipboardPayload[name]))}

function check_required(o::ClipboardPayload)
    true
end

function OpenAPI.validate_property(::Type{ ClipboardPayload }, name::Symbol, val)
    if name === Symbol("start")
        OpenAPI.validate_param(name, "ClipboardPayload", :maxItems, val, 2)
        OpenAPI.validate_param(name, "ClipboardPayload", :minItems, val, 2)
    end
    if name === Symbol("stop")
        OpenAPI.validate_param(name, "ClipboardPayload", :maxItems, val, 2)
        OpenAPI.validate_param(name, "ClipboardPayload", :minItems, val, 2)
    end
    if name === Symbol("data")
        OpenAPI.validate_param(name, "ClipboardPayload", :minLength, val, 1)
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "ClipboardPayload", :enum, val, ["primary", "secondary", "clipboard"])
    end
end
