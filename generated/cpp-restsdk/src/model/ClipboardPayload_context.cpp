/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MindwWM/model/ClipboardPayload_context.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ClipboardPayload_context::ClipboardPayload_context()
{
    m_Window = utility::conversions::to_string_t("");
    m_WindowIsSet = false;
}

ClipboardPayload_context::~ClipboardPayload_context()
{
}

void ClipboardPayload_context::validate()
{
    // TODO: implement validation
}

web::json::value ClipboardPayload_context::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_WindowIsSet)
    {
        val[utility::conversions::to_string_t(U("window"))] = ModelBase::toJson(m_Window);
    }

    return val;
}

bool ClipboardPayload_context::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("window"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("window")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWindow;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWindow);
            setWindow(refVal_setWindow);
        }
    }
    return ok;
}

void ClipboardPayload_context::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_WindowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("window")), m_Window));
    }
}

bool ClipboardPayload_context::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("window"))))
    {
        utility::string_t refVal_setWindow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("window"))), refVal_setWindow );
        setWindow(refVal_setWindow);
    }
    return ok;
}

utility::string_t ClipboardPayload_context::getWindow() const
{
    return m_Window;
}

void ClipboardPayload_context::setWindow(const utility::string_t& value)
{
    m_Window = value;
    m_WindowIsSet = true;
}

bool ClipboardPayload_context::windowIsSet() const
{
    return m_WindowIsSet;
}

void ClipboardPayload_context::unsetWindow()
{
    m_WindowIsSet = false;
}
}
}
}
}


