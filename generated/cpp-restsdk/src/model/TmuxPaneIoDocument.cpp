/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MindwWM/model/TmuxPaneIoDocument.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TmuxPaneIoDocument::TmuxPaneIoDocument()
{
    m_Input = utility::conversions::to_string_t("");
    m_InputIsSet = false;
    m_Output = utility::conversions::to_string_t("");
    m_OutputIsSet = false;
    m_Ps1 = utility::conversions::to_string_t("");
    m_Ps1IsSet = false;
}

TmuxPaneIoDocument::~TmuxPaneIoDocument()
{
}

void TmuxPaneIoDocument::validate()
{
    // TODO: implement validation
}

web::json::value TmuxPaneIoDocument::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InputIsSet)
    {
        val[utility::conversions::to_string_t(U("input"))] = ModelBase::toJson(m_Input);
    }
    if(m_OutputIsSet)
    {
        val[utility::conversions::to_string_t(U("output"))] = ModelBase::toJson(m_Output);
    }
    if(m_Ps1IsSet)
    {
        val[utility::conversions::to_string_t(U("ps1"))] = ModelBase::toJson(m_Ps1);
    }

    return val;
}

bool TmuxPaneIoDocument::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("input"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInput;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInput);
            setInput(refVal_setInput);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("output"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("output")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOutput;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutput);
            setOutput(refVal_setOutput);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ps1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ps1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPs1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPs1);
            setPs1(refVal_setPs1);
        }
    }
    return ok;
}

void TmuxPaneIoDocument::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_InputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input")), m_Input));
    }
    if(m_OutputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("output")), m_Output));
    }
    if(m_Ps1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ps1")), m_Ps1));
    }
}

bool TmuxPaneIoDocument::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("input"))))
    {
        utility::string_t refVal_setInput;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input"))), refVal_setInput );
        setInput(refVal_setInput);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("output"))))
    {
        utility::string_t refVal_setOutput;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("output"))), refVal_setOutput );
        setOutput(refVal_setOutput);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ps1"))))
    {
        utility::string_t refVal_setPs1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ps1"))), refVal_setPs1 );
        setPs1(refVal_setPs1);
    }
    return ok;
}

utility::string_t TmuxPaneIoDocument::getInput() const
{
    return m_Input;
}

void TmuxPaneIoDocument::setInput(const utility::string_t& value)
{
    m_Input = value;
    m_InputIsSet = true;
}

bool TmuxPaneIoDocument::inputIsSet() const
{
    return m_InputIsSet;
}

void TmuxPaneIoDocument::unsetInput()
{
    m_InputIsSet = false;
}
utility::string_t TmuxPaneIoDocument::getOutput() const
{
    return m_Output;
}

void TmuxPaneIoDocument::setOutput(const utility::string_t& value)
{
    m_Output = value;
    m_OutputIsSet = true;
}

bool TmuxPaneIoDocument::outputIsSet() const
{
    return m_OutputIsSet;
}

void TmuxPaneIoDocument::unsetOutput()
{
    m_OutputIsSet = false;
}
utility::string_t TmuxPaneIoDocument::getPs1() const
{
    return m_Ps1;
}

void TmuxPaneIoDocument::setPs1(const utility::string_t& value)
{
    m_Ps1 = value;
    m_Ps1IsSet = true;
}

bool TmuxPaneIoDocument::ps1IsSet() const
{
    return m_Ps1IsSet;
}

void TmuxPaneIoDocument::unsetPs1()
{
    m_Ps1IsSet = false;
}
}
}
}
}


