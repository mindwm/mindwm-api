/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ClipboardPayload.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ClipboardPayload_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ClipboardPayload_H_


#include "MindwWM/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "MindwWM/model/ClipboardPayload_context.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ClipboardPayload_context;


/// <summary>
/// 
/// </summary>
class  ClipboardPayload
    : public ModelBase
{
public:
    ClipboardPayload();
    virtual ~ClipboardPayload();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ClipboardPayload members

    /// <summary>
    /// Starting position of clipboard selection [x,y]
    /// </summary>
    std::vector<int32_t>& getStart();
    bool startIsSet() const;
    void unsetStart();

    void setStart(std::vector<int32_t> value);

    /// <summary>
    /// Ending position of clipboard selection [x,y]
    /// </summary>
    std::vector<int32_t>& getStop();
    bool stopIsSet() const;
    void unsetStop();

    void setStop(std::vector<int32_t> value);

    /// <summary>
    /// Clipboard data
    /// </summary>
    utility::string_t getData() const;
    bool dataIsSet() const;
    void unsetData();

    void setData(const utility::string_t& value);

    /// <summary>
    /// Clipboard type
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ClipboardPayload_context> getContext() const;
    bool contextIsSet() const;
    void unsetContext();

    void setContext(const std::shared_ptr<ClipboardPayload_context>& value);


protected:
    std::vector<int32_t> m_Start;
    bool m_StartIsSet;
    std::vector<int32_t> m_Stop;
    bool m_StopIsSet;
    utility::string_t m_Data;
    bool m_DataIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
    std::shared_ptr<ClipboardPayload_context> m_Context;
    bool m_ContextIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ClipboardPayload_H_ */
