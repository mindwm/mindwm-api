/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIClipboardPayload.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIClipboardPayload::TypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIClipboardPayload::TypeEnum::Primary:
		return TEXT("primary");
	case OpenAPIClipboardPayload::TypeEnum::Secondary:
		return TEXT("secondary");
	case OpenAPIClipboardPayload::TypeEnum::Clipboard:
		return TEXT("clipboard");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIClipboardPayload::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIClipboardPayload::EnumToString(const OpenAPIClipboardPayload::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIClipboardPayload::TypeEnum& Value)
{
	static TMap<FString, OpenAPIClipboardPayload::TypeEnum> StringToEnum = { 
		{ TEXT("primary"), OpenAPIClipboardPayload::TypeEnum::Primary },
		{ TEXT("secondary"), OpenAPIClipboardPayload::TypeEnum::Secondary },
		{ TEXT("clipboard"), OpenAPIClipboardPayload::TypeEnum::Clipboard }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIClipboardPayload::EnumFromString(const FString& EnumAsString, OpenAPIClipboardPayload::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIClipboardPayload::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIClipboardPayload::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIClipboardPayload::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Start.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("start")); WriteJsonValue(Writer, Start.GetValue());
	}
	if (Stop.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("stop")); WriteJsonValue(Writer, Stop.GetValue());
	}
	if (Data.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("data")); WriteJsonValue(Writer, Data.GetValue());
	}
	if (Type.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type.GetValue());
	}
	if (Context.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("context")); WriteJsonValue(Writer, Context.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIClipboardPayload::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("start"), Start);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("stop"), Stop);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("data"), Data);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("context"), Context);

	return ParseSuccess;
}

}
