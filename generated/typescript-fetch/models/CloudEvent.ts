/* tslint:disable */
/* eslint-disable */
/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CloudEventData } from './CloudEventData';
import {
    CloudEventDataFromJSON,
    CloudEventDataFromJSONTyped,
    CloudEventDataToJSON,
} from './CloudEventData';

/**
 * CloudEvents Specification JSON Schema
 * @export
 * @interface CloudEvent
 */
export interface CloudEvent {
    /**
     * Identifies the event.
     * @type {string}
     * @memberof CloudEvent
     */
    id: string;
    /**
     * Identifies the context in which an event happened.
     * @type {string}
     * @memberof CloudEvent
     */
    source: string;
    /**
     * The version of the CloudEvents specification which the event uses.
     * @type {string}
     * @memberof CloudEvent
     */
    specversion: string;
    /**
     * Describes the type of event related to the originating occurrence.
     * @type {string}
     * @memberof CloudEvent
     */
    type: string;
    /**
     * Content type of the data value. Must adhere to RFC 2046 format.
     * @type {string}
     * @memberof CloudEvent
     */
    datacontenttype?: string | null;
    /**
     * Identifies the schema that data adheres to.
     * @type {string}
     * @memberof CloudEvent
     */
    dataschema?: string | null;
    /**
     * Describes the subject of the event in the context of the event producer (identified by source).
     * @type {string}
     * @memberof CloudEvent
     */
    subject?: string | null;
    /**
     * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
     * @type {Date}
     * @memberof CloudEvent
     */
    time?: Date | null;
    /**
     * 
     * @type {CloudEventData}
     * @memberof CloudEvent
     */
    data?: CloudEventData | null;
    /**
     * Base64 encoded event payload. Must adhere to RFC4648.
     * @type {string}
     * @memberof CloudEvent
     */
    dataBase64?: string | null;
}

/**
 * Check if a given object implements the CloudEvent interface.
 */
export function instanceOfCloudEvent(value: object): value is CloudEvent {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('specversion' in value) || value['specversion'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function CloudEventFromJSON(json: any): CloudEvent {
    return CloudEventFromJSONTyped(json, false);
}

export function CloudEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): CloudEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'source': json['source'],
        'specversion': json['specversion'],
        'type': json['type'],
        'datacontenttype': json['datacontenttype'] == null ? undefined : json['datacontenttype'],
        'dataschema': json['dataschema'] == null ? undefined : json['dataschema'],
        'subject': json['subject'] == null ? undefined : json['subject'],
        'time': json['time'] == null ? undefined : (new Date(json['time'])),
        'data': json['data'] == null ? undefined : CloudEventDataFromJSON(json['data']),
        'dataBase64': json['data_base64'] == null ? undefined : json['data_base64'],
    };
}

export function CloudEventToJSON(value?: CloudEvent | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'source': value['source'],
        'specversion': value['specversion'],
        'type': value['type'],
        'datacontenttype': value['datacontenttype'],
        'dataschema': value['dataschema'],
        'subject': value['subject'],
        'time': value['time'] == null ? undefined : ((value['time'] as any).toISOString()),
        'data': CloudEventDataToJSON(value['data']),
        'data_base64': value['dataBase64'],
    };
}

