//
// TmuxPaneIoDocument.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TmuxPaneIoDocument: Codable, JSONEncodable, Hashable {

    static let inputRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let outputRule = StringRule(minLength: 0, maxLength: nil, pattern: nil)
    static let ps1Rule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** User input */
    public var input: String
    /** Command output (mix of stdout & stderr) */
    public var output: String
    /** ps1 (prompt) AFTER the input and output */
    public var ps1: String

    public init(input: String, output: String, ps1: String) {
        self.input = input
        self.output = output
        self.ps1 = ps1
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case input
        case output
        case ps1
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(input, forKey: .input)
        try container.encode(output, forKey: .output)
        try container.encode(ps1, forKey: .ps1)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        input = try container.decode(String.self, forKey: .input)
        output = try container.decode(String.self, forKey: .output)
        ps1 = try container.decode(String.self, forKey: .ps1)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("input")
        nonAdditionalPropertyKeys.insert("output")
        nonAdditionalPropertyKeys.insert("ps1")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

