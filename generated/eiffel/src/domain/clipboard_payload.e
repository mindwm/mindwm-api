note
 description:"[
		Mindwm API
 		This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
  		The version of the OpenAPI document: 0.1.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CLIPBOARD_PAYLOAD




feature --Access

    start: detachable LIST [INTEGER_32]
      -- Starting position of clipboard selection [x,y]
    stop: detachable LIST [INTEGER_32]
      -- Ending position of clipboard selection [x,y]
    data: detachable STRING_32
      -- Clipboard data
    type: detachable STRING_32
      -- Clipboard type
    context: detachable CLIPBOARD_PAYLOAD_CONTEXT
      

feature -- Change Element

    set_start (a_name: like start)
        -- Set 'start' with 'a_name'.
      do
        start := a_name
      ensure
        start_set: start = a_name
      end

    set_stop (a_name: like stop)
        -- Set 'stop' with 'a_name'.
      do
        stop := a_name
      ensure
        stop_set: stop = a_name
      end

    set_data (a_name: like data)
        -- Set 'data' with 'a_name'.
      do
        data := a_name
      ensure
        data_set: data = a_name
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name
      end

    set_context (a_name: like context)
        -- Set 'context' with 'a_name'.
      do
        context := a_name
      ensure
        context_set: context = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CLIPBOARD_PAYLOAD%N")
        if attached start as l_start then
          across l_start as ic loop
            Result.append ("%N start:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached stop as l_stop then
          across l_stop as ic loop
            Result.append ("%N stop:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached data as l_data then
          Result.append ("%Ndata:")
          Result.append (l_data.out)
          Result.append ("%N")
        end
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")
        end
        if attached context as l_context then
          Result.append ("%Ncontext:")
          Result.append (l_context.out)
          Result.append ("%N")
        end
      end
end

