/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClipboardPayloadContext;




public class ClipboardPayload  {
  
 /**
   * Starting position of clipboard selection [x,y]
  **/
  private List<Integer> start = null;

 /**
   * Ending position of clipboard selection [x,y]
  **/
  private List<Integer> stop = null;

 /**
   * Clipboard data
  **/
  private String data;

public enum TypeEnum {

    PRIMARY(String.valueOf("primary")), SECONDARY(String.valueOf("secondary")), CLIPBOARD(String.valueOf("clipboard"));

    String value;

    TypeEnum (String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

}

 /**
   * Clipboard type
  **/
  private TypeEnum type;

  private ClipboardPayloadContext context;

 /**
   * Starting position of clipboard selection [x,y]
   * @return start
  **/
  public List<Integer> getStart() {
    return start;
  }

  /**
    * Set start
  **/
  public void setStart(List<Integer> start) {
    this.start = start;
  }

  public ClipboardPayload start(List<Integer> start) {
    this.start = start;
    return this;
  }

  public ClipboardPayload addStartItem(Integer startItem) {
    this.start.add(startItem);
    return this;
  }

 /**
   * Ending position of clipboard selection [x,y]
   * @return stop
  **/
  public List<Integer> getStop() {
    return stop;
  }

  /**
    * Set stop
  **/
  public void setStop(List<Integer> stop) {
    this.stop = stop;
  }

  public ClipboardPayload stop(List<Integer> stop) {
    this.stop = stop;
    return this;
  }

  public ClipboardPayload addStopItem(Integer stopItem) {
    this.stop.add(stopItem);
    return this;
  }

 /**
   * Clipboard data
   * @return data
  **/
  public String getData() {
    return data;
  }

  /**
    * Set data
  **/
  public void setData(String data) {
    this.data = data;
  }

  public ClipboardPayload data(String data) {
    this.data = data;
    return this;
  }

 /**
   * Clipboard type
   * @return type
  **/
  public TypeEnum getType() {
    return type;
  }

  /**
    * Set type
  **/
  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ClipboardPayload type(TypeEnum type) {
    this.type = type;
    return this;
  }

 /**
   * Get context
   * @return context
  **/
  public ClipboardPayloadContext getContext() {
    return context;
  }

  /**
    * Set context
  **/
  public void setContext(ClipboardPayloadContext context) {
    this.context = context;
  }

  public ClipboardPayload context(ClipboardPayloadContext context) {
    this.context = context;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClipboardPayload {\n");
    
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

