# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Neo4jCaptureDataChangeRelationshipPayload

    Neo4jCaptureDataChangeRelationshipPayload(;
        after=nothing,
        before=nothing,
        var"end"=nothing,
        id=nothing,
        label=nothing,
        start=nothing,
        type=nothing,
    )

    - after::Any
    - before::String
    - var"end"::Neo4jCaptureDataChangeRelationshipPayloadEnd
    - id::String
    - label::String
    - start::Neo4jCaptureDataChangeRelationshipPayloadEnd
    - type::String
"""
Base.@kwdef mutable struct Neo4jCaptureDataChangeRelationshipPayload <: OpenAPI.APIModel
    after::Union{Nothing, Any} = nothing
    before::Union{Nothing, String} = nothing
    var"end" = nothing # spec type: Union{ Nothing, Neo4jCaptureDataChangeRelationshipPayloadEnd }
    id::Union{Nothing, String} = nothing
    label::Union{Nothing, String} = nothing
    start = nothing # spec type: Union{ Nothing, Neo4jCaptureDataChangeRelationshipPayloadEnd }
    type::Union{Nothing, String} = nothing

    function Neo4jCaptureDataChangeRelationshipPayload(after, before, var"end", id, label, start, type, )
        OpenAPI.validate_property(Neo4jCaptureDataChangeRelationshipPayload, Symbol("after"), after)
        OpenAPI.validate_property(Neo4jCaptureDataChangeRelationshipPayload, Symbol("before"), before)
        OpenAPI.validate_property(Neo4jCaptureDataChangeRelationshipPayload, Symbol("end"), var"end")
        OpenAPI.validate_property(Neo4jCaptureDataChangeRelationshipPayload, Symbol("id"), id)
        OpenAPI.validate_property(Neo4jCaptureDataChangeRelationshipPayload, Symbol("label"), label)
        OpenAPI.validate_property(Neo4jCaptureDataChangeRelationshipPayload, Symbol("start"), start)
        OpenAPI.validate_property(Neo4jCaptureDataChangeRelationshipPayload, Symbol("type"), type)
        return new(after, before, var"end", id, label, start, type, )
    end
end # type Neo4jCaptureDataChangeRelationshipPayload

const _property_types_Neo4jCaptureDataChangeRelationshipPayload = Dict{Symbol,String}(Symbol("after")=>"Any", Symbol("before")=>"String", Symbol("end")=>"Neo4jCaptureDataChangeRelationshipPayloadEnd", Symbol("id")=>"String", Symbol("label")=>"String", Symbol("start")=>"Neo4jCaptureDataChangeRelationshipPayloadEnd", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ Neo4jCaptureDataChangeRelationshipPayload }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Neo4jCaptureDataChangeRelationshipPayload[name]))}

function check_required(o::Neo4jCaptureDataChangeRelationshipPayload)
    o.after === nothing && (return false)
    o.before === nothing && (return false)
    o.var"end" === nothing && (return false)
    o.id === nothing && (return false)
    o.label === nothing && (return false)
    o.start === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Neo4jCaptureDataChangeRelationshipPayload }, name::Symbol, val)
end
