# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TmuxPaneIoDocument

    TmuxPaneIoDocument(;
        input=nothing,
        output=nothing,
        ps1=nothing,
    )

    - input::String : User input
    - output::String : Command output (mix of stdout &amp; stderr)
    - ps1::String : ps1 (prompt) AFTER the input and output
"""
Base.@kwdef mutable struct TmuxPaneIoDocument <: OpenAPI.APIModel
    input::Union{Nothing, String} = nothing
    output::Union{Nothing, String} = nothing
    ps1::Union{Nothing, String} = nothing

    function TmuxPaneIoDocument(input, output, ps1, )
        OpenAPI.validate_property(TmuxPaneIoDocument, Symbol("input"), input)
        OpenAPI.validate_property(TmuxPaneIoDocument, Symbol("output"), output)
        OpenAPI.validate_property(TmuxPaneIoDocument, Symbol("ps1"), ps1)
        return new(input, output, ps1, )
    end
end # type TmuxPaneIoDocument

const _property_types_TmuxPaneIoDocument = Dict{Symbol,String}(Symbol("input")=>"String", Symbol("output")=>"String", Symbol("ps1")=>"String", )
OpenAPI.property_type(::Type{ TmuxPaneIoDocument }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TmuxPaneIoDocument[name]))}

function check_required(o::TmuxPaneIoDocument)
    o.input === nothing && (return false)
    o.output === nothing && (return false)
    o.ps1 === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ TmuxPaneIoDocument }, name::Symbol, val)
    if name === Symbol("input")
        OpenAPI.validate_param(name, "TmuxPaneIoDocument", :minLength, val, 1)
    end
    if name === Symbol("output")
        OpenAPI.validate_param(name, "TmuxPaneIoDocument", :minLength, val, 0)
    end
    if name === Symbol("ps1")
        OpenAPI.validate_param(name, "TmuxPaneIoDocument", :minLength, val, 1)
    end
end
