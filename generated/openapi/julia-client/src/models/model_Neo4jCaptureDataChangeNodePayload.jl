# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Neo4jCaptureDataChangeNodePayload

    Neo4jCaptureDataChangeNodePayload(;
        after=nothing,
        before=nothing,
        id=nothing,
        type=nothing,
    )

    - after::Neo4jCaptureDataChangeNodePayloadAfter
    - before::String
    - id::String
    - type::String
"""
Base.@kwdef mutable struct Neo4jCaptureDataChangeNodePayload <: OpenAPI.APIModel
    after = nothing # spec type: Union{ Nothing, Neo4jCaptureDataChangeNodePayloadAfter }
    before::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function Neo4jCaptureDataChangeNodePayload(after, before, id, type, )
        OpenAPI.validate_property(Neo4jCaptureDataChangeNodePayload, Symbol("after"), after)
        OpenAPI.validate_property(Neo4jCaptureDataChangeNodePayload, Symbol("before"), before)
        OpenAPI.validate_property(Neo4jCaptureDataChangeNodePayload, Symbol("id"), id)
        OpenAPI.validate_property(Neo4jCaptureDataChangeNodePayload, Symbol("type"), type)
        return new(after, before, id, type, )
    end
end # type Neo4jCaptureDataChangeNodePayload

const _property_types_Neo4jCaptureDataChangeNodePayload = Dict{Symbol,String}(Symbol("after")=>"Neo4jCaptureDataChangeNodePayloadAfter", Symbol("before")=>"String", Symbol("id")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ Neo4jCaptureDataChangeNodePayload }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Neo4jCaptureDataChangeNodePayload[name]))}

function check_required(o::Neo4jCaptureDataChangeNodePayload)
    o.after === nothing && (return false)
    o.before === nothing && (return false)
    o.id === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Neo4jCaptureDataChangeNodePayload }, name::Symbol, val)
end
