/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package MindWM.models

import MindWM.models.Neo4jCaptureDataChangeMetaSource

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * 
 * @param operation 
 * @param source 
 * @param timestamp 
 * @param txEventId 
 * @param txEventsCount 
 * @param txId 
 * @param username 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class Neo4jCaptureDataChangeMeta (
    @SerializedName("operation") private val _operation: kotlin.String?,
    @SerializedName("source") private val _source: Neo4jCaptureDataChangeMetaSource?,
    @SerializedName("timestamp") private val _timestamp: kotlin.Int?,
    @SerializedName("txEventId") private val _txEventId: kotlin.Int?,
    @SerializedName("txEventsCount") private val _txEventsCount: kotlin.Int?,
    @SerializedName("txId") private val _txId: kotlin.Int?,
    @SerializedName("username") private val _username: kotlin.String?
) {

        val operation get() = _operation ?: throw IllegalArgumentException("operation is required")
                    
        val source get() = _source ?: throw IllegalArgumentException("source is required")
                    
        val timestamp get() = _timestamp ?: throw IllegalArgumentException("timestamp is required")
                    
        val txEventId get() = _txEventId ?: throw IllegalArgumentException("txEventId is required")
                    
        val txEventsCount get() = _txEventsCount ?: throw IllegalArgumentException("txEventsCount is required")
                    
        val txId get() = _txId ?: throw IllegalArgumentException("txId is required")
                    
        val username get() = _username ?: throw IllegalArgumentException("username is required")
                    
}

