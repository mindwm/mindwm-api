extends Resource
class_name ClipboardPayload

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# ClipboardPayload Model


# Starting position of clipboard selection [x,y]
# Required: False
# isArray: false
@export var start: AnyType:
	set(value):
		__start__was__set = true
		start = value
var __start__was__set := false

# Ending position of clipboard selection [x,y]
# Required: False
# isArray: false
@export var stop: AnyType:
	set(value):
		__stop__was__set = true
		stop = value
var __stop__was__set := false

# Clipboard data
# Required: False
# isArray: false
@export var data: AnyType:
	set(value):
		__data__was__set = true
		data = value
var __data__was__set := false

# Clipboard type
# Required: False
# isArray: false
# Allowed values: "primary", "secondary", "clipboard"
@export var type: AnyType:
	set(value):
		if str(value) != "" and not (str(value) in __type__allowable__values):
			push_error("ClipboardPayload: tried to set property `type` to a value that is not allowed." +
				"  Allowed values: `primary`, `secondary`, `clipboard`")
			return
		__type__was__set = true
		type = value
var __type__was__set := false
var __type__allowable__values := ["primary", "secondary", "clipboard"]

# Required: False
# isArray: false
@export var context: ClipboardPayloadContext:
	set(value):
		__context__was__set = true
		context = value
var __context__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__start__was__set:
		bzz_dictionary["start"] = self.start
	if self.__stop__was__set:
		bzz_dictionary["stop"] = self.stop
	if self.__data__was__set:
		bzz_dictionary["data"] = self.data
	if self.__type__was__set:
		bzz_dictionary["type"] = self.type
	if self.__context__was__set:
		bzz_dictionary["context"] = self.context
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("start"):
		me.start = from_dict["start"]
	if from_dict.has("stop"):
		me.stop = from_dict["stop"]
	if from_dict.has("data"):
		me.data = from_dict["data"]
	if from_dict.has("type"):
		me.type = from_dict["type"]
	if from_dict.has("context"):
		me.context = ClipboardPayload_context.bzz_denormalize_single(from_dict["context"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

