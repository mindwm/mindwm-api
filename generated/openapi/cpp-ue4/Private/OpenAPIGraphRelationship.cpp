/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIGraphRelationship.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIGraphRelationship::SourceEnum& Value)
{
	switch (Value)
	{
	case OpenAPIGraphRelationship::SourceEnum::GraphRelationship:
		return TEXT("graph.relationship");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIGraphRelationship::SourceEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIGraphRelationship::EnumToString(const OpenAPIGraphRelationship::SourceEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIGraphRelationship::SourceEnum& Value)
{
	static TMap<FString, OpenAPIGraphRelationship::SourceEnum> StringToEnum = { 
		{ TEXT("graph.relationship"), OpenAPIGraphRelationship::SourceEnum::GraphRelationship }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIGraphRelationship::EnumFromString(const FString& EnumAsString, OpenAPIGraphRelationship::SourceEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIGraphRelationship::SourceEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIGraphRelationship::SourceEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIGraphRelationship::TypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIGraphRelationship::TypeEnum::Created:
		return TEXT("created");
	case OpenAPIGraphRelationship::TypeEnum::Updated:
		return TEXT("updated");
	case OpenAPIGraphRelationship::TypeEnum::Deleted:
		return TEXT("deleted");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIGraphRelationship::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIGraphRelationship::EnumToString(const OpenAPIGraphRelationship::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIGraphRelationship::TypeEnum& Value)
{
	static TMap<FString, OpenAPIGraphRelationship::TypeEnum> StringToEnum = { 
		{ TEXT("created"), OpenAPIGraphRelationship::TypeEnum::Created },
		{ TEXT("updated"), OpenAPIGraphRelationship::TypeEnum::Updated },
		{ TEXT("deleted"), OpenAPIGraphRelationship::TypeEnum::Deleted }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIGraphRelationship::EnumFromString(const FString& EnumAsString, OpenAPIGraphRelationship::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIGraphRelationship::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIGraphRelationship::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIGraphRelationship::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("source")); WriteJsonValue(Writer, Source);
	Writer->WriteIdentifierPrefix(TEXT("specversion")); WriteJsonValue(Writer, Specversion);
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type);
	if (Datacontenttype.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("datacontenttype")); WriteJsonValue(Writer, Datacontenttype.GetValue());
	}
	if (Dataschema.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dataschema")); WriteJsonValue(Writer, Dataschema.GetValue());
	}
	if (Subject.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subject")); WriteJsonValue(Writer, Subject.GetValue());
	}
	if (Time.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("time")); WriteJsonValue(Writer, Time.GetValue());
	}
	if (Data.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("data")); WriteJsonValue(Writer, Data.GetValue());
	}
	if (DataBase64.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("data_base64")); WriteJsonValue(Writer, DataBase64.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIGraphRelationship::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("source"), Source);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("specversion"), Specversion);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("datacontenttype"), Datacontenttype);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dataschema"), Dataschema);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subject"), Subject);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("time"), Time);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("data"), Data);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("data_base64"), DataBase64);

	return ParseSuccess;
}

}
