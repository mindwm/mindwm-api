/*
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CloudEvent : CloudEvents Specification JSON Schema
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloudEvent {
    /// Identifies the event.
    #[serde(rename = "id")]
    pub id: String,
    /// Identifies the context in which an event happened.
    #[serde(rename = "source")]
    pub source: String,
    /// The version of the CloudEvents specification which the event uses.
    #[serde(rename = "specversion")]
    pub specversion: String,
    /// Describes the type of event related to the originating occurrence.
    #[serde(rename = "type")]
    pub r#type: String,
    /// Content type of the data value. Must adhere to RFC 2046 format.
    #[serde(rename = "datacontenttype", skip_serializing_if = "Option::is_none")]
    pub datacontenttype: Option<String>,
    /// Identifies the schema that data adheres to.
    #[serde(rename = "dataschema", skip_serializing_if = "Option::is_none")]
    pub dataschema: Option<String>,
    /// Describes the subject of the event in the context of the event producer (identified by source).
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// Timestamp of when the occurrence happened. Must adhere to RFC 3339.
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    /// The event payload.
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    /// Base64 encoded event payload. Must adhere to RFC4648.
    #[serde(rename = "data_base64", skip_serializing_if = "Option::is_none")]
    pub data_base64: Option<String>,
}

impl CloudEvent {
    /// CloudEvents Specification JSON Schema
    pub fn new(id: String, source: String, specversion: String, r#type: String) -> CloudEvent {
        CloudEvent {
            id,
            source,
            specversion,
            r#type,
            datacontenttype: None,
            dataschema: None,
            subject: None,
            time: None,
            data: None,
            data_base64: None,
        }
    }
}

