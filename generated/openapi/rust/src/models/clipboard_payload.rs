/*
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClipboardPayload {
    /// Starting position of clipboard selection [x,y]
    #[serde(rename = "start", skip_serializing_if = "Option::is_none")]
    pub start: Option<Vec<i32>>,
    /// Ending position of clipboard selection [x,y]
    #[serde(rename = "stop", skip_serializing_if = "Option::is_none")]
    pub stop: Option<Vec<i32>>,
    /// Clipboard data
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    /// Clipboard type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<Box<models::ClipboardPayloadContext>>,
}

impl ClipboardPayload {
    pub fn new() -> ClipboardPayload {
        ClipboardPayload {
            start: None,
            stop: None,
            data: None,
            r#type: None,
            context: None,
        }
    }
}
/// Clipboard type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "primary")]
    Primary,
    #[serde(rename = "secondary")]
    Secondary,
    #[serde(rename = "clipboard")]
    Clipboard,
}

impl Default for Type {
    fn default() -> Type {
        Self::Primary
    }
}

