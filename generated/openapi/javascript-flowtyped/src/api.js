// @flow
/* eslint-disable no-use-before-define */
/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://mindwmw.io/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type Clipboard = {
    [key: string]: AnyType | any;

    /**
     * 
     * @type {string}
     * @memberof Clipboard
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Clipboard
     */
    source?: string;
    /**
     * 
     * @type {ClipboardPayload}
     * @memberof Clipboard
     */
    data?: ClipboardPayload;
    /**
     * Identifies the event.
     * @type {string}
     * @memberof Clipboard
     */
    id: string;
    /**
     * The version of the CloudEvents specification which the event uses.
     * @type {string}
     * @memberof Clipboard
     */
    specversion: string;
    /**
     * Content type of the data value. Must adhere to RFC 2046 format.
     * @type {string}
     * @memberof Clipboard
     */
    datacontenttype?: string;
    /**
     * Identifies the schema that data adheres to.
     * @type {string}
     * @memberof Clipboard
     */
    dataschema?: string;
    /**
     * 
     * @type {string}
     * @memberof Clipboard
     */
    subject?: string;
    /**
     * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
     * @type {Date}
     * @memberof Clipboard
     */
    time?: Date;
    /**
     * Base64 encoded event payload. Must adhere to RFC4648.
     * @type {string}
     * @memberof Clipboard
     */
    data_base64?: string;
}


            export type ClipboardPayloadTypeEnum = 'primary' | 'secondary' | 'clipboard';
/**
 * 
 * @export
 */
export type ClipboardPayload = {
    /**
     * Starting position of clipboard selection [x,y]
     * @type {Array<number>}
     * @memberof ClipboardPayload
     */
    start?: Array<number>;
    /**
     * Ending position of clipboard selection [x,y]
     * @type {Array<number>}
     * @memberof ClipboardPayload
     */
    stop?: Array<number>;
    /**
     * Clipboard data
     * @type {string}
     * @memberof ClipboardPayload
     */
    data?: string;
    /**
     * Clipboard type
     * @type {string}
     * @memberof ClipboardPayload
     */
    type?: ClipboardPayloadTypeEnum;
    /**
     * 
     * @type {ClipboardPayloadContext}
     * @memberof ClipboardPayload
     */
    context?: ClipboardPayloadContext;
}

/**
 * Selection context
 * @export
 */
export type ClipboardPayloadContext = {
    /**
     * window id
     * @type {string}
     * @memberof ClipboardPayloadContext
     */
    window?: string;
}

/**
 * CloudEvents Specification JSON Schema
 * @export
 */
export type CloudEvent = {
    /**
     * Identifies the event.
     * @type {string}
     * @memberof CloudEvent
     */
    id: string;
    /**
     * Identifies the context in which an event happened.
     * @type {string}
     * @memberof CloudEvent
     */
    source: string;
    /**
     * The version of the CloudEvents specification which the event uses.
     * @type {string}
     * @memberof CloudEvent
     */
    specversion: string;
    /**
     * Describes the type of event related to the originating occurrence.
     * @type {string}
     * @memberof CloudEvent
     */
    type: string;
    /**
     * Content type of the data value. Must adhere to RFC 2046 format.
     * @type {string}
     * @memberof CloudEvent
     */
    datacontenttype?: string;
    /**
     * Identifies the schema that data adheres to.
     * @type {string}
     * @memberof CloudEvent
     */
    dataschema?: string;
    /**
     * Describes the subject of the event in the context of the event producer (identified by source).
     * @type {string}
     * @memberof CloudEvent
     */
    subject?: string;
    /**
     * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
     * @type {Date}
     * @memberof CloudEvent
     */
    time?: Date;
    /**
     * 
     * @type {CloudEventData}
     * @memberof CloudEvent
     */
    data?: CloudEventData;
    /**
     * Base64 encoded event payload. Must adhere to RFC4648.
     * @type {string}
     * @memberof CloudEvent
     */
    data_base64?: string;
}

/**
 * The event payload.
 * @export
 */
export type CloudEventData = {
}

/**
 * 
 * @export
 */
export type IoDocument = {
    [key: string]: AnyType | any;

    /**
     * 
     * @type {string}
     * @memberof IoDocument
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof IoDocument
     */
    source?: string;
    /**
     * 
     * @type {TmuxPaneIoDocument}
     * @memberof IoDocument
     */
    data?: TmuxPaneIoDocument;
    /**
     * Identifies the event.
     * @type {string}
     * @memberof IoDocument
     */
    id: string;
    /**
     * The version of the CloudEvents specification which the event uses.
     * @type {string}
     * @memberof IoDocument
     */
    specversion: string;
    /**
     * Content type of the data value. Must adhere to RFC 2046 format.
     * @type {string}
     * @memberof IoDocument
     */
    datacontenttype?: string;
    /**
     * Identifies the schema that data adheres to.
     * @type {string}
     * @memberof IoDocument
     */
    dataschema?: string;
    /**
     * Describes the subject of the event in the context of the event producer (identified by source).
     * @type {string}
     * @memberof IoDocument
     */
    subject?: string;
    /**
     * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
     * @type {Date}
     * @memberof IoDocument
     */
    time?: Date;
    /**
     * Base64 encoded event payload. Must adhere to RFC4648.
     * @type {string}
     * @memberof IoDocument
     */
    data_base64?: string;
}

/**
 * 
 * @export
 */
export type TmuxPaneIoDocument = {
    [key: string]: AnyType | any;

    /**
     * User input
     * @type {string}
     * @memberof TmuxPaneIoDocument
     */
    input: string;
    /**
     * Command output (mix of stdout & stderr)
     * @type {string}
     * @memberof TmuxPaneIoDocument
     */
    output: string;
    /**
     * ps1 (prompt) AFTER the input and output
     * @type {string}
     * @memberof TmuxPaneIoDocument
     */
    ps1: string;
}



export type ApiTypes = {  }
