# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.MindwWM.models.base_model import Model
from app.MindwWM.models.neo4j_capture_data_change_meta_source import Neo4jCaptureDataChangeMetaSource  # noqa: F401,E501
from MindwWM import util


class Neo4jCaptureDataChangeMeta(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, operation: str=None, source: Neo4jCaptureDataChangeMetaSource=None, timestamp: int=None, tx_event_id: int=None, tx_events_count: int=None, tx_id: int=None, username: str=None):  # noqa: E501
        """Neo4jCaptureDataChangeMeta - a model defined in Swagger

        :param operation: The operation of this Neo4jCaptureDataChangeMeta.  # noqa: E501
        :type operation: str
        :param source: The source of this Neo4jCaptureDataChangeMeta.  # noqa: E501
        :type source: Neo4jCaptureDataChangeMetaSource
        :param timestamp: The timestamp of this Neo4jCaptureDataChangeMeta.  # noqa: E501
        :type timestamp: int
        :param tx_event_id: The tx_event_id of this Neo4jCaptureDataChangeMeta.  # noqa: E501
        :type tx_event_id: int
        :param tx_events_count: The tx_events_count of this Neo4jCaptureDataChangeMeta.  # noqa: E501
        :type tx_events_count: int
        :param tx_id: The tx_id of this Neo4jCaptureDataChangeMeta.  # noqa: E501
        :type tx_id: int
        :param username: The username of this Neo4jCaptureDataChangeMeta.  # noqa: E501
        :type username: str
        """
        self.swagger_types = {
            'operation': str,
            'source': Neo4jCaptureDataChangeMetaSource,
            'timestamp': int,
            'tx_event_id': int,
            'tx_events_count': int,
            'tx_id': int,
            'username': str
        }

        self.attribute_map = {
            'operation': 'operation',
            'source': 'source',
            'timestamp': 'timestamp',
            'tx_event_id': 'txEventId',
            'tx_events_count': 'txEventsCount',
            'tx_id': 'txId',
            'username': 'username'
        }

        self._operation = operation
        self._source = source
        self._timestamp = timestamp
        self._tx_event_id = tx_event_id
        self._tx_events_count = tx_events_count
        self._tx_id = tx_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'Neo4jCaptureDataChangeMeta':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Neo4jCaptureDataChange_meta of this Neo4jCaptureDataChangeMeta.  # noqa: E501
        :rtype: Neo4jCaptureDataChangeMeta
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation(self) -> str:
        """Gets the operation of this Neo4jCaptureDataChangeMeta.


        :return: The operation of this Neo4jCaptureDataChangeMeta.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation: str):
        """Sets the operation of this Neo4jCaptureDataChangeMeta.


        :param operation: The operation of this Neo4jCaptureDataChangeMeta.
        :type operation: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def source(self) -> Neo4jCaptureDataChangeMetaSource:
        """Gets the source of this Neo4jCaptureDataChangeMeta.


        :return: The source of this Neo4jCaptureDataChangeMeta.
        :rtype: Neo4jCaptureDataChangeMetaSource
        """
        return self._source

    @source.setter
    def source(self, source: Neo4jCaptureDataChangeMetaSource):
        """Sets the source of this Neo4jCaptureDataChangeMeta.


        :param source: The source of this Neo4jCaptureDataChangeMeta.
        :type source: Neo4jCaptureDataChangeMetaSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def timestamp(self) -> int:
        """Gets the timestamp of this Neo4jCaptureDataChangeMeta.


        :return: The timestamp of this Neo4jCaptureDataChangeMeta.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: int):
        """Sets the timestamp of this Neo4jCaptureDataChangeMeta.


        :param timestamp: The timestamp of this Neo4jCaptureDataChangeMeta.
        :type timestamp: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def tx_event_id(self) -> int:
        """Gets the tx_event_id of this Neo4jCaptureDataChangeMeta.


        :return: The tx_event_id of this Neo4jCaptureDataChangeMeta.
        :rtype: int
        """
        return self._tx_event_id

    @tx_event_id.setter
    def tx_event_id(self, tx_event_id: int):
        """Sets the tx_event_id of this Neo4jCaptureDataChangeMeta.


        :param tx_event_id: The tx_event_id of this Neo4jCaptureDataChangeMeta.
        :type tx_event_id: int
        """
        if tx_event_id is None:
            raise ValueError("Invalid value for `tx_event_id`, must not be `None`")  # noqa: E501

        self._tx_event_id = tx_event_id

    @property
    def tx_events_count(self) -> int:
        """Gets the tx_events_count of this Neo4jCaptureDataChangeMeta.


        :return: The tx_events_count of this Neo4jCaptureDataChangeMeta.
        :rtype: int
        """
        return self._tx_events_count

    @tx_events_count.setter
    def tx_events_count(self, tx_events_count: int):
        """Sets the tx_events_count of this Neo4jCaptureDataChangeMeta.


        :param tx_events_count: The tx_events_count of this Neo4jCaptureDataChangeMeta.
        :type tx_events_count: int
        """
        if tx_events_count is None:
            raise ValueError("Invalid value for `tx_events_count`, must not be `None`")  # noqa: E501

        self._tx_events_count = tx_events_count

    @property
    def tx_id(self) -> int:
        """Gets the tx_id of this Neo4jCaptureDataChangeMeta.


        :return: The tx_id of this Neo4jCaptureDataChangeMeta.
        :rtype: int
        """
        return self._tx_id

    @tx_id.setter
    def tx_id(self, tx_id: int):
        """Sets the tx_id of this Neo4jCaptureDataChangeMeta.


        :param tx_id: The tx_id of this Neo4jCaptureDataChangeMeta.
        :type tx_id: int
        """
        if tx_id is None:
            raise ValueError("Invalid value for `tx_id`, must not be `None`")  # noqa: E501

        self._tx_id = tx_id

    @property
    def username(self) -> str:
        """Gets the username of this Neo4jCaptureDataChangeMeta.


        :return: The username of this Neo4jCaptureDataChangeMeta.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Neo4jCaptureDataChangeMeta.


        :param username: The username of this Neo4jCaptureDataChangeMeta.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username
