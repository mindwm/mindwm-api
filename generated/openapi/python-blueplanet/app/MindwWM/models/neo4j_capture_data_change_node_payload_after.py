# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.MindwWM.models.base_model import Model
from MindwWM import util


class Neo4jCaptureDataChangeNodePayloadAfter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, labels: List[str]=None, properties: Dict[str, object]=None):  # noqa: E501
        """Neo4jCaptureDataChangeNodePayloadAfter - a model defined in Swagger

        :param labels: The labels of this Neo4jCaptureDataChangeNodePayloadAfter.  # noqa: E501
        :type labels: List[str]
        :param properties: The properties of this Neo4jCaptureDataChangeNodePayloadAfter.  # noqa: E501
        :type properties: Dict[str, object]
        """
        self.swagger_types = {
            'labels': List[str],
            'properties': Dict[str, object]
        }

        self.attribute_map = {
            'labels': 'labels',
            'properties': 'properties'
        }

        self._labels = labels
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt) -> 'Neo4jCaptureDataChangeNodePayloadAfter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Neo4jCaptureDataChangeNodePayload_after of this Neo4jCaptureDataChangeNodePayloadAfter.  # noqa: E501
        :rtype: Neo4jCaptureDataChangeNodePayloadAfter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self) -> List[str]:
        """Gets the labels of this Neo4jCaptureDataChangeNodePayloadAfter.


        :return: The labels of this Neo4jCaptureDataChangeNodePayloadAfter.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: List[str]):
        """Sets the labels of this Neo4jCaptureDataChangeNodePayloadAfter.


        :param labels: The labels of this Neo4jCaptureDataChangeNodePayloadAfter.
        :type labels: List[str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def properties(self) -> Dict[str, object]:
        """Gets the properties of this Neo4jCaptureDataChangeNodePayloadAfter.


        :return: The properties of this Neo4jCaptureDataChangeNodePayloadAfter.
        :rtype: Dict[str, object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: Dict[str, object]):
        """Sets the properties of this Neo4jCaptureDataChangeNodePayloadAfter.


        :param properties: The properties of this Neo4jCaptureDataChangeNodePayloadAfter.
        :type properties: Dict[str, object]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties
