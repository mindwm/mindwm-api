# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.MindWM.models.base_model import Model
from MindWM import util


class Neo4jCaptureDataChangeSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, constraints: Dict[str, object]=None, properties: Dict[str, object]=None):  # noqa: E501
        """Neo4jCaptureDataChangeSchema - a model defined in Swagger

        :param constraints: The constraints of this Neo4jCaptureDataChangeSchema.  # noqa: E501
        :type constraints: Dict[str, object]
        :param properties: The properties of this Neo4jCaptureDataChangeSchema.  # noqa: E501
        :type properties: Dict[str, object]
        """
        self.swagger_types = {
            'constraints': Dict[str, object],
            'properties': Dict[str, object]
        }

        self.attribute_map = {
            'constraints': 'constraints',
            'properties': 'properties'
        }

        self._constraints = constraints
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt) -> 'Neo4jCaptureDataChangeSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Neo4jCaptureDataChange_schema of this Neo4jCaptureDataChangeSchema.  # noqa: E501
        :rtype: Neo4jCaptureDataChangeSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constraints(self) -> Dict[str, object]:
        """Gets the constraints of this Neo4jCaptureDataChangeSchema.


        :return: The constraints of this Neo4jCaptureDataChangeSchema.
        :rtype: Dict[str, object]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints: Dict[str, object]):
        """Sets the constraints of this Neo4jCaptureDataChangeSchema.


        :param constraints: The constraints of this Neo4jCaptureDataChangeSchema.
        :type constraints: Dict[str, object]
        """

        self._constraints = constraints

    @property
    def properties(self) -> Dict[str, object]:
        """Gets the properties of this Neo4jCaptureDataChangeSchema.


        :return: The properties of this Neo4jCaptureDataChangeSchema.
        :rtype: Dict[str, object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: Dict[str, object]):
        """Sets the properties of this Neo4jCaptureDataChangeSchema.


        :param properties: The properties of this Neo4jCaptureDataChangeSchema.
        :type properties: Dict[str, object]
        """

        self._properties = properties
