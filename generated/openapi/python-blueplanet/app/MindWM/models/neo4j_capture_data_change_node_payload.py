# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.MindWM.models.base_model import Model
from app.MindWM.models.neo4j_capture_data_change_node_payload_after import Neo4jCaptureDataChangeNodePayloadAfter  # noqa: F401,E501
from MindWM import util


class Neo4jCaptureDataChangeNodePayload(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, after: Neo4jCaptureDataChangeNodePayloadAfter=None, before: str=None, id: str=None, type: str=None):  # noqa: E501
        """Neo4jCaptureDataChangeNodePayload - a model defined in Swagger

        :param after: The after of this Neo4jCaptureDataChangeNodePayload.  # noqa: E501
        :type after: Neo4jCaptureDataChangeNodePayloadAfter
        :param before: The before of this Neo4jCaptureDataChangeNodePayload.  # noqa: E501
        :type before: str
        :param id: The id of this Neo4jCaptureDataChangeNodePayload.  # noqa: E501
        :type id: str
        :param type: The type of this Neo4jCaptureDataChangeNodePayload.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'after': Neo4jCaptureDataChangeNodePayloadAfter,
            'before': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'after': 'after',
            'before': 'before',
            'id': 'id',
            'type': 'type'
        }

        self._after = after
        self._before = before
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Neo4jCaptureDataChangeNodePayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Neo4jCaptureDataChangeNodePayload of this Neo4jCaptureDataChangeNodePayload.  # noqa: E501
        :rtype: Neo4jCaptureDataChangeNodePayload
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after(self) -> Neo4jCaptureDataChangeNodePayloadAfter:
        """Gets the after of this Neo4jCaptureDataChangeNodePayload.


        :return: The after of this Neo4jCaptureDataChangeNodePayload.
        :rtype: Neo4jCaptureDataChangeNodePayloadAfter
        """
        return self._after

    @after.setter
    def after(self, after: Neo4jCaptureDataChangeNodePayloadAfter):
        """Sets the after of this Neo4jCaptureDataChangeNodePayload.


        :param after: The after of this Neo4jCaptureDataChangeNodePayload.
        :type after: Neo4jCaptureDataChangeNodePayloadAfter
        """
        if after is None:
            raise ValueError("Invalid value for `after`, must not be `None`")  # noqa: E501

        self._after = after

    @property
    def before(self) -> str:
        """Gets the before of this Neo4jCaptureDataChangeNodePayload.


        :return: The before of this Neo4jCaptureDataChangeNodePayload.
        :rtype: str
        """
        return self._before

    @before.setter
    def before(self, before: str):
        """Sets the before of this Neo4jCaptureDataChangeNodePayload.


        :param before: The before of this Neo4jCaptureDataChangeNodePayload.
        :type before: str
        """
        if before is None:
            raise ValueError("Invalid value for `before`, must not be `None`")  # noqa: E501

        self._before = before

    @property
    def id(self) -> str:
        """Gets the id of this Neo4jCaptureDataChangeNodePayload.


        :return: The id of this Neo4jCaptureDataChangeNodePayload.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Neo4jCaptureDataChangeNodePayload.


        :param id: The id of this Neo4jCaptureDataChangeNodePayload.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this Neo4jCaptureDataChangeNodePayload.


        :return: The type of this Neo4jCaptureDataChangeNodePayload.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Neo4jCaptureDataChangeNodePayload.


        :param type: The type of this Neo4jCaptureDataChangeNodePayload.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
