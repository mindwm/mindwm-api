/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * OpenAPI spec version: 0.1.0
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package MindWM.model
import MindWM.model.Neo4jCaptureDataChangeMeta
import MindWM.model.Neo4jCaptureDataChangeRelationshipPayload
import MindWM.model.Neo4jCaptureDataChangeSchema
import java.time.OffsetDateTime
import ujson.Value
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** GraphRelationshipAllOfDataData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class GraphRelationshipAllOfDataData(
  headers: Value,

    messageKey: String,

    meta: Neo4jCaptureDataChangeMetaData,

    offset: Int,

    partition: Int,

    sourceType: String,

    timestamp: OffsetDateTime,

    topic: String,

    schema: Neo4jCaptureDataChangeSchemaData,

    payload: Neo4jCaptureDataChangeRelationshipPayloadData

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // headers






        
        if (errors.isEmpty || !failFast) {
            if (headers == null) {
            errors += ValidationError(path :+ GraphRelationshipAllOfData.Fields.headers, "headers is a required field and cannot be null")
            }
        }
        







        

        // ==================
        // messageKey






        







        

        // ==================
        // meta






        
        if (errors.isEmpty || !failFast) {
            if (meta == null) {
            errors += ValidationError(path :+ GraphRelationshipAllOfData.Fields.meta, "meta is a required field and cannot be null")
            }
        }
        







        
        // validating meta
        if (errors.isEmpty || !failFast) {
            if meta != null then errors ++= meta.validationErrors(path :+ GraphRelationshipAllOfData.Fields.meta, failFast)
        }

        // ==================
        // offset






        







        

        // ==================
        // partition






        







        

        // ==================
        // sourceType






        







        

        // ==================
        // timestamp






        
        if (errors.isEmpty || !failFast) {
            if (timestamp == null) {
            errors += ValidationError(path :+ GraphRelationshipAllOfData.Fields.timestamp, "timestamp is a required field and cannot be null")
            }
        }
        







        

        // ==================
        // topic






        







        

        // ==================
        // schema






        
        if (errors.isEmpty || !failFast) {
            if (schema == null) {
            errors += ValidationError(path :+ GraphRelationshipAllOfData.Fields.schema, "schema is a required field and cannot be null")
            }
        }
        







        
        // validating schema
        if (errors.isEmpty || !failFast) {
            if schema != null then errors ++= schema.validationErrors(path :+ GraphRelationshipAllOfData.Fields.schema, failFast)
        }

        // ==================
        // payload






        
        if (errors.isEmpty || !failFast) {
            if (payload == null) {
            errors += ValidationError(path :+ GraphRelationshipAllOfData.Fields.payload, "payload is a required field and cannot be null")
            }
        }
        







        
        // validating payload
        if (errors.isEmpty || !failFast) {
            if payload != null then errors ++= payload.validationErrors(path :+ GraphRelationshipAllOfData.Fields.payload, failFast)
        }

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[GraphRelationshipAllOfData] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : GraphRelationshipAllOfData = {
    GraphRelationshipAllOfData(
        headers = 
        headers
        
        ,
        messageKey = 
        messageKey
        
        ,
        meta = 
        meta
        
        ,
        offset = 
        offset
        
        ,
        partition = 
        partition
        
        ,
        sourceType = 
        sourceType
        
        ,
        timestamp = 
        timestamp
        
        ,
        topic = 
        topic
        
        ,
        schema = 
        schema
        
        ,
        payload = 
        payload
        
        
    )
  }
}

object GraphRelationshipAllOfDataData {

  given readWriter : RW[GraphRelationshipAllOfDataData] = macroRW

  def fromJsonString(jason : String) : GraphRelationshipAllOfDataData = try {
        read[GraphRelationshipAllOfDataData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[GraphRelationshipAllOfDataData] = try {
        read[List[GraphRelationshipAllOfDataData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[GraphRelationshipAllOfData]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[GraphRelationshipAllOfData]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, GraphRelationshipAllOfDataData] = try {
        read[Map[String, GraphRelationshipAllOfDataData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, GraphRelationshipAllOfData]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, GraphRelationshipAllOfData]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

