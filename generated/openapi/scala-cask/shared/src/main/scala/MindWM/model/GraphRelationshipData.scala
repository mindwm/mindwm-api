/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * OpenAPI spec version: 0.1.0
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package MindWM.model
import MindWM.model.GraphRelationshipAllOfData
import MindWM.model.URI
import MindWM.model.oas_any_type_not_mapped
import java.time.OffsetDateTime
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** GraphRelationshipData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class GraphRelationshipData(
/* Identifies the event. */
  id: String,

    source: GraphRelationship.SourceEnum,

  /* The version of the CloudEvents specification which the event uses. */
  specversion: String,

    `type`: GraphRelationship.&#x60;type&#x60;Enum,

  /* Content type of the data value. Must adhere to RFC 2046 format. */
  datacontenttype: String = "" ,

  /* Identifies the schema that data adheres to. */
  dataschema: URI = "" ,

  /* Describes the subject of the event in the context of the event producer (identified by source). */
  subject: String = "" ,

  /* Timestamp of when the occurrence happened. Must adhere to RFC 3339. */
  time: OffsetDateTime = null ,

    data: GraphRelationshipAllOfDataData = null ,

  /* Base64 encoded event payload. Must adhere to RFC4648. */
  dataBase64: String = "" 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // id



        // validate min length 1
        if (errors.isEmpty || !failFast)  {
          val len = if id == null then 0 else id.length
            if (len < 1) {
               errors += ValidationError(path :+ GraphRelationship.Fields.id, s"length $len is shorter than the min length 1")
            }
        }



        







        

        // ==================
        // source






        







        

        // ==================
        // specversion



        // validate min length 1
        if (errors.isEmpty || !failFast)  {
          val len = if specversion == null then 0 else specversion.length
            if (len < 1) {
               errors += ValidationError(path :+ GraphRelationship.Fields.specversion, s"length $len is shorter than the min length 1")
            }
        }



        







        

        // ==================
        // `type`






        







        

        // ==================
        // datacontenttype



        // validate min length 1
        if (errors.isEmpty || !failFast)  {
          val len = if datacontenttype == null then 0 else datacontenttype.length
            if (len < 1) {
               errors += ValidationError(path :+ GraphRelationship.Fields.datacontenttype, s"length $len is shorter than the min length 1")
            }
        }



        







        

        // ==================
        // dataschema



        // validate min length 1
        if (errors.isEmpty || !failFast)  {
          val len = if dataschema == null then 0 else dataschema.length
            if (len < 1) {
               errors += ValidationError(path :+ GraphRelationship.Fields.dataschema, s"length $len is shorter than the min length 1")
            }
        }



        







        

        // ==================
        // subject



        // validate min length 1
        if (errors.isEmpty || !failFast)  {
          val len = if subject == null then 0 else subject.length
            if (len < 1) {
               errors += ValidationError(path :+ GraphRelationship.Fields.subject, s"length $len is shorter than the min length 1")
            }
        }



        







        

        // ==================
        // time



        // validate min length 1
        if (errors.isEmpty || !failFast)  {
          val len = if time == null then 0 else time.length
            if (len < 1) {
               errors += ValidationError(path :+ GraphRelationship.Fields.time, s"length $len is shorter than the min length 1")
            }
        }



        







        

        // ==================
        // data






        







        
        // validating data
        if (errors.isEmpty || !failFast) {
            if data != null then errors ++= data.validationErrors(path :+ GraphRelationship.Fields.data, failFast)
        }

        // ==================
        // dataBase64






        







        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[GraphRelationship] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : GraphRelationship = {
    GraphRelationship(
        id = 
        id
        
        ,
        source = 
        source
        
        ,
        specversion = 
        specversion
        
        ,
        `type` = 
        `type`
        
        ,
        datacontenttype = Option(
        datacontenttype
        )
        ,
        dataschema = Option(
        dataschema
        )
        ,
        subject = Option(
        subject
        )
        ,
        time = Option(
        time
        )
        ,
        data = Option(
        data
        )
        .map(_.asModel),
        dataBase64 = Option(
        dataBase64
        )
        
    )
  }
}

object GraphRelationshipData {

  given readWriter : RW[GraphRelationshipData] = macroRW

  def fromJsonString(jason : String) : GraphRelationshipData = try {
        read[GraphRelationshipData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[GraphRelationshipData] = try {
        read[List[GraphRelationshipData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[GraphRelationship]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[GraphRelationship]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, GraphRelationshipData] = try {
        read[Map[String, GraphRelationshipData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, GraphRelationship]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, GraphRelationship]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

