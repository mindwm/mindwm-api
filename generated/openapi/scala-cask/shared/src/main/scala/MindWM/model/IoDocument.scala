/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * OpenAPI spec version: 0.1.0
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package MindWM.model
import MindWM.model.TmuxPaneIoDocument
import MindWM.model.URI
import MindWM.model.oas_any_type_not_mapped
import java.time.OffsetDateTime
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class IoDocument(
  `type`: Option[String] = None ,

    source: Option[String] = None ,

    data: Option[TmuxPaneIoDocument] = None ,

  /* Identifies the event. */
  id: String,

  /* The version of the CloudEvents specification which the event uses. */
  specversion: String,

  /* Content type of the data value. Must adhere to RFC 2046 format. */
  datacontenttype: Option[String] = None ,

  /* Identifies the schema that data adheres to. */
  dataschema: Option[URI] = None ,

    subject: Option[String] = None ,

  /* Timestamp of when the occurrence happened. Must adhere to RFC 3339. */
  time: Option[OffsetDateTime] = None ,

  /* Base64 encoded event payload. Must adhere to RFC4648. */
  dataBase64: Option[String] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : IoDocumentData = {
    IoDocumentData(
            `type` = `type`.getOrElse(""),
            source = source.getOrElse(""),
            data = data.getOrElse(),
            id = id,
            specversion = specversion,
            datacontenttype = datacontenttype.getOrElse(""),
            dataschema = dataschema.getOrElse(""),
            subject = subject.getOrElse(IoDocument),
            time = time.getOrElse(null),
            dataBase64 = dataBase64.getOrElse("")
    )
  }

}

object IoDocument{

    given RW[IoDocument] = IoDocumentData.readWriter.bimap[IoDocument](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case `type` extends Fields("`type`")
            case source extends Fields("source")
            case data extends Fields("data")
            case id extends Fields("id")
            case specversion extends Fields("specversion")
            case datacontenttype extends Fields("datacontenttype")
            case dataschema extends Fields("dataschema")
            case subject extends Fields("subject")
            case time extends Fields("time")
            case dataBase64 extends Fields("dataBase64")
    }


}

