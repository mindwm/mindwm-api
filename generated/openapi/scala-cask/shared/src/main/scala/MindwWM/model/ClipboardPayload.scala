/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * OpenAPI spec version: 0.1.0
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package MindwWM.model
import MindwWM.model.ClipboardPayloadContext
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class ClipboardPayload(
/* Starting position of clipboard selection [x,y] */
  start: Seq[Int] = Nil ,

  /* Ending position of clipboard selection [x,y] */
  stop: Seq[Int] = Nil ,

  /* Clipboard data */
  data: Option[String] = None ,

  /* Clipboard type */
  `type`: Option[ClipboardPayload.&#x60;type&#x60;Enum] = None ,

    context: Option[ClipboardPayloadContext] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : ClipboardPayloadData = {
    ClipboardPayloadData(
            start = start,
            stop = stop,
            data = data.getOrElse(""),
            `type` = `type`.getOrElse(null),
            context = context.map(_.asData).getOrElse(null)
    )
  }

}

object ClipboardPayload{

    given RW[ClipboardPayload] = ClipboardPayloadData.readWriter.bimap[ClipboardPayload](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case start extends Fields("start")
            case stop extends Fields("stop")
            case data extends Fields("data")
            case `type` extends Fields("`type`")
            case context extends Fields("context")
    }

        // baseName=type
        // nameInCamelCase = `type`
        enum &#x60;type&#x60;Enum derives ReadWriter {
            case primary
            case secondary
            case clipboard
        }

}

