/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * OpenAPI spec version: 0.1.0
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package MindwWM.model
import MindwWM.model.Neo4jCaptureDataChangeNodePayload
import MindwWM.model.Neo4jCaptureDataChangeRelationshipPayload
import MindwWM.model.Neo4jCaptureDataChangeRelationshipPayloadEnd
import ujson.Value
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** Neo4jCaptureDataChangePayloadData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class Neo4jCaptureDataChangePayloadData(
  after: Value,

    before: String,

    id: String,

    `type`: String,

    end: Neo4jCaptureDataChangeRelationshipPayloadEndData,

    label: String,

    start: Neo4jCaptureDataChangeRelationshipPayloadEndData

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // after






        
        if (errors.isEmpty || !failFast) {
            if (after == null) {
            errors += ValidationError(path :+ Neo4jCaptureDataChangePayload.Fields.after, "after is a required field and cannot be null")
            }
        }
        







        

        // ==================
        // before






        







        

        // ==================
        // id






        







        

        // ==================
        // `type`






        







        

        // ==================
        // end






        
        if (errors.isEmpty || !failFast) {
            if (end == null) {
            errors += ValidationError(path :+ Neo4jCaptureDataChangePayload.Fields.end, "end is a required field and cannot be null")
            }
        }
        







        
        // validating end
        if (errors.isEmpty || !failFast) {
            if end != null then errors ++= end.validationErrors(path :+ Neo4jCaptureDataChangePayload.Fields.end, failFast)
        }

        // ==================
        // label






        







        

        // ==================
        // start






        
        if (errors.isEmpty || !failFast) {
            if (start == null) {
            errors += ValidationError(path :+ Neo4jCaptureDataChangePayload.Fields.start, "start is a required field and cannot be null")
            }
        }
        







        
        // validating start
        if (errors.isEmpty || !failFast) {
            if start != null then errors ++= start.validationErrors(path :+ Neo4jCaptureDataChangePayload.Fields.start, failFast)
        }

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[Neo4jCaptureDataChangePayload] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : Neo4jCaptureDataChangePayload = {
    Neo4jCaptureDataChangePayload(
        after = 
        after
        
        ,
        before = 
        before
        
        ,
        id = 
        id
        
        ,
        `type` = 
        `type`
        
        ,
        end = 
        end
        
        ,
        label = 
        label
        
        ,
        start = 
        start
        
        
    )
  }
}

object Neo4jCaptureDataChangePayloadData {

  given readWriter : RW[Neo4jCaptureDataChangePayloadData] = macroRW

  def fromJsonString(jason : String) : Neo4jCaptureDataChangePayloadData = try {
        read[Neo4jCaptureDataChangePayloadData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[Neo4jCaptureDataChangePayloadData] = try {
        read[List[Neo4jCaptureDataChangePayloadData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[Neo4jCaptureDataChangePayload]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[Neo4jCaptureDataChangePayload]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, Neo4jCaptureDataChangePayloadData] = try {
        read[Map[String, Neo4jCaptureDataChangePayloadData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, Neo4jCaptureDataChangePayload]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, Neo4jCaptureDataChangePayload]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

