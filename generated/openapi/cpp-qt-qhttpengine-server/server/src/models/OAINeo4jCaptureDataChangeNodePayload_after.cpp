/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINeo4jCaptureDataChangeNodePayload_after.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINeo4jCaptureDataChangeNodePayload_after::OAINeo4jCaptureDataChangeNodePayload_after(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINeo4jCaptureDataChangeNodePayload_after::OAINeo4jCaptureDataChangeNodePayload_after() {
    this->initializeModel();
}

OAINeo4jCaptureDataChangeNodePayload_after::~OAINeo4jCaptureDataChangeNodePayload_after() {}

void OAINeo4jCaptureDataChangeNodePayload_after::initializeModel() {

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAINeo4jCaptureDataChangeNodePayload_after::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINeo4jCaptureDataChangeNodePayload_after::fromJsonObject(QJsonObject json) {

    m_labels_isValid = ::OpenAPI::fromJsonValue(labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAINeo4jCaptureDataChangeNodePayload_after::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINeo4jCaptureDataChangeNodePayload_after::asJsonObject() const {
    QJsonObject obj;
    if (labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(labels));
    }
    if (properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(properties));
    }
    return obj;
}

QList<QString> OAINeo4jCaptureDataChangeNodePayload_after::getLabels() const {
    return labels;
}
void OAINeo4jCaptureDataChangeNodePayload_after::setLabels(const QList<QString> &labels) {
    this->labels = labels;
    this->m_labels_isSet = true;
}

bool OAINeo4jCaptureDataChangeNodePayload_after::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAINeo4jCaptureDataChangeNodePayload_after::is_labels_Valid() const{
    return m_labels_isValid;
}

QMap<QString, OAIAnyType> OAINeo4jCaptureDataChangeNodePayload_after::getProperties() const {
    return properties;
}
void OAINeo4jCaptureDataChangeNodePayload_after::setProperties(const QMap<QString, OAIAnyType> &properties) {
    this->properties = properties;
    this->m_properties_isSet = true;
}

bool OAINeo4jCaptureDataChangeNodePayload_after::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAINeo4jCaptureDataChangeNodePayload_after::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAINeo4jCaptureDataChangeNodePayload_after::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINeo4jCaptureDataChangeNodePayload_after::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_labels_isValid && m_properties_isValid && true;
}

} // namespace OpenAPI
