/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGraphNode_allOf_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGraphNode_allOf_data::OAIGraphNode_allOf_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGraphNode_allOf_data::OAIGraphNode_allOf_data() {
    this->initializeModel();
}

OAIGraphNode_allOf_data::~OAIGraphNode_allOf_data() {}

void OAIGraphNode_allOf_data::initializeModel() {

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_message_key_isSet = false;
    m_message_key_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIGraphNode_allOf_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGraphNode_allOf_data::fromJsonObject(QJsonObject json) {

    m_headers_isValid = ::OpenAPI::fromJsonValue(headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_message_key_isValid = ::OpenAPI::fromJsonValue(message_key, json[QString("message_key")]);
    m_message_key_isSet = !json[QString("message_key")].isNull() && m_message_key_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(source_type, json[QString("source_type")]);
    m_source_type_isSet = !json[QString("source_type")].isNull() && m_source_type_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIGraphNode_allOf_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGraphNode_allOf_data::asJsonObject() const {
    QJsonObject obj;
    if (m_headers_isSet) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(headers));
    }
    if (m_message_key_isSet) {
        obj.insert(QString("message_key"), ::OpenAPI::toJsonValue(message_key));
    }
    if (meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(meta));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(offset));
    }
    if (m_partition_isSet) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(partition));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("source_type"), ::OpenAPI::toJsonValue(source_type));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(timestamp));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(topic));
    }
    if (schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(schema));
    }
    if (payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(payload));
    }
    return obj;
}

OAIObject OAIGraphNode_allOf_data::getHeaders() const {
    return headers;
}
void OAIGraphNode_allOf_data::setHeaders(const OAIObject &headers) {
    this->headers = headers;
    this->m_headers_isSet = true;
}

bool OAIGraphNode_allOf_data::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIGraphNode_allOf_data::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIGraphNode_allOf_data::getMessageKey() const {
    return message_key;
}
void OAIGraphNode_allOf_data::setMessageKey(const QString &message_key) {
    this->message_key = message_key;
    this->m_message_key_isSet = true;
}

bool OAIGraphNode_allOf_data::is_message_key_Set() const{
    return m_message_key_isSet;
}

bool OAIGraphNode_allOf_data::is_message_key_Valid() const{
    return m_message_key_isValid;
}

OAINeo4jCaptureDataChange_meta OAIGraphNode_allOf_data::getMeta() const {
    return meta;
}
void OAIGraphNode_allOf_data::setMeta(const OAINeo4jCaptureDataChange_meta &meta) {
    this->meta = meta;
    this->m_meta_isSet = true;
}

bool OAIGraphNode_allOf_data::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIGraphNode_allOf_data::is_meta_Valid() const{
    return m_meta_isValid;
}

qint32 OAIGraphNode_allOf_data::getOffset() const {
    return offset;
}
void OAIGraphNode_allOf_data::setOffset(const qint32 &offset) {
    this->offset = offset;
    this->m_offset_isSet = true;
}

bool OAIGraphNode_allOf_data::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIGraphNode_allOf_data::is_offset_Valid() const{
    return m_offset_isValid;
}

qint32 OAIGraphNode_allOf_data::getPartition() const {
    return partition;
}
void OAIGraphNode_allOf_data::setPartition(const qint32 &partition) {
    this->partition = partition;
    this->m_partition_isSet = true;
}

bool OAIGraphNode_allOf_data::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAIGraphNode_allOf_data::is_partition_Valid() const{
    return m_partition_isValid;
}

QString OAIGraphNode_allOf_data::getSourceType() const {
    return source_type;
}
void OAIGraphNode_allOf_data::setSourceType(const QString &source_type) {
    this->source_type = source_type;
    this->m_source_type_isSet = true;
}

bool OAIGraphNode_allOf_data::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIGraphNode_allOf_data::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QDateTime OAIGraphNode_allOf_data::getTimestamp() const {
    return timestamp;
}
void OAIGraphNode_allOf_data::setTimestamp(const QDateTime &timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

bool OAIGraphNode_allOf_data::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIGraphNode_allOf_data::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIGraphNode_allOf_data::getTopic() const {
    return topic;
}
void OAIGraphNode_allOf_data::setTopic(const QString &topic) {
    this->topic = topic;
    this->m_topic_isSet = true;
}

bool OAIGraphNode_allOf_data::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIGraphNode_allOf_data::is_topic_Valid() const{
    return m_topic_isValid;
}

OAINeo4jCaptureDataChange_schema OAIGraphNode_allOf_data::getSchema() const {
    return schema;
}
void OAIGraphNode_allOf_data::setSchema(const OAINeo4jCaptureDataChange_schema &schema) {
    this->schema = schema;
    this->m_schema_isSet = true;
}

bool OAIGraphNode_allOf_data::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIGraphNode_allOf_data::is_schema_Valid() const{
    return m_schema_isValid;
}

OAINeo4jCaptureDataChangeNodePayload OAIGraphNode_allOf_data::getPayload() const {
    return payload;
}
void OAIGraphNode_allOf_data::setPayload(const OAINeo4jCaptureDataChangeNodePayload &payload) {
    this->payload = payload;
    this->m_payload_isSet = true;
}

bool OAIGraphNode_allOf_data::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIGraphNode_allOf_data::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIGraphNode_allOf_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (payload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGraphNode_allOf_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_headers_isValid && m_message_key_isValid && m_meta_isValid && m_offset_isValid && m_partition_isValid && m_source_type_isValid && m_timestamp_isValid && m_topic_isValid && m_schema_isValid && m_payload_isValid && true;
}

} // namespace OpenAPI
