/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINeo4jCaptureDataChangeNodePayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINeo4jCaptureDataChangeNodePayload::OAINeo4jCaptureDataChangeNodePayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINeo4jCaptureDataChangeNodePayload::OAINeo4jCaptureDataChangeNodePayload() {
    this->initializeModel();
}

OAINeo4jCaptureDataChangeNodePayload::~OAINeo4jCaptureDataChangeNodePayload() {}

void OAINeo4jCaptureDataChangeNodePayload::initializeModel() {

    m_after_isSet = false;
    m_after_isValid = false;

    m_before_isSet = false;
    m_before_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINeo4jCaptureDataChangeNodePayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINeo4jCaptureDataChangeNodePayload::fromJsonObject(QJsonObject json) {

    m_after_isValid = ::OpenAPI::fromJsonValue(after, json[QString("after")]);
    m_after_isSet = !json[QString("after")].isNull() && m_after_isValid;

    m_before_isValid = ::OpenAPI::fromJsonValue(before, json[QString("before")]);
    m_before_isSet = !json[QString("before")].isNull() && m_before_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINeo4jCaptureDataChangeNodePayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINeo4jCaptureDataChangeNodePayload::asJsonObject() const {
    QJsonObject obj;
    if (after.isSet()) {
        obj.insert(QString("after"), ::OpenAPI::toJsonValue(after));
    }
    if (m_before_isSet) {
        obj.insert(QString("before"), ::OpenAPI::toJsonValue(before));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    return obj;
}

OAINeo4jCaptureDataChangeNodePayload_after OAINeo4jCaptureDataChangeNodePayload::getAfter() const {
    return after;
}
void OAINeo4jCaptureDataChangeNodePayload::setAfter(const OAINeo4jCaptureDataChangeNodePayload_after &after) {
    this->after = after;
    this->m_after_isSet = true;
}

bool OAINeo4jCaptureDataChangeNodePayload::is_after_Set() const{
    return m_after_isSet;
}

bool OAINeo4jCaptureDataChangeNodePayload::is_after_Valid() const{
    return m_after_isValid;
}

QString OAINeo4jCaptureDataChangeNodePayload::getBefore() const {
    return before;
}
void OAINeo4jCaptureDataChangeNodePayload::setBefore(const QString &before) {
    this->before = before;
    this->m_before_isSet = true;
}

bool OAINeo4jCaptureDataChangeNodePayload::is_before_Set() const{
    return m_before_isSet;
}

bool OAINeo4jCaptureDataChangeNodePayload::is_before_Valid() const{
    return m_before_isValid;
}

QString OAINeo4jCaptureDataChangeNodePayload::getId() const {
    return id;
}
void OAINeo4jCaptureDataChangeNodePayload::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAINeo4jCaptureDataChangeNodePayload::is_id_Set() const{
    return m_id_isSet;
}

bool OAINeo4jCaptureDataChangeNodePayload::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINeo4jCaptureDataChangeNodePayload::getType() const {
    return type;
}
void OAINeo4jCaptureDataChangeNodePayload::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAINeo4jCaptureDataChangeNodePayload::is_type_Set() const{
    return m_type_isSet;
}

bool OAINeo4jCaptureDataChangeNodePayload::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINeo4jCaptureDataChangeNodePayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (after.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINeo4jCaptureDataChangeNodePayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_after_isValid && m_before_isValid && m_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
