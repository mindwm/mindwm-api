/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINeo4jCaptureDataChange_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINeo4jCaptureDataChange_schema::OAINeo4jCaptureDataChange_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINeo4jCaptureDataChange_schema::OAINeo4jCaptureDataChange_schema() {
    this->initializeModel();
}

OAINeo4jCaptureDataChange_schema::~OAINeo4jCaptureDataChange_schema() {}

void OAINeo4jCaptureDataChange_schema::initializeModel() {

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAINeo4jCaptureDataChange_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINeo4jCaptureDataChange_schema::fromJsonObject(QJsonObject json) {

    m_constraints_isValid = ::OpenAPI::fromJsonValue(constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAINeo4jCaptureDataChange_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINeo4jCaptureDataChange_schema::asJsonObject() const {
    QJsonObject obj;
    if (constraints.size() > 0) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(constraints));
    }
    if (properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(properties));
    }
    return obj;
}

QMap<QString, OAIAnyType> OAINeo4jCaptureDataChange_schema::getConstraints() const {
    return constraints;
}
void OAINeo4jCaptureDataChange_schema::setConstraints(const QMap<QString, OAIAnyType> &constraints) {
    this->constraints = constraints;
    this->m_constraints_isSet = true;
}

bool OAINeo4jCaptureDataChange_schema::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAINeo4jCaptureDataChange_schema::is_constraints_Valid() const{
    return m_constraints_isValid;
}

QMap<QString, OAIAnyType> OAINeo4jCaptureDataChange_schema::getProperties() const {
    return properties;
}
void OAINeo4jCaptureDataChange_schema::setProperties(const QMap<QString, OAIAnyType> &properties) {
    this->properties = properties;
    this->m_properties_isSet = true;
}

bool OAINeo4jCaptureDataChange_schema::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAINeo4jCaptureDataChange_schema::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAINeo4jCaptureDataChange_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (constraints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINeo4jCaptureDataChange_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
