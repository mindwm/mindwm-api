<?php
/**
 * ClipboardPayload
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ClipboardPayload model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class ClipboardPayload 
{
        /**
     * Starting position of clipboard selection [x,y]
     *
     * @var int[]|null
     * @SerializedName("start")
     * @Type("array<int>")
    */
    #[Assert\All([
        new Assert\Type("int"),
    ])]
    #[Assert\Count(max: 2)]
    #[Assert\Count(min: 2)]
    protected ?array $start = null;

    /**
     * Ending position of clipboard selection [x,y]
     *
     * @var int[]|null
     * @SerializedName("stop")
     * @Type("array<int>")
    */
    #[Assert\All([
        new Assert\Type("int"),
    ])]
    #[Assert\Count(max: 2)]
    #[Assert\Count(min: 2)]
    protected ?array $stop = null;

    /**
     * Clipboard data
     *
     * @var string|null
     * @SerializedName("data")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(min: 1)]
    protected ?string $data = null;

    /**
     * Clipboard type
     *
     * @var string|null
     * @SerializedName("type")
     * @Type("string")
    */
    #[Assert\Choice(["primary", "secondary", "clipboard"])]
    #[Assert\Type("string")]
    protected ?string $type = null;

    /**
     * @var ClipboardPayloadContext|null
     * @SerializedName("context")
     * @Type("OpenAPI\Server\Model\ClipboardPayloadContext")
    */
    #[Assert\Type("OpenAPI\Server\Model\ClipboardPayloadContext")]
    protected ?ClipboardPayloadContext $context = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->start = array_key_exists('start', $data) ? $data['start'] : $this->start;
            $this->stop = array_key_exists('stop', $data) ? $data['stop'] : $this->stop;
            $this->data = array_key_exists('data', $data) ? $data['data'] : $this->data;
            $this->type = array_key_exists('type', $data) ? $data['type'] : $this->type;
            $this->context = array_key_exists('context', $data) ? $data['context'] : $this->context;
        }
    }

    /**
     * Gets start.
     *
     * @return int[]|null
     */
    public function getStart(): ?array
    {
        return $this->start;
    }

    /**
    * Sets start.
    *
    * @param int[]|null $start  Starting position of clipboard selection [x,y]
    *
    * @return $this
    */
    public function setStart(?array $start = null): self
    {
        $this->start = $start;

        return $this;
    }




    /**
     * Gets stop.
     *
     * @return int[]|null
     */
    public function getStop(): ?array
    {
        return $this->stop;
    }

    /**
    * Sets stop.
    *
    * @param int[]|null $stop  Ending position of clipboard selection [x,y]
    *
    * @return $this
    */
    public function setStop(?array $stop = null): self
    {
        $this->stop = $stop;

        return $this;
    }




    /**
     * Gets data.
     *
     * @return string|null
     */
    public function getData(): ?string
    {
        return $this->data;
    }

    /**
    * Sets data.
    *
    * @param string|null $data  Clipboard data
    *
    * @return $this
    */
    public function setData(?string $data = null): self
    {
        $this->data = $data;

        return $this;
    }




    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
    * Sets type.
    *
    * @param string|null $type  Clipboard type
    *
    * @return $this
    */
    public function setType(?string $type = null): self
    {
        $this->type = $type;

        return $this;
    }




    /**
     * Gets context.
     *
     * @return ClipboardPayloadContext|null
     */
    public function getContext(): ?ClipboardPayloadContext
    {
        return $this->context;
    }

    /**
    * Sets context.
    *
    * @param ClipboardPayloadContext|null $context
    *
    * @return $this
    */
    public function setContext(?ClipboardPayloadContext $context = null): self
    {
        $this->context = $context;

        return $this;
    }



}


