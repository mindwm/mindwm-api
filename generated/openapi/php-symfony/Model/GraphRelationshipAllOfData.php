<?php
/**
 * GraphRelationshipAllOfData
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the GraphRelationshipAllOfData model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class GraphRelationshipAllOfData 
{
        /**
     * @var array|null
     * @SerializedName("headers")
     * @Type("array")
    */
    #[Assert\NotNull]
    #[Assert\Type("array")]
    protected ?array $headers = null;

    /**
     * @var string|null
     * @SerializedName("message_key")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $messageKey = null;

    /**
     * @var Neo4jCaptureDataChangeMeta|null
     * @SerializedName("meta")
     * @Type("OpenAPI\Server\Model\Neo4jCaptureDataChangeMeta")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\Neo4jCaptureDataChangeMeta")]
    protected ?Neo4jCaptureDataChangeMeta $meta = null;

    /**
     * @var int|null
     * @SerializedName("offset")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $offset = null;

    /**
     * @var int|null
     * @SerializedName("partition")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $partition = null;

    /**
     * @var string|null
     * @SerializedName("source_type")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $sourceType = null;

    /**
     * @var \DateTime|null
     * @SerializedName("timestamp")
     * @Type("DateTime")
    */
    #[Assert\NotNull]
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $timestamp = null;

    /**
     * @var string|null
     * @SerializedName("topic")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $topic = null;

    /**
     * @var Neo4jCaptureDataChangeSchema|null
     * @SerializedName("schema")
     * @Type("OpenAPI\Server\Model\Neo4jCaptureDataChangeSchema")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\Neo4jCaptureDataChangeSchema")]
    protected ?Neo4jCaptureDataChangeSchema $schema = null;

    /**
     * @var Neo4jCaptureDataChangeRelationshipPayload|null
     * @SerializedName("payload")
     * @Type("OpenAPI\Server\Model\Neo4jCaptureDataChangeRelationshipPayload")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\Neo4jCaptureDataChangeRelationshipPayload")]
    protected ?Neo4jCaptureDataChangeRelationshipPayload $payload = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->headers = array_key_exists('headers', $data) ? $data['headers'] : $this->headers;
            $this->messageKey = array_key_exists('messageKey', $data) ? $data['messageKey'] : $this->messageKey;
            $this->meta = array_key_exists('meta', $data) ? $data['meta'] : $this->meta;
            $this->offset = array_key_exists('offset', $data) ? $data['offset'] : $this->offset;
            $this->partition = array_key_exists('partition', $data) ? $data['partition'] : $this->partition;
            $this->sourceType = array_key_exists('sourceType', $data) ? $data['sourceType'] : $this->sourceType;
            $this->timestamp = array_key_exists('timestamp', $data) ? $data['timestamp'] : $this->timestamp;
            $this->topic = array_key_exists('topic', $data) ? $data['topic'] : $this->topic;
            $this->schema = array_key_exists('schema', $data) ? $data['schema'] : $this->schema;
            $this->payload = array_key_exists('payload', $data) ? $data['payload'] : $this->payload;
        }
    }

    /**
     * Gets headers.
     *
     * @return array|null
     */
    public function getHeaders(): ?array
    {
        return $this->headers;
    }

    /**
    * Sets headers.
    *
    * @param array|null $headers
    *
    * @return $this
    */
    public function setHeaders(?array $headers): self
    {
        $this->headers = $headers;

        return $this;
    }




    /**
     * Gets messageKey.
     *
     * @return string|null
     */
    public function getMessageKey(): ?string
    {
        return $this->messageKey;
    }

    /**
    * Sets messageKey.
    *
    * @param string|null $messageKey
    *
    * @return $this
    */
    public function setMessageKey(?string $messageKey): self
    {
        $this->messageKey = $messageKey;

        return $this;
    }




    /**
     * Gets meta.
     *
     * @return Neo4jCaptureDataChangeMeta|null
     */
    public function getMeta(): ?Neo4jCaptureDataChangeMeta
    {
        return $this->meta;
    }

    /**
    * Sets meta.
    *
    * @param Neo4jCaptureDataChangeMeta|null $meta
    *
    * @return $this
    */
    public function setMeta(?Neo4jCaptureDataChangeMeta $meta): self
    {
        $this->meta = $meta;

        return $this;
    }




    /**
     * Gets offset.
     *
     * @return int|null
     */
    public function getOffset(): ?int
    {
        return $this->offset;
    }

    /**
    * Sets offset.
    *
    * @param int|null $offset
    *
    * @return $this
    */
    public function setOffset(?int $offset): self
    {
        $this->offset = $offset;

        return $this;
    }




    /**
     * Gets partition.
     *
     * @return int|null
     */
    public function getPartition(): ?int
    {
        return $this->partition;
    }

    /**
    * Sets partition.
    *
    * @param int|null $partition
    *
    * @return $this
    */
    public function setPartition(?int $partition): self
    {
        $this->partition = $partition;

        return $this;
    }




    /**
     * Gets sourceType.
     *
     * @return string|null
     */
    public function getSourceType(): ?string
    {
        return $this->sourceType;
    }

    /**
    * Sets sourceType.
    *
    * @param string|null $sourceType
    *
    * @return $this
    */
    public function setSourceType(?string $sourceType): self
    {
        $this->sourceType = $sourceType;

        return $this;
    }




    /**
     * Gets timestamp.
     *
     * @return \DateTime|null
     */
    public function getTimestamp(): ?\DateTime
    {
        return $this->timestamp;
    }

    /**
    * Sets timestamp.
    *
    * @param \DateTime|null $timestamp
    *
    * @return $this
    */
    public function setTimestamp(?\DateTime $timestamp): self
    {
        $this->timestamp = $timestamp;

        return $this;
    }




    /**
     * Gets topic.
     *
     * @return string|null
     */
    public function getTopic(): ?string
    {
        return $this->topic;
    }

    /**
    * Sets topic.
    *
    * @param string|null $topic
    *
    * @return $this
    */
    public function setTopic(?string $topic): self
    {
        $this->topic = $topic;

        return $this;
    }




    /**
     * Gets schema.
     *
     * @return Neo4jCaptureDataChangeSchema|null
     */
    public function getSchema(): ?Neo4jCaptureDataChangeSchema
    {
        return $this->schema;
    }

    /**
    * Sets schema.
    *
    * @param Neo4jCaptureDataChangeSchema|null $schema
    *
    * @return $this
    */
    public function setSchema(?Neo4jCaptureDataChangeSchema $schema): self
    {
        $this->schema = $schema;

        return $this;
    }




    /**
     * Gets payload.
     *
     * @return Neo4jCaptureDataChangeRelationshipPayload|null
     */
    public function getPayload(): ?Neo4jCaptureDataChangeRelationshipPayload
    {
        return $this->payload;
    }

    /**
    * Sets payload.
    *
    * @param Neo4jCaptureDataChangeRelationshipPayload|null $payload
    *
    * @return $this
    */
    public function setPayload(?Neo4jCaptureDataChangeRelationshipPayload $payload): self
    {
        $this->payload = $payload;

        return $this;
    }



}


