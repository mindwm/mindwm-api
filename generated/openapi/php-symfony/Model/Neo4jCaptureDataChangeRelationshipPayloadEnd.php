<?php
/**
 * Neo4jCaptureDataChangeRelationshipPayloadEnd
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Neo4jCaptureDataChangeRelationshipPayloadEnd model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class Neo4jCaptureDataChangeRelationshipPayloadEnd 
{
        /**
     * @var string|null
     * @SerializedName("id")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $id = null;

    /**
     * @var []|null
     * @SerializedName("ids")
     * @Type("array<string, AnyType>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("AnyType"),
    ])]
    protected ?array $ids = null;

    /**
     * @var string[]|null
     * @SerializedName("labels")
     * @Type("array<string>")
    */
    #[Assert\NotNull]
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $labels = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->ids = array_key_exists('ids', $data) ? $data['ids'] : $this->ids;
            $this->labels = array_key_exists('labels', $data) ? $data['labels'] : $this->labels;
        }
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param string|null $id
    *
    * @return $this
    */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets ids.
     *
     * @return []|null
     */
    public function getIds(): ?array
    {
        return $this->ids;
    }

    /**
    * Sets ids.
    *
    * @param []|null $ids
    *
    * @return $this
    */
    public function setIds(?array $ids): self
    {
        $this->ids = $ids;

        return $this;
    }




    /**
     * Gets labels.
     *
     * @return string[]|null
     */
    public function getLabels(): ?array
    {
        return $this->labels;
    }

    /**
    * Sets labels.
    *
    * @param string[]|null $labels
    *
    * @return $this
    */
    public function setLabels(?array $labels): self
    {
        $this->labels = $labels;

        return $this;
    }



}


