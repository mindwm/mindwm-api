<?php
/**
 * Clipboard
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Clipboard model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class Clipboard 
{
        /**
     * @var string|null
     * @SerializedName("type")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $type = null;

    /**
     * @var string|null
     * @SerializedName("source")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Regex("/[a-zA-Z0-9_][a-zA-Z0-9_-]{0,31}\\\\.(?!-)[a-zA-Z0-9-]{1,63}(?&lt;!-)$/")]
    protected ?string $source = null;

    /**
     * @var ClipboardPayload|null
     * @SerializedName("data")
     * @Type("OpenAPI\Server\Model\ClipboardPayload")
    */
    #[Assert\Type("OpenAPI\Server\Model\ClipboardPayload")]
    protected ?ClipboardPayload $data = null;

    /**
     * Identifies the event.
     *
     * @var string|null
     * @SerializedName("id")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Length(min: 1)]
    protected ?string $id = null;

    /**
     * The version of the CloudEvents specification which the event uses.
     *
     * @var string|null
     * @SerializedName("specversion")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Length(min: 1)]
    protected ?string $specversion = null;

    /**
     * Content type of the data value. Must adhere to RFC 2046 format.
     *
     * @var string|null
     * @SerializedName("datacontenttype")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(min: 1)]
    protected ?string $datacontenttype = null;

    /**
     * Identifies the schema that data adheres to.
     *
     * @var string|null
     * @SerializedName("dataschema")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(min: 1)]
    protected ?string $dataschema = null;

    /**
     * @var string|null
     * @SerializedName("subject")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $subject = null;

    /**
     * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
     *
     * @var \DateTime|null
     * @SerializedName("time")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    #[Assert\Length(min: 1)]
    protected ?\DateTime $time = null;

    /**
     * Base64 encoded event payload. Must adhere to RFC4648.
     *
     * @var string|null
     * @SerializedName("data_base64")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $dataBase64 = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->type = array_key_exists('type', $data) ? $data['type'] : $this->type;
            $this->source = array_key_exists('source', $data) ? $data['source'] : $this->source;
            $this->data = array_key_exists('data', $data) ? $data['data'] : $this->data;
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->specversion = array_key_exists('specversion', $data) ? $data['specversion'] : $this->specversion;
            $this->datacontenttype = array_key_exists('datacontenttype', $data) ? $data['datacontenttype'] : $this->datacontenttype;
            $this->dataschema = array_key_exists('dataschema', $data) ? $data['dataschema'] : $this->dataschema;
            $this->subject = array_key_exists('subject', $data) ? $data['subject'] : $this->subject;
            $this->time = array_key_exists('time', $data) ? $data['time'] : $this->time;
            $this->dataBase64 = array_key_exists('dataBase64', $data) ? $data['dataBase64'] : $this->dataBase64;
        }
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
    * Sets type.
    *
    * @param string|null $type
    *
    * @return $this
    */
    public function setType(?string $type = null): self
    {
        $this->type = $type;

        return $this;
    }




    /**
     * Gets source.
     *
     * @return string|null
     */
    public function getSource(): ?string
    {
        return $this->source;
    }

    /**
    * Sets source.
    *
    * @param string|null $source
    *
    * @return $this
    */
    public function setSource(?string $source = null): self
    {
        $this->source = $source;

        return $this;
    }




    /**
     * Gets data.
     *
     * @return ClipboardPayload|null
     */
    public function getData(): ?ClipboardPayload
    {
        return $this->data;
    }

    /**
    * Sets data.
    *
    * @param ClipboardPayload|null $data
    *
    * @return $this
    */
    public function setData(?ClipboardPayload $data = null): self
    {
        $this->data = $data;

        return $this;
    }




    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param string|null $id  Identifies the event.
    *
    * @return $this
    */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets specversion.
     *
     * @return string|null
     */
    public function getSpecversion(): ?string
    {
        return $this->specversion;
    }

    /**
    * Sets specversion.
    *
    * @param string|null $specversion  The version of the CloudEvents specification which the event uses.
    *
    * @return $this
    */
    public function setSpecversion(?string $specversion): self
    {
        $this->specversion = $specversion;

        return $this;
    }




    /**
     * Gets datacontenttype.
     *
     * @return string|null
     */
    public function getDatacontenttype(): ?string
    {
        return $this->datacontenttype;
    }

    /**
    * Sets datacontenttype.
    *
    * @param string|null $datacontenttype  Content type of the data value. Must adhere to RFC 2046 format.
    *
    * @return $this
    */
    public function setDatacontenttype(?string $datacontenttype = null): self
    {
        $this->datacontenttype = $datacontenttype;

        return $this;
    }




    /**
     * Gets dataschema.
     *
     * @return string|null
     */
    public function getDataschema(): ?string
    {
        return $this->dataschema;
    }

    /**
    * Sets dataschema.
    *
    * @param string|null $dataschema  Identifies the schema that data adheres to.
    *
    * @return $this
    */
    public function setDataschema(?string $dataschema = null): self
    {
        $this->dataschema = $dataschema;

        return $this;
    }




    /**
     * Gets subject.
     *
     * @return string|null
     */
    public function getSubject(): ?string
    {
        return $this->subject;
    }

    /**
    * Sets subject.
    *
    * @param string|null $subject
    *
    * @return $this
    */
    public function setSubject(?string $subject = null): self
    {
        $this->subject = $subject;

        return $this;
    }




    /**
     * Gets time.
     *
     * @return \DateTime|null
     */
    public function getTime(): ?\DateTime
    {
        return $this->time;
    }

    /**
    * Sets time.
    *
    * @param \DateTime|null $time  Timestamp of when the occurrence happened. Must adhere to RFC 3339.
    *
    * @return $this
    */
    public function setTime(?\DateTime $time = null): self
    {
        $this->time = $time;

        return $this;
    }




    /**
     * Gets dataBase64.
     *
     * @return string|null
     */
    public function getDataBase64(): ?string
    {
        return $this->dataBase64;
    }

    /**
    * Sets dataBase64.
    *
    * @param string|null $dataBase64  Base64 encoded event payload. Must adhere to RFC4648.
    *
    * @return $this
    */
    public function setDataBase64(?string $dataBase64 = null): self
    {
        $this->dataBase64 = $dataBase64;

        return $this;
    }



}


