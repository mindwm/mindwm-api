# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Neo4jCaptureDataChangeRelationshipPayload_end

    Neo4jCaptureDataChangeRelationshipPayloadEnd(;
        id=nothing,
        ids=nothing,
        labels=nothing,
    )

    - id::String
    - ids::Dict{String, Any}
    - labels::Vector{String}
"""
Base.@kwdef mutable struct Neo4jCaptureDataChangeRelationshipPayloadEnd <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    ids::Union{Nothing, Dict{String, Any}} = nothing
    labels::Union{Nothing, Vector{String}} = nothing

    function Neo4jCaptureDataChangeRelationshipPayloadEnd(id, ids, labels, )
        OpenAPI.validate_property(Neo4jCaptureDataChangeRelationshipPayloadEnd, Symbol("id"), id)
        OpenAPI.validate_property(Neo4jCaptureDataChangeRelationshipPayloadEnd, Symbol("ids"), ids)
        OpenAPI.validate_property(Neo4jCaptureDataChangeRelationshipPayloadEnd, Symbol("labels"), labels)
        return new(id, ids, labels, )
    end
end # type Neo4jCaptureDataChangeRelationshipPayloadEnd

const _property_types_Neo4jCaptureDataChangeRelationshipPayloadEnd = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("ids")=>"Dict{String, Any}", Symbol("labels")=>"Vector{String}", )
OpenAPI.property_type(::Type{ Neo4jCaptureDataChangeRelationshipPayloadEnd }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Neo4jCaptureDataChangeRelationshipPayloadEnd[name]))}

function check_required(o::Neo4jCaptureDataChangeRelationshipPayloadEnd)
    o.id === nothing && (return false)
    o.ids === nothing && (return false)
    o.labels === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Neo4jCaptureDataChangeRelationshipPayloadEnd }, name::Symbol, val)
end
