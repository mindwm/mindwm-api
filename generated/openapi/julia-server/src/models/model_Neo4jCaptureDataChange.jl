# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Neo4jCaptureDataChange

    Neo4jCaptureDataChange(;
        headers=nothing,
        message_key=nothing,
        meta=nothing,
        offset=nothing,
        partition=nothing,
        source_type=nothing,
        timestamp=nothing,
        topic=nothing,
        schema=nothing,
        payload=nothing,
    )

    - headers::Dict{String, Any}
    - message_key::String
    - meta::Neo4jCaptureDataChangeMeta
    - offset::Int64
    - partition::Int64
    - source_type::String
    - timestamp::ZonedDateTime
    - topic::String
    - schema::Neo4jCaptureDataChangeSchema
    - payload::Neo4jCaptureDataChangePayload
"""
Base.@kwdef mutable struct Neo4jCaptureDataChange <: OpenAPI.APIModel
    headers::Union{Nothing, Dict{String, Any}} = nothing
    message_key::Union{Nothing, String} = nothing
    meta = nothing # spec type: Union{ Nothing, Neo4jCaptureDataChangeMeta }
    offset::Union{Nothing, Int64} = nothing
    partition::Union{Nothing, Int64} = nothing
    source_type::Union{Nothing, String} = nothing
    timestamp::Union{Nothing, ZonedDateTime} = nothing
    topic::Union{Nothing, String} = nothing
    schema = nothing # spec type: Union{ Nothing, Neo4jCaptureDataChangeSchema }
    payload = nothing # spec type: Union{ Nothing, Neo4jCaptureDataChangePayload }

    function Neo4jCaptureDataChange(headers, message_key, meta, offset, partition, source_type, timestamp, topic, schema, payload, )
        OpenAPI.validate_property(Neo4jCaptureDataChange, Symbol("headers"), headers)
        OpenAPI.validate_property(Neo4jCaptureDataChange, Symbol("message_key"), message_key)
        OpenAPI.validate_property(Neo4jCaptureDataChange, Symbol("meta"), meta)
        OpenAPI.validate_property(Neo4jCaptureDataChange, Symbol("offset"), offset)
        OpenAPI.validate_property(Neo4jCaptureDataChange, Symbol("partition"), partition)
        OpenAPI.validate_property(Neo4jCaptureDataChange, Symbol("source_type"), source_type)
        OpenAPI.validate_property(Neo4jCaptureDataChange, Symbol("timestamp"), timestamp)
        OpenAPI.validate_property(Neo4jCaptureDataChange, Symbol("topic"), topic)
        OpenAPI.validate_property(Neo4jCaptureDataChange, Symbol("schema"), schema)
        OpenAPI.validate_property(Neo4jCaptureDataChange, Symbol("payload"), payload)
        return new(headers, message_key, meta, offset, partition, source_type, timestamp, topic, schema, payload, )
    end
end # type Neo4jCaptureDataChange

const _property_types_Neo4jCaptureDataChange = Dict{Symbol,String}(Symbol("headers")=>"Dict{String, Any}", Symbol("message_key")=>"String", Symbol("meta")=>"Neo4jCaptureDataChangeMeta", Symbol("offset")=>"Int64", Symbol("partition")=>"Int64", Symbol("source_type")=>"String", Symbol("timestamp")=>"ZonedDateTime", Symbol("topic")=>"String", Symbol("schema")=>"Neo4jCaptureDataChangeSchema", Symbol("payload")=>"Neo4jCaptureDataChangePayload", )
OpenAPI.property_type(::Type{ Neo4jCaptureDataChange }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Neo4jCaptureDataChange[name]))}

function check_required(o::Neo4jCaptureDataChange)
    o.headers === nothing && (return false)
    o.message_key === nothing && (return false)
    o.meta === nothing && (return false)
    o.offset === nothing && (return false)
    o.partition === nothing && (return false)
    o.source_type === nothing && (return false)
    o.timestamp === nothing && (return false)
    o.topic === nothing && (return false)
    o.schema === nothing && (return false)
    o.payload === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Neo4jCaptureDataChange }, name::Symbol, val)
    if name === Symbol("timestamp")
        OpenAPI.validate_param(name, "Neo4jCaptureDataChange", :format, val, "date-time")
    end
end
