# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Neo4jCaptureDataChangeNodePayload_after

    Neo4jCaptureDataChangeNodePayloadAfter(;
        labels=nothing,
        properties=nothing,
    )

    - labels::Vector{String}
    - properties::Dict{String, Any}
"""
Base.@kwdef mutable struct Neo4jCaptureDataChangeNodePayloadAfter <: OpenAPI.APIModel
    labels::Union{Nothing, Vector{String}} = nothing
    properties::Union{Nothing, Dict{String, Any}} = nothing

    function Neo4jCaptureDataChangeNodePayloadAfter(labels, properties, )
        OpenAPI.validate_property(Neo4jCaptureDataChangeNodePayloadAfter, Symbol("labels"), labels)
        OpenAPI.validate_property(Neo4jCaptureDataChangeNodePayloadAfter, Symbol("properties"), properties)
        return new(labels, properties, )
    end
end # type Neo4jCaptureDataChangeNodePayloadAfter

const _property_types_Neo4jCaptureDataChangeNodePayloadAfter = Dict{Symbol,String}(Symbol("labels")=>"Vector{String}", Symbol("properties")=>"Dict{String, Any}", )
OpenAPI.property_type(::Type{ Neo4jCaptureDataChangeNodePayloadAfter }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Neo4jCaptureDataChangeNodePayloadAfter[name]))}

function check_required(o::Neo4jCaptureDataChangeNodePayloadAfter)
    o.labels === nothing && (return false)
    o.properties === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Neo4jCaptureDataChangeNodePayloadAfter }, name::Symbol, val)
end
