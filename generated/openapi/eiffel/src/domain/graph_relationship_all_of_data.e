note
 description:"[
		Mindwm API
 		This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
  		The version of the OpenAPI document: 0.1.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class GRAPH_RELATIONSHIP_ALL_OF_DATA




feature --Access

    headers: detachable ANY
      
    message_key: detachable STRING_32
      
    meta: detachable NEO4J_CAPTURE_DATA_CHANGE_META
      
    offset: INTEGER_32
      
    partition: INTEGER_32
      
    source_type: detachable STRING_32
      
    timestamp: detachable DATE_TIME
      
    topic: detachable STRING_32
      
    schema: detachable NEO4J_CAPTURE_DATA_CHANGE_SCHEMA
      
    payload: detachable NEO4J_CAPTURE_DATA_CHANGE_RELATIONSHIP_PAYLOAD
      

feature -- Change Element

    set_headers (a_name: like headers)
        -- Set 'headers' with 'a_name'.
      do
        headers := a_name
      ensure
        headers_set: headers = a_name
      end

    set_message_key (a_name: like message_key)
        -- Set 'message_key' with 'a_name'.
      do
        message_key := a_name
      ensure
        message_key_set: message_key = a_name
      end

    set_meta (a_name: like meta)
        -- Set 'meta' with 'a_name'.
      do
        meta := a_name
      ensure
        meta_set: meta = a_name
      end

    set_offset (a_name: like offset)
        -- Set 'offset' with 'a_name'.
      do
        offset := a_name
      ensure
        offset_set: offset = a_name
      end

    set_partition (a_name: like partition)
        -- Set 'partition' with 'a_name'.
      do
        partition := a_name
      ensure
        partition_set: partition = a_name
      end

    set_source_type (a_name: like source_type)
        -- Set 'source_type' with 'a_name'.
      do
        source_type := a_name
      ensure
        source_type_set: source_type = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end

    set_topic (a_name: like topic)
        -- Set 'topic' with 'a_name'.
      do
        topic := a_name
      ensure
        topic_set: topic = a_name
      end

    set_schema (a_name: like schema)
        -- Set 'schema' with 'a_name'.
      do
        schema := a_name
      ensure
        schema_set: schema = a_name
      end

    set_payload (a_name: like payload)
        -- Set 'payload' with 'a_name'.
      do
        payload := a_name
      ensure
        payload_set: payload = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass GRAPH_RELATIONSHIP_ALL_OF_DATA%N")
        if attached headers as l_headers then
          Result.append ("%Nheaders:")
          Result.append (l_headers.out)
          Result.append ("%N")
        end
        if attached message_key as l_message_key then
          Result.append ("%Nmessage_key:")
          Result.append (l_message_key.out)
          Result.append ("%N")
        end
        if attached meta as l_meta then
          Result.append ("%Nmeta:")
          Result.append (l_meta.out)
          Result.append ("%N")
        end
        if attached offset as l_offset then
          Result.append ("%Noffset:")
          Result.append (l_offset.out)
          Result.append ("%N")
        end
        if attached partition as l_partition then
          Result.append ("%Npartition:")
          Result.append (l_partition.out)
          Result.append ("%N")
        end
        if attached source_type as l_source_type then
          Result.append ("%Nsource_type:")
          Result.append (l_source_type.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
        if attached topic as l_topic then
          Result.append ("%Ntopic:")
          Result.append (l_topic.out)
          Result.append ("%N")
        end
        if attached schema as l_schema then
          Result.append ("%Nschema:")
          Result.append (l_schema.out)
          Result.append ("%N")
        end
        if attached payload as l_payload then
          Result.append ("%Npayload:")
          Result.append (l_payload.out)
          Result.append ("%N")
        end
      end
end

