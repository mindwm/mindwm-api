note
 description:"[
		Mindwm API
 		This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
  		The version of the OpenAPI document: 0.1.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class GRAPH_NODE

inherit


  CloudEvent [ANY]

feature --Access

    id: detachable STRING_32
      -- Identifies the event.
    source: detachable STRING_32
      
    specversion: detachable STRING_32
      -- The version of the CloudEvents specification which the event uses.
    type: detachable STRING_32
      
    datacontenttype: detachable STRING_32
      -- Content type of the data value. Must adhere to RFC 2046 format.
    dataschema: detachable STRING
      -- Identifies the schema that data adheres to.
    subject: detachable STRING_32
      -- Describes the subject of the event in the context of the event producer (identified by source).
    time: detachable DATE_TIME
      -- Timestamp of when the occurrence happened. Must adhere to RFC 3339.
    data: detachable GRAPH_NODE_ALL_OF_DATA
      
    data_base64: detachable STRING_32
      -- Base64 encoded event payload. Must adhere to RFC4648.

feature -- Change Element

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_source (a_name: like source)
        -- Set 'source' with 'a_name'.
      do
        source := a_name
      ensure
        source_set: source = a_name
      end

    set_specversion (a_name: like specversion)
        -- Set 'specversion' with 'a_name'.
      do
        specversion := a_name
      ensure
        specversion_set: specversion = a_name
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name
      end

    set_datacontenttype (a_name: like datacontenttype)
        -- Set 'datacontenttype' with 'a_name'.
      do
        datacontenttype := a_name
      ensure
        datacontenttype_set: datacontenttype = a_name
      end

    set_dataschema (a_name: like dataschema)
        -- Set 'dataschema' with 'a_name'.
      do
        dataschema := a_name
      ensure
        dataschema_set: dataschema = a_name
      end

    set_subject (a_name: like subject)
        -- Set 'subject' with 'a_name'.
      do
        subject := a_name
      ensure
        subject_set: subject = a_name
      end

    set_time (a_name: like time)
        -- Set 'time' with 'a_name'.
      do
        time := a_name
      ensure
        time_set: time = a_name
      end

    set_data (a_name: like data)
        -- Set 'data' with 'a_name'.
      do
        data := a_name
      ensure
        data_set: data = a_name
      end

    set_data_base64 (a_name: like data_base64)
        -- Set 'data_base64' with 'a_name'.
      do
        data_base64 := a_name
      ensure
        data_base64_set: data_base64 = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append(out_)
        Result.append("%Nclass GRAPH_NODE%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached source as l_source then
          Result.append ("%Nsource:")
          Result.append (l_source.out)
          Result.append ("%N")
        end
        if attached specversion as l_specversion then
          Result.append ("%Nspecversion:")
          Result.append (l_specversion.out)
          Result.append ("%N")
        end
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")
        end
        if attached datacontenttype as l_datacontenttype then
          Result.append ("%Ndatacontenttype:")
          Result.append (l_datacontenttype.out)
          Result.append ("%N")
        end
        if attached dataschema as l_dataschema then
          Result.append ("%Ndataschema:")
          Result.append (l_dataschema.out)
          Result.append ("%N")
        end
        if attached subject as l_subject then
          Result.append ("%Nsubject:")
          Result.append (l_subject.out)
          Result.append ("%N")
        end
        if attached time as l_time then
          Result.append ("%Ntime:")
          Result.append (l_time.out)
          Result.append ("%N")
        end
        if attached data as l_data then
          Result.append ("%Ndata:")
          Result.append (l_data.out)
          Result.append ("%N")
        end
        if attached data_base64 as l_data_base64 then
          Result.append ("%Ndata_base64:")
          Result.append (l_data_base64.out)
          Result.append ("%N")
        end
      end
end

