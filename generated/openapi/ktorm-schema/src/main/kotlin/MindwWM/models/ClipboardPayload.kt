/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package MindwWM.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param start Starting position of clipboard selection [x,y]
 * @param stop Ending position of clipboard selection [x,y]
 * @param data Clipboard data
 * @param type Clipboard type
 * @param context 
 */
object ClipboardPayloads : BaseTable<ClipboardPayload>("ClipboardPayload") {
    val data = text("data") /* null */ /* Clipboard data */
    val type = text("type").transform({ ClipboardPayload.Type.valueOf(it ?: "primary") }, { it.value }) /* null */ /* Clipboard type */

    val context = long("context") /* null */

    /**
     * Create an entity of type ClipboardPayload from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ClipboardPayload(
        start = emptyList() /* kotlin.Array<kotlin.Int>? */ /* Starting position of clipboard selection [x,y] */,
        stop = emptyList() /* kotlin.Array<kotlin.Int>? */ /* Ending position of clipboard selection [x,y] */,
        data = row[data]  /* kotlin.String? */ /* Clipboard data */,
        type = row[type]  /* kotlin.String? */ /* Clipboard type */,
        context = ClipboardPayloadContexts.createEntity(row, withReferences) /* ClipboardPayloadContext? */
    )

    /**
    * Assign all the columns from the entity of type ClipboardPayload to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ClipboardPayload()
    * database.update(ClipboardPayloads, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ClipboardPayload) {
        this.apply {
            set(ClipboardPayloads.data, entity.data)
            set(ClipboardPayloads.type, entity.type)
            set(ClipboardPayloads.context, entity.context)
        }
    }

}


object ClipboardPayloadStart : BaseTable<Pair<kotlin.Long, kotlin.Int>>("ClipboardPayloadStart") {
    val clipboardPayload = long("clipboardPayload")
    val start = int("start")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Int> =
        Pair(row[clipboardPayload] ?: 0, row[start] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Int>) {
        this.apply {
            set(ClipboardPayloadStart.clipboardPayload, entity.first)
            set(ClipboardPayloadStart.start, entity.second)
        }
    }

}

object ClipboardPayloadStop : BaseTable<Pair<kotlin.Long, kotlin.Int>>("ClipboardPayloadStop") {
    val clipboardPayload = long("clipboardPayload")
    val stop = int("stop")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Int> =
        Pair(row[clipboardPayload] ?: 0, row[stop] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Int>) {
        this.apply {
            set(ClipboardPayloadStop.clipboardPayload, entity.first)
            set(ClipboardPayloadStop.stop, entity.second)
        }
    }

}

