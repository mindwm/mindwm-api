/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package MindwWM.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param constraints 
 * @param properties 
 */
object Neo4jCaptureDataChangeSchemas : BaseTable<Neo4jCaptureDataChangeSchema>("Neo4jCaptureDataChange_schema") {
    val constraints = blob("constraints") /* null */
    val properties = blob("properties") /* null */

    /**
     * Create an entity of type Neo4jCaptureDataChangeSchema from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = Neo4jCaptureDataChangeSchema(
        constraints = row[constraints]  /* kotlin.collections.Map<kotlin.String, kotlin.Any>? */,
        properties = row[properties]  /* kotlin.collections.Map<kotlin.String, kotlin.Any>? */
    )

    /**
    * Assign all the columns from the entity of type Neo4jCaptureDataChangeSchema to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = Neo4jCaptureDataChangeSchema()
    * database.update(Neo4jCaptureDataChangeSchemas, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: Neo4jCaptureDataChangeSchema) {
        this.apply {
            set(Neo4jCaptureDataChangeSchemas.constraints, entity.constraints)
            set(Neo4jCaptureDataChangeSchemas.properties, entity.properties)
        }
    }

}


