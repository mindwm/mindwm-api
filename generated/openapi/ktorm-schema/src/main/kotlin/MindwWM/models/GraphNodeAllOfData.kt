/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package MindwWM.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param headers 
 * @param messageKey 
 * @param meta 
 * @param offset 
 * @param partition 
 * @param sourceType 
 * @param timestamp 
 * @param topic 
 * @param schema 
 * @param payload 
 */
object GraphNodeAllOfDatas : BaseTable<GraphNodeAllOfData>("GraphNode_allOf_data") {
    val headers = blob("headers")
    val messageKey = text("message_key")
    val meta = long("meta")
    val offset = int("offset")
    val partition = int("partition")
    val sourceType = text("source_type")
    val timestamp = datetime("timestamp")
    val topic = text("topic")
    val schema = long("schema")
    val payload = long("payload")

    /**
     * Create an entity of type GraphNodeAllOfData from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GraphNodeAllOfData(
        headers = row[headers] /* kotlin.Any */,
        messageKey = row[messageKey] ?: "" /* kotlin.String */,
        meta = Neo4jCaptureDataChangeMetas.createEntity(row, withReferences) /* Neo4jCaptureDataChangeMeta */,
        offset = row[offset] ?: 0 /* kotlin.Int */,
        partition = row[partition] ?: 0 /* kotlin.Int */,
        sourceType = row[sourceType] ?: "" /* kotlin.String */,
        timestamp = row[timestamp] /* java.time.LocalDateTime */,
        topic = row[topic] ?: "" /* kotlin.String */,
        schema = Neo4jCaptureDataChangeSchemas.createEntity(row, withReferences) /* Neo4jCaptureDataChangeSchema */,
        payload = Neo4jCaptureDataChangeNodePayloads.createEntity(row, withReferences) /* Neo4jCaptureDataChangeNodePayload */
    )

    /**
    * Assign all the columns from the entity of type GraphNodeAllOfData to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GraphNodeAllOfData()
    * database.update(GraphNodeAllOfDatas, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GraphNodeAllOfData) {
        this.apply {
            set(GraphNodeAllOfDatas.headers, entity.headers)
            set(GraphNodeAllOfDatas.messageKey, entity.messageKey)
            set(GraphNodeAllOfDatas.meta, entity.meta)
            set(GraphNodeAllOfDatas.offset, entity.offset)
            set(GraphNodeAllOfDatas.partition, entity.partition)
            set(GraphNodeAllOfDatas.sourceType, entity.sourceType)
            set(GraphNodeAllOfDatas.timestamp, entity.timestamp)
            set(GraphNodeAllOfDatas.topic, entity.topic)
            set(GraphNodeAllOfDatas.schema, entity.schema)
            set(GraphNodeAllOfDatas.payload, entity.payload)
        }
    }

}


