/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package MindWM.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param operation 
 * @param source 
 * @param timestamp 
 * @param txEventId 
 * @param txEventsCount 
 * @param txId 
 * @param username 
 */
object Neo4jCaptureDataChangeMetas : BaseTable<Neo4jCaptureDataChangeMeta>("Neo4jCaptureDataChange_meta") {
    val operation = text("operation")
    val source = long("source")
    val timestamp = int("timestamp")
    val txEventId = int("txEventId")
    val txEventsCount = int("txEventsCount")
    val txId = int("txId")
    val username = text("username")

    /**
     * Create an entity of type Neo4jCaptureDataChangeMeta from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = Neo4jCaptureDataChangeMeta(
        operation = row[operation] ?: "" /* kotlin.String */,
        source = Neo4jCaptureDataChangeMetaSources.createEntity(row, withReferences) /* Neo4jCaptureDataChangeMetaSource */,
        timestamp = row[timestamp] ?: 0 /* kotlin.Int */,
        txEventId = row[txEventId] ?: 0 /* kotlin.Int */,
        txEventsCount = row[txEventsCount] ?: 0 /* kotlin.Int */,
        txId = row[txId] ?: 0 /* kotlin.Int */,
        username = row[username] ?: "" /* kotlin.String */
    )

    /**
    * Assign all the columns from the entity of type Neo4jCaptureDataChangeMeta to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = Neo4jCaptureDataChangeMeta()
    * database.update(Neo4jCaptureDataChangeMetas, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: Neo4jCaptureDataChangeMeta) {
        this.apply {
            set(Neo4jCaptureDataChangeMetas.operation, entity.operation)
            set(Neo4jCaptureDataChangeMetas.source, entity.source)
            set(Neo4jCaptureDataChangeMetas.timestamp, entity.timestamp)
            set(Neo4jCaptureDataChangeMetas.txEventId, entity.txEventId)
            set(Neo4jCaptureDataChangeMetas.txEventsCount, entity.txEventsCount)
            set(Neo4jCaptureDataChangeMetas.txId, entity.txId)
            set(Neo4jCaptureDataChangeMetas.username, entity.username)
        }
    }

}


