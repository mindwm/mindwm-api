//
// ClipboardEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ClipboardEvent: Codable {
    /// Identifies the event.
    public var id: String
    public var source: String
    /// The version of the CloudEvents specification which the event uses.
    public var specversion: String
    public var type: String = "Clipboard"
    /// Content type of the data value. Must adhere to RFC 2046 format.
    public var datacontenttype: String?
    /// Identifies the schema that data adheres to.
    public var dataschema: String?
    public var subject: String? = "Clipboard"
    /// Timestamp of when the occurrence happened. Must adhere to RFC 3339.
    public var time: Date?
    /// The event payload.
    public var data: [String: Any]?
    /// Base64 encoded event payload. Must adhere to RFC4648.
    public var dataBase64: String?

    public init(id: String, source: String, specversion: String, type: String = "Clipboard", datacontenttype: String? = nil, dataschema: String? = nil, subject: String? = "Clipboard", time: Date? = nil, data: [String: Any]? = nil, dataBase64: String? = nil) {
        self.id = id
        self.source = source
        self.specversion = specversion
        self.type = type
        self.datacontenttype = datacontenttype
        self.dataschema = dataschema
        self.subject = subject
        self.time = time
        self.data = data
        self.dataBase64 = dataBase64
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case source
        case specversion
        case type
        case datacontenttype
        case dataschema
        case subject
        case time
        case data
        case dataBase64 = "data_base64"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decode(String.self, forKey: .id)
        source = try container.decode(String.self, forKey: .source)
        specversion = try container.decode(String.self, forKey: .specversion)
        type = try container.decode(String.self, forKey: .type)
        datacontenttype = try container.decodeIfPresent(String.self, forKey: .datacontenttype)
        dataschema = try container.decodeIfPresent(String.self, forKey: .dataschema)
        subject = try container.decodeIfPresent(String.self, forKey: .subject)
        time = try container.decodeIfPresent(Date.self, forKey: .time)
        data = try container.decodeIfPresent([String: Any].self, forKey: .data)
        dataBase64 = try container.decodeIfPresent(String.self, forKey: .dataBase64)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(source, forKey: .source)
        try container.encode(specversion, forKey: .specversion)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(datacontenttype, forKey: .datacontenttype)
        try container.encodeIfPresent(dataschema, forKey: .dataschema)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(time, forKey: .time)
        if let data = data {
            try container.encodeIfPresent(try JSONSerialization.data(withJSONObject: data), forKey: .data)
        }
        try container.encodeIfPresent(dataBase64, forKey: .dataBase64)
    }
}
