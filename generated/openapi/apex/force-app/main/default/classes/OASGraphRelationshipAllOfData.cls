/*
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASGraphRelationshipAllOfData
 */
public class OASGraphRelationshipAllOfData implements OASNeo4jCaptureDataChange, OAS.MappedProperties {
    /**
     * Get headers
     * @return headers
     */
    public Object headers { get; set; }

    /**
     * Get messageKey
     * @return messageKey
     */
    public String messageKey { get; set; }

    /**
     * Get meta
     * @return meta
     */
    public OASNeo4jCaptureDataChangeMeta meta { get; set; }

    /**
     * Get offset
     * @return offset
     */
    public Integer offset { get; set; }

    /**
     * Get partition
     * @return partition
     */
    public Integer partition { get; set; }

    /**
     * Get sourceType
     * @return sourceType
     */
    public String sourceType { get; set; }

    /**
     * Get timestamp
     * @return timestamp
     */
    public Datetime timestamp { get; set; }

    /**
     * Get topic
     * @return topic
     */
    public String topic { get; set; }

    /**
     * Get schema
     * @return schema
     */
    public OASNeo4jCaptureDataChangeSchema schema { get; set; }

    /**
     * Get payload
     * @return payload
     */
    public OASNeo4jCaptureDataChangeRelationshi payload { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'message_key' => 'messageKey',
        'source_type' => 'sourceType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'message_key' => 'messageKey',
        'source_type' => 'sourceType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASGraphRelationshipAllOfData getExample() {
        OASGraphRelationshipAllOfData graphRelationshipAllOfData = new OASGraphRelationshipAllOfData();
          graphRelationshipAllOfData.headers = null;
          graphRelationshipAllOfData.messageKey = '';
          graphRelationshipAllOfData.meta = OASNeo4jCaptureDataChangeMeta.getExample();
          graphRelationshipAllOfData.offset = 0;
          graphRelationshipAllOfData.partition = 0;
          graphRelationshipAllOfData.sourceType = '';
          graphRelationshipAllOfData.timestamp = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          graphRelationshipAllOfData.topic = '';
          graphRelationshipAllOfData.schema = OASNeo4jCaptureDataChangeSchema.getExample();
          graphRelationshipAllOfData.payload = OASNeo4jCaptureDataChangeRelationshi.getExample();
        return graphRelationshipAllOfData;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASGraphRelationshipAllOfData) {           
            OASGraphRelationshipAllOfData graphRelationshipAllOfData = (OASGraphRelationshipAllOfData) obj;
            return this.headers == graphRelationshipAllOfData.headers
                && this.messageKey == graphRelationshipAllOfData.messageKey
                && this.meta == graphRelationshipAllOfData.meta
                && this.offset == graphRelationshipAllOfData.offset
                && this.partition == graphRelationshipAllOfData.partition
                && this.sourceType == graphRelationshipAllOfData.sourceType
                && this.timestamp == graphRelationshipAllOfData.timestamp
                && this.topic == graphRelationshipAllOfData.topic
                && this.schema == graphRelationshipAllOfData.schema
                && this.payload == graphRelationshipAllOfData.payload;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (headers == null ? 0 : System.hashCode(headers));
        hashCode = (17 * hashCode) + (messageKey == null ? 0 : System.hashCode(messageKey));
        hashCode = (17 * hashCode) + (meta == null ? 0 : System.hashCode(meta));
        hashCode = (17 * hashCode) + (offset == null ? 0 : System.hashCode(offset));
        hashCode = (17 * hashCode) + (partition == null ? 0 : System.hashCode(partition));
        hashCode = (17 * hashCode) + (sourceType == null ? 0 : System.hashCode(sourceType));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (topic == null ? 0 : System.hashCode(topic));
        hashCode = (17 * hashCode) + (schema == null ? 0 : System.hashCode(schema));
        hashCode = (17 * hashCode) + (payload == null ? 0 : System.hashCode(payload));
        return hashCode;
    }
}

