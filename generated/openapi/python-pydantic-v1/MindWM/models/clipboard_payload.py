# coding: utf-8

"""
    Mindwm API

    This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, constr, validator
from MindWM.models.clipboard_payload_context import ClipboardPayloadContext

class ClipboardPayload(BaseModel):
    """
    ClipboardPayload
    """
    start: Optional[conlist(StrictInt, max_items=2, min_items=2)] = Field(default=None, description="Starting position of clipboard selection [x,y]")
    stop: Optional[conlist(StrictInt, max_items=2, min_items=2)] = Field(default=None, description="Ending position of clipboard selection [x,y]")
    data: Optional[constr(strict=True, min_length=1)] = Field(default=None, description="Clipboard data")
    type: Optional[StrictStr] = Field(default=None, description="Clipboard type")
    context: Optional[ClipboardPayloadContext] = None
    __properties = ["start", "stop", "data", "type", "context"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('primary', 'secondary', 'clipboard'):
            raise ValueError("must be one of enum values ('primary', 'secondary', 'clipboard')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClipboardPayload:
        """Create an instance of ClipboardPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClipboardPayload:
        """Create an instance of ClipboardPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClipboardPayload.parse_obj(obj)

        _obj = ClipboardPayload.parse_obj({
            "start": obj.get("start"),
            "stop": obj.get("stop"),
            "data": obj.get("data"),
            "type": obj.get("type"),
            "context": ClipboardPayloadContext.from_dict(obj.get("context")) if obj.get("context") is not None else None
        })
        return _obj


