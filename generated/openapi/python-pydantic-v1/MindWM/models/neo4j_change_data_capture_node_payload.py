# coding: utf-8

"""
    Mindwm API

    This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from MindWM.models.neo4j_change_data_capture_node_payload_after import Neo4jChangeDataCaptureNodePayloadAfter

class Neo4jChangeDataCaptureNodePayload(BaseModel):
    """
    Neo4jChangeDataCaptureNodePayload
    """
    after: Neo4jChangeDataCaptureNodePayloadAfter = Field(...)
    before: StrictStr = Field(...)
    id: StrictStr = Field(...)
    type: StrictStr = Field(...)
    __properties = ["after", "before", "id", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Neo4jChangeDataCaptureNodePayload:
        """Create an instance of Neo4jChangeDataCaptureNodePayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of after
        if self.after:
            _dict['after'] = self.after.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Neo4jChangeDataCaptureNodePayload:
        """Create an instance of Neo4jChangeDataCaptureNodePayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Neo4jChangeDataCaptureNodePayload.parse_obj(obj)

        _obj = Neo4jChangeDataCaptureNodePayload.parse_obj({
            "after": Neo4jChangeDataCaptureNodePayloadAfter.from_dict(obj.get("after")) if obj.get("after") is not None else None,
            "before": obj.get("before"),
            "id": obj.get("id"),
            "type": obj.get("type")
        })
        return _obj


