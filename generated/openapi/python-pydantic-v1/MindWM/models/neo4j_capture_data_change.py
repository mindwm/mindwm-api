# coding: utf-8

"""
    Mindwm API

    This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict
from pydantic import BaseModel, Field, StrictInt, StrictStr
from MindWM.models.neo4j_capture_data_change_meta import Neo4jCaptureDataChangeMeta
from MindWM.models.neo4j_capture_data_change_payload import Neo4jCaptureDataChangePayload
from MindWM.models.neo4j_capture_data_change_schema import Neo4jCaptureDataChangeSchema

class Neo4jCaptureDataChange(BaseModel):
    """
    Neo4jCaptureDataChange
    """
    headers: Dict[str, Any] = Field(...)
    message_key: StrictStr = Field(...)
    meta: Neo4jCaptureDataChangeMeta = Field(...)
    offset: StrictInt = Field(...)
    partition: StrictInt = Field(...)
    source_type: StrictStr = Field(...)
    timestamp: datetime = Field(...)
    topic: StrictStr = Field(...)
    var_schema: Neo4jCaptureDataChangeSchema = Field(default=..., alias="schema")
    payload: Neo4jCaptureDataChangePayload = Field(...)
    __properties = ["headers", "message_key", "meta", "offset", "partition", "source_type", "timestamp", "topic", "schema", "payload"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Neo4jCaptureDataChange:
        """Create an instance of Neo4jCaptureDataChange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict['meta'] = self.meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict['payload'] = self.payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Neo4jCaptureDataChange:
        """Create an instance of Neo4jCaptureDataChange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Neo4jCaptureDataChange.parse_obj(obj)

        _obj = Neo4jCaptureDataChange.parse_obj({
            "headers": obj.get("headers"),
            "message_key": obj.get("message_key"),
            "meta": Neo4jCaptureDataChangeMeta.from_dict(obj.get("meta")) if obj.get("meta") is not None else None,
            "offset": obj.get("offset"),
            "partition": obj.get("partition"),
            "source_type": obj.get("source_type"),
            "timestamp": obj.get("timestamp"),
            "topic": obj.get("topic"),
            "var_schema": Neo4jCaptureDataChangeSchema.from_dict(obj.get("schema")) if obj.get("schema") is not None else None,
            "payload": Neo4jCaptureDataChangePayload.from_dict(obj.get("payload")) if obj.get("payload") is not None else None
        })
        return _obj


