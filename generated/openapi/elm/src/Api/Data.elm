{-
   Mindwm API
   This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

   The version of the OpenAPI document: 0.1.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( Clipboard
    , ClipboardPayload, ClipboardPayloadType(..), clipboardPayloadTypeVariants
    , ClipboardPayloadContext
    , CloudEvent
    , CloudEventData
    , IoDocument
    , TmuxPaneIoDocument
    , encodeClipboard
    , encodeClipboardPayload
    , encodeClipboardPayloadContext
    , encodeCloudEvent
    , encodeCloudEventData
    , encodeIoDocument
    , encodeTmuxPaneIoDocument
    , clipboardDecoder
    , clipboardPayloadDecoder
    , clipboardPayloadContextDecoder
    , cloudEventDecoder
    , cloudEventDataDecoder
    , ioDocumentDecoder
    , tmuxPaneIoDocumentDecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias Clipboard =
    { type_ : Maybe String
    , source : Maybe String
    , data : Maybe ClipboardPayload
    , id : String
    , specversion : String
    , datacontenttype : Maybe String
    , dataschema : Maybe String
    , subject : Maybe String
    , time : Maybe Posix
    , dataBase64 : Maybe String
    }


type alias ClipboardPayload =
    { start : Maybe ( List Int )
    , stop : Maybe ( List Int )
    , data : Maybe String
    , type_ : Maybe ClipboardPayloadType
    , context : Maybe ClipboardPayloadContext
    }


type ClipboardPayloadType
    = ClipboardPayloadTypePrimary
    | ClipboardPayloadTypeSecondary
    | ClipboardPayloadTypeClipboard


clipboardPayloadTypeVariants : List ClipboardPayloadType
clipboardPayloadTypeVariants =
    [ ClipboardPayloadTypePrimary
    , ClipboardPayloadTypeSecondary
    , ClipboardPayloadTypeClipboard
    ]


{-| Selection context
-}
type alias ClipboardPayloadContext =
    { window : Maybe String
    }


{-| CloudEvents Specification JSON Schema
-}
type alias CloudEvent =
    { id : String
    , source : String
    , specversion : String
    , type_ : String
    , datacontenttype : Maybe String
    , dataschema : Maybe String
    , subject : Maybe String
    , time : Maybe Posix
    , data : Maybe CloudEventData
    , dataBase64 : Maybe String
    }


{-| The event payload.
-}
type alias CloudEventData =
    { }


type alias IoDocument =
    { type_ : Maybe String
    , source : Maybe String
    , data : Maybe TmuxPaneIoDocument
    , id : String
    , specversion : String
    , datacontenttype : Maybe String
    , dataschema : Maybe String
    , subject : Maybe String
    , time : Maybe Posix
    , dataBase64 : Maybe String
    }


type alias TmuxPaneIoDocument =
    { input : String
    , output : String
    , ps1 : String
    }


-- ENCODER


encodeClipboard : Clipboard -> Json.Encode.Value
encodeClipboard =
    encodeObject << encodeClipboardPairs


encodeClipboardWithTag : ( String, String ) -> Clipboard -> Json.Encode.Value
encodeClipboardWithTag (tagField, tag) model =
    encodeObject (encodeClipboardPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeClipboardPairs : Clipboard -> List EncodedField
encodeClipboardPairs model =
    let
        pairs =
            [ maybeEncode "type" Json.Encode.string model.type_
            , maybeEncode "source" Json.Encode.string model.source
            , maybeEncode "data" encodeClipboardPayload model.data
            , encode "id" Json.Encode.string model.id
            , encode "specversion" Json.Encode.string model.specversion
            , maybeEncode "datacontenttype" Json.Encode.string model.datacontenttype
            , maybeEncode "dataschema" Json.Encode.string model.dataschema
            , maybeEncode "subject" Json.Encode.string model.subject
            , maybeEncode "time" Api.Time.encodeDateTime model.time
            , maybeEncode "data_base64" Json.Encode.string model.dataBase64
            ]
    in
    pairs


encodeClipboardPayload : ClipboardPayload -> Json.Encode.Value
encodeClipboardPayload =
    encodeObject << encodeClipboardPayloadPairs


encodeClipboardPayloadWithTag : ( String, String ) -> ClipboardPayload -> Json.Encode.Value
encodeClipboardPayloadWithTag (tagField, tag) model =
    encodeObject (encodeClipboardPayloadPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeClipboardPayloadPairs : ClipboardPayload -> List EncodedField
encodeClipboardPayloadPairs model =
    let
        pairs =
            [ maybeEncode "start" (Json.Encode.list Json.Encode.int) model.start
            , maybeEncode "stop" (Json.Encode.list Json.Encode.int) model.stop
            , maybeEncode "data" Json.Encode.string model.data
            , maybeEncode "type" encodeClipboardPayloadType model.type_
            , maybeEncode "context" encodeClipboardPayloadContext model.context
            ]
    in
    pairs

stringFromClipboardPayloadType : ClipboardPayloadType -> String
stringFromClipboardPayloadType model =
    case model of
        ClipboardPayloadTypePrimary ->
            "primary"

        ClipboardPayloadTypeSecondary ->
            "secondary"

        ClipboardPayloadTypeClipboard ->
            "clipboard"


encodeClipboardPayloadType : ClipboardPayloadType -> Json.Encode.Value
encodeClipboardPayloadType =
    Json.Encode.string << stringFromClipboardPayloadType



encodeClipboardPayloadContext : ClipboardPayloadContext -> Json.Encode.Value
encodeClipboardPayloadContext =
    encodeObject << encodeClipboardPayloadContextPairs


encodeClipboardPayloadContextWithTag : ( String, String ) -> ClipboardPayloadContext -> Json.Encode.Value
encodeClipboardPayloadContextWithTag (tagField, tag) model =
    encodeObject (encodeClipboardPayloadContextPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeClipboardPayloadContextPairs : ClipboardPayloadContext -> List EncodedField
encodeClipboardPayloadContextPairs model =
    let
        pairs =
            [ maybeEncode "window" Json.Encode.string model.window
            ]
    in
    pairs


encodeCloudEvent : CloudEvent -> Json.Encode.Value
encodeCloudEvent =
    encodeObject << encodeCloudEventPairs


encodeCloudEventWithTag : ( String, String ) -> CloudEvent -> Json.Encode.Value
encodeCloudEventWithTag (tagField, tag) model =
    encodeObject (encodeCloudEventPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCloudEventPairs : CloudEvent -> List EncodedField
encodeCloudEventPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "source" Json.Encode.string model.source
            , encode "specversion" Json.Encode.string model.specversion
            , encode "type" Json.Encode.string model.type_
            , maybeEncodeNullable "datacontenttype" Json.Encode.string model.datacontenttype
            , maybeEncodeNullable "dataschema" Json.Encode.string model.dataschema
            , maybeEncodeNullable "subject" Json.Encode.string model.subject
            , maybeEncodeNullable "time" Api.Time.encodeDateTime model.time
            , maybeEncodeNullable "data" encodeCloudEventData model.data
            , maybeEncodeNullable "data_base64" Json.Encode.string model.dataBase64
            ]
    in
    pairs


encodeCloudEventData : CloudEventData -> Json.Encode.Value
encodeCloudEventData =
    encodeObject << encodeCloudEventDataPairs


encodeCloudEventDataWithTag : ( String, String ) -> CloudEventData -> Json.Encode.Value
encodeCloudEventDataWithTag (tagField, tag) model =
    encodeObject (encodeCloudEventDataPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCloudEventDataPairs : CloudEventData -> List EncodedField
encodeCloudEventDataPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeIoDocument : IoDocument -> Json.Encode.Value
encodeIoDocument =
    encodeObject << encodeIoDocumentPairs


encodeIoDocumentWithTag : ( String, String ) -> IoDocument -> Json.Encode.Value
encodeIoDocumentWithTag (tagField, tag) model =
    encodeObject (encodeIoDocumentPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeIoDocumentPairs : IoDocument -> List EncodedField
encodeIoDocumentPairs model =
    let
        pairs =
            [ maybeEncode "type" Json.Encode.string model.type_
            , maybeEncode "source" Json.Encode.string model.source
            , maybeEncode "data" encodeTmuxPaneIoDocument model.data
            , encode "id" Json.Encode.string model.id
            , encode "specversion" Json.Encode.string model.specversion
            , maybeEncode "datacontenttype" Json.Encode.string model.datacontenttype
            , maybeEncode "dataschema" Json.Encode.string model.dataschema
            , maybeEncode "subject" Json.Encode.string model.subject
            , maybeEncode "time" Api.Time.encodeDateTime model.time
            , maybeEncode "data_base64" Json.Encode.string model.dataBase64
            ]
    in
    pairs


encodeTmuxPaneIoDocument : TmuxPaneIoDocument -> Json.Encode.Value
encodeTmuxPaneIoDocument =
    encodeObject << encodeTmuxPaneIoDocumentPairs


encodeTmuxPaneIoDocumentWithTag : ( String, String ) -> TmuxPaneIoDocument -> Json.Encode.Value
encodeTmuxPaneIoDocumentWithTag (tagField, tag) model =
    encodeObject (encodeTmuxPaneIoDocumentPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTmuxPaneIoDocumentPairs : TmuxPaneIoDocument -> List EncodedField
encodeTmuxPaneIoDocumentPairs model =
    let
        pairs =
            [ encode "input" Json.Encode.string model.input
            , encode "output" Json.Encode.string model.output
            , encode "ps1" Json.Encode.string model.ps1
            ]
    in
    pairs


-- DECODER


clipboardDecoder : Json.Decode.Decoder Clipboard
clipboardDecoder =
    Json.Decode.succeed Clipboard
        |> maybeDecode "type" Json.Decode.string Nothing
        |> maybeDecode "source" Json.Decode.string Nothing
        |> maybeDecode "data" clipboardPayloadDecoder Nothing
        |> decode "id" Json.Decode.string 
        |> decode "specversion" Json.Decode.string 
        |> maybeDecode "datacontenttype" Json.Decode.string Nothing
        |> maybeDecode "dataschema" Json.Decode.string Nothing
        |> maybeDecode "subject" Json.Decode.string Nothing
        |> maybeDecode "time" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "data_base64" Json.Decode.string Nothing


clipboardPayloadDecoder : Json.Decode.Decoder ClipboardPayload
clipboardPayloadDecoder =
    Json.Decode.succeed ClipboardPayload
        |> maybeDecode "start" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "stop" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "data" Json.Decode.string Nothing
        |> maybeDecode "type" clipboardPayloadTypeDecoder Nothing
        |> maybeDecode "context" clipboardPayloadContextDecoder Nothing


clipboardPayloadTypeDecoder : Json.Decode.Decoder ClipboardPayloadType
clipboardPayloadTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "primary" ->
                        Json.Decode.succeed ClipboardPayloadTypePrimary

                    "secondary" ->
                        Json.Decode.succeed ClipboardPayloadTypeSecondary

                    "clipboard" ->
                        Json.Decode.succeed ClipboardPayloadTypeClipboard

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



clipboardPayloadContextDecoder : Json.Decode.Decoder ClipboardPayloadContext
clipboardPayloadContextDecoder =
    Json.Decode.succeed ClipboardPayloadContext
        |> maybeDecode "window" Json.Decode.string Nothing


cloudEventDecoder : Json.Decode.Decoder CloudEvent
cloudEventDecoder =
    Json.Decode.succeed CloudEvent
        |> decode "id" Json.Decode.string 
        |> decode "source" Json.Decode.string 
        |> decode "specversion" Json.Decode.string 
        |> decode "type" Json.Decode.string 
        |> maybeDecodeNullable "datacontenttype" Json.Decode.string Nothing
        |> maybeDecodeNullable "dataschema" Json.Decode.string Nothing
        |> maybeDecodeNullable "subject" Json.Decode.string Nothing
        |> maybeDecodeNullable "time" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "data" cloudEventDataDecoder Nothing
        |> maybeDecodeNullable "data_base64" Json.Decode.string Nothing


cloudEventDataDecoder : Json.Decode.Decoder CloudEventData
cloudEventDataDecoder =
    Json.Decode.succeed CloudEventData


ioDocumentDecoder : Json.Decode.Decoder IoDocument
ioDocumentDecoder =
    Json.Decode.succeed IoDocument
        |> maybeDecode "type" Json.Decode.string Nothing
        |> maybeDecode "source" Json.Decode.string Nothing
        |> maybeDecode "data" tmuxPaneIoDocumentDecoder Nothing
        |> decode "id" Json.Decode.string 
        |> decode "specversion" Json.Decode.string 
        |> maybeDecode "datacontenttype" Json.Decode.string Nothing
        |> maybeDecode "dataschema" Json.Decode.string Nothing
        |> maybeDecode "subject" Json.Decode.string Nothing
        |> maybeDecode "time" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "data_base64" Json.Decode.string Nothing


tmuxPaneIoDocumentDecoder : Json.Decode.Decoder TmuxPaneIoDocument
tmuxPaneIoDocumentDecoder =
    Json.Decode.succeed TmuxPaneIoDocument
        |> decode "input" Json.Decode.string 
        |> decode "output" Json.Decode.string 
        |> decode "ps1" Json.Decode.string 




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f