<?php
/**
 * IoDocument
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the IoDocument model.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class IoDocument  implements \JsonSerializable
{
        /**
     * @var string|null
     * @SerializedName("type")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $type;

    /**
     * @var string|null
     * @SerializedName("source")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("//[a-zA-Z0-9_][a-zA-Z0-9_-]{0,31}\\\\.(?!-)[a-zA-Z0-9-]{1,63}(?&lt;!-)\\\\.tmux\\\\.[A-Za-z0-9+\/]*&#x3D;{0,2}\\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\\\.[0-9]+?\\\\.[0-9]+?\\\\.tiodocument$//")
     */
    public ?string $source;

    /**
     * @var TmuxPaneIoDocument|null
     * @SerializedName("data")
     * @Assert\Type("\OpenAPIServer\Model\TmuxPaneIoDocument")
     * @Type("\OpenAPIServer\Model\TmuxPaneIoDocument")
     */
    public ?TmuxPaneIoDocument $data;

    /**
     * Identifies the event.
     *
     * @var string
     * @SerializedName("id")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   min = 1
     * )
     */
    public string $id;

    /**
     * The version of the CloudEvents specification which the event uses.
     *
     * @var string
     * @SerializedName("specversion")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   min = 1
     * )
     */
    public string $specversion;

    /**
     * Content type of the data value. Must adhere to RFC 2046 format.
     *
     * @var string|null
     * @SerializedName("datacontenttype")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   min = 1
     * )
     */
    public ?string $datacontenttype;

    /**
     * Identifies the schema that data adheres to.
     *
     * @var string|null
     * @SerializedName("dataschema")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   min = 1
     * )
     */
    public ?string $dataschema;

    /**
     * @var string|null
     * @SerializedName("subject")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $subject = 'IoDocument';

    /**
     * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
     *
     * @var \DateTime|null
     * @SerializedName("time")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     * @Assert\Length(
     *   min = 1
     * )
     */
    public ?\DateTime $time;

    /**
     * Base64 encoded event payload. Must adhere to RFC4648.
     *
     * @var string|null
     * @SerializedName("data_base64")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $dataBase64;

    /**
     * Constructor
     *
     * @param string|null $type
     * @param string|null $source
     * @param TmuxPaneIoDocument|null $data
     * @param string $id
     * @param string $specversion
     * @param string|null $datacontenttype
     * @param string|null $dataschema
     * @param string|null $subject
     * @param \DateTime|null $time
     * @param string|null $dataBase64
     */
    public function __construct(?string $type, ?string $source, ?TmuxPaneIoDocument $data, string $id, string $specversion, ?string $datacontenttype, ?string $dataschema, ?string $subject, ?\DateTime $time, ?string $dataBase64)
    {
        $this->type = $type;
        $this->source = $source;
        $this->data = $data;
        $this->id = $id;
        $this->specversion = $specversion;
        $this->datacontenttype = $datacontenttype;
        $this->dataschema = $dataschema;
        $this->subject = $subject;
        $this->time = $time;
        $this->dataBase64 = $dataBase64;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['type'] ?? null, 
            $data['source'] ?? null, 
            $data['data'] ?? null, 
            $data['id'] ?? null, 
            $data['specversion'] ?? null, 
            $data['datacontenttype'] ?? null, 
            $data['dataschema'] ?? null, 
            $data['subject'] ?? null, 
            isset($data['time']) ? new \DateTime($data['time']) : null, 
            $data['data_base64'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'type' => $this->type, 
            'source' => $this->source, 
            'data' => $this->data, 
            'id' => $this->id, 
            'specversion' => $this->specversion, 
            'datacontenttype' => $this->datacontenttype, 
            'dataschema' => $this->dataschema, 
            'subject' => $this->subject, 
            'time' => $this->time?->format('c'), 
            'data_base64' => $this->dataBase64, 
        ];
    }
}


