<?php
/**
 * Neo4jCaptureDataChange
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the Neo4jCaptureDataChange model.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class Neo4jCaptureDataChange  implements \JsonSerializable
{
        /**
     * @var 
     * @SerializedName("headers")
     * @Assert\NotNull()
     * @Assert\All({
     *   @Assert\Type("mixed")
     * })
     * @Type("array<string, mixed>")
     */
    public  $headers;

    /**
     * @var string
     * @SerializedName("message_key")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $messageKey;

    /**
     * @var Neo4jCaptureDataChangeMeta
     * @SerializedName("meta")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("\OpenAPIServer\Model\Neo4jCaptureDataChangeMeta")
     * @Type("\OpenAPIServer\Model\Neo4jCaptureDataChangeMeta")
     */
    public Neo4jCaptureDataChangeMeta $meta;

    /**
     * @var int
     * @SerializedName("offset")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $offset;

    /**
     * @var int
     * @SerializedName("partition")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $partition;

    /**
     * @var string
     * @SerializedName("source_type")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $sourceType;

    /**
     * @var \DateTime
     * @SerializedName("timestamp")
     * @Assert\NotNull()
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public \DateTime $timestamp;

    /**
     * @var string
     * @SerializedName("topic")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $topic;

    /**
     * @var Neo4jCaptureDataChangeSchema
     * @SerializedName("schema")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("\OpenAPIServer\Model\Neo4jCaptureDataChangeSchema")
     * @Type("\OpenAPIServer\Model\Neo4jCaptureDataChangeSchema")
     */
    public Neo4jCaptureDataChangeSchema $schema;

    /**
     * @var Neo4jCaptureDataChangePayload
     * @SerializedName("payload")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("\OpenAPIServer\Model\Neo4jCaptureDataChangePayload")
     * @Type("\OpenAPIServer\Model\Neo4jCaptureDataChangePayload")
     */
    public Neo4jCaptureDataChangePayload $payload;

    /**
     * Constructor
     *
     * @param  $headers
     * @param string $messageKey
     * @param Neo4jCaptureDataChangeMeta $meta
     * @param int $offset
     * @param int $partition
     * @param string $sourceType
     * @param \DateTime $timestamp
     * @param string $topic
     * @param Neo4jCaptureDataChangeSchema $schema
     * @param Neo4jCaptureDataChangePayload $payload
     */
    public function __construct( $headers, string $messageKey, Neo4jCaptureDataChangeMeta $meta, int $offset, int $partition, string $sourceType, \DateTime $timestamp, string $topic, Neo4jCaptureDataChangeSchema $schema, Neo4jCaptureDataChangePayload $payload)
    {
        $this->headers = $headers;
        $this->messageKey = $messageKey;
        $this->meta = $meta;
        $this->offset = $offset;
        $this->partition = $partition;
        $this->sourceType = $sourceType;
        $this->timestamp = $timestamp;
        $this->topic = $topic;
        $this->schema = $schema;
        $this->payload = $payload;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['headers'] ?? null, 
            $data['message_key'] ?? null, 
            isset($data['meta']) ? Neo4jCaptureDataChangeMeta::fromArray($data['meta']) : null, 
            $data['offset'] ?? null, 
            $data['partition'] ?? null, 
            $data['source_type'] ?? null, 
            isset($data['timestamp']) ? new \DateTime($data['timestamp']) : null, 
            $data['topic'] ?? null, 
            isset($data['schema']) ? Neo4jCaptureDataChangeSchema::fromArray($data['schema']) : null, 
            isset($data['payload']) ? Neo4jCaptureDataChangePayload::fromArray($data['payload']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'headers' => $this->headers, 
            'message_key' => $this->messageKey, 
            'meta' => $this->meta, 
            'offset' => $this->offset, 
            'partition' => $this->partition, 
            'source_type' => $this->sourceType, 
            'timestamp' => $this->timestamp?->format('c'), 
            'topic' => $this->topic, 
            'schema' => $this->schema, 
            'payload' => $this->payload, 
        ];
    }
}


