// tslint:disable
/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CloudEventData,
    CloudEventDataFromJSON,
    CloudEventDataToJSON,
} from './';

/**
 * CloudEvents Specification JSON Schema
 * @export
 * @interface CloudEvent
 */
export interface CloudEvent  {
    /**
     * Identifies the event.
     * @type {string}
     * @memberof CloudEvent
     */
    id: string;
    /**
     * Identifies the context in which an event happened.
     * @type {string}
     * @memberof CloudEvent
     */
    source: string;
    /**
     * The version of the CloudEvents specification which the event uses.
     * @type {string}
     * @memberof CloudEvent
     */
    specversion: string;
    /**
     * Describes the type of event related to the originating occurrence.
     * @type {string}
     * @memberof CloudEvent
     */
    type: string;
    /**
     * Content type of the data value. Must adhere to RFC 2046 format.
     * @type {string}
     * @memberof CloudEvent
     */
    datacontenttype?: string;
    /**
     * Identifies the schema that data adheres to.
     * @type {string}
     * @memberof CloudEvent
     */
    dataschema?: string;
    /**
     * Describes the subject of the event in the context of the event producer (identified by source).
     * @type {string}
     * @memberof CloudEvent
     */
    subject?: string;
    /**
     * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
     * @type {Date}
     * @memberof CloudEvent
     */
    time?: Date;
    /**
     * 
     * @type {CloudEventData}
     * @memberof CloudEvent
     */
    data?: CloudEventData;
    /**
     * Base64 encoded event payload. Must adhere to RFC4648.
     * @type {string}
     * @memberof CloudEvent
     */
    dataBase64?: string;
}

export function CloudEventFromJSON(json: any): CloudEvent {
    return {
        'id': json['id'],
        'source': json['source'],
        'specversion': json['specversion'],
        'type': json['type'],
        'datacontenttype': !exists(json, 'datacontenttype') ? undefined : json['datacontenttype'],
        'dataschema': !exists(json, 'dataschema') ? undefined : json['dataschema'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'time': !exists(json, 'time') ? undefined : new Date(json['time']),
        'data': !exists(json, 'data') ? undefined : CloudEventDataFromJSON(json['data']),
        'dataBase64': !exists(json, 'data_base64') ? undefined : json['data_base64'],
    };
}

export function CloudEventToJSON(value?: CloudEvent): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'source': value.source,
        'specversion': value.specversion,
        'type': value.type,
        'datacontenttype': value.datacontenttype,
        'dataschema': value.dataschema,
        'subject': value.subject,
        'time': value.time === undefined ? undefined : value.time.toISOString(),
        'data': CloudEventDataToJSON(value.data),
        'data_base64': value.dataBase64,
    };
}


