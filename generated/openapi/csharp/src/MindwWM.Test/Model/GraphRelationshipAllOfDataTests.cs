/*
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using MindwWM.Model;
using MindwWM.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace MindwWM.Test.Model
{
    /// <summary>
    ///  Class for testing GraphRelationshipAllOfData
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class GraphRelationshipAllOfDataTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for GraphRelationshipAllOfData
        //private GraphRelationshipAllOfData instance;

        public GraphRelationshipAllOfDataTests()
        {
            // TODO uncomment below to create an instance of GraphRelationshipAllOfData
            //instance = new GraphRelationshipAllOfData();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GraphRelationshipAllOfData
        /// </summary>
        [Fact]
        public void GraphRelationshipAllOfDataInstanceTest()
        {
            // TODO uncomment below to test "IsType" GraphRelationshipAllOfData
            //Assert.IsType<GraphRelationshipAllOfData>(instance);
        }

        /// <summary>
        /// Test the property 'Headers'
        /// </summary>
        [Fact]
        public void HeadersTest()
        {
            // TODO unit test for the property 'Headers'
        }

        /// <summary>
        /// Test the property 'MessageKey'
        /// </summary>
        [Fact]
        public void MessageKeyTest()
        {
            // TODO unit test for the property 'MessageKey'
        }

        /// <summary>
        /// Test the property 'Meta'
        /// </summary>
        [Fact]
        public void MetaTest()
        {
            // TODO unit test for the property 'Meta'
        }

        /// <summary>
        /// Test the property 'Offset'
        /// </summary>
        [Fact]
        public void OffsetTest()
        {
            // TODO unit test for the property 'Offset'
        }

        /// <summary>
        /// Test the property 'Partition'
        /// </summary>
        [Fact]
        public void PartitionTest()
        {
            // TODO unit test for the property 'Partition'
        }

        /// <summary>
        /// Test the property 'SourceType'
        /// </summary>
        [Fact]
        public void SourceTypeTest()
        {
            // TODO unit test for the property 'SourceType'
        }

        /// <summary>
        /// Test the property 'Timestamp'
        /// </summary>
        [Fact]
        public void TimestampTest()
        {
            // TODO unit test for the property 'Timestamp'
        }

        /// <summary>
        /// Test the property 'Topic'
        /// </summary>
        [Fact]
        public void TopicTest()
        {
            // TODO unit test for the property 'Topic'
        }

        /// <summary>
        /// Test the property 'Schema'
        /// </summary>
        [Fact]
        public void SchemaTest()
        {
            // TODO unit test for the property 'Schema'
        }

        /// <summary>
        /// Test the property 'Payload'
        /// </summary>
        [Fact]
        public void PayloadTest()
        {
            // TODO unit test for the property 'Payload'
        }
    }
}
