/*
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MindWM.Client.OpenAPIDateConverter;

namespace MindWM.Model
{
    /// <summary>
    /// GraphNodeAllOfData
    /// </summary>
    [DataContract(Name = "GraphNode_allOf_data")]
    public partial class GraphNodeAllOfData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphNodeAllOfData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GraphNodeAllOfData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphNodeAllOfData" /> class.
        /// </summary>
        /// <param name="headers">headers (required).</param>
        /// <param name="messageKey">messageKey (required).</param>
        /// <param name="meta">meta (required).</param>
        /// <param name="offset">offset (required).</param>
        /// <param name="partition">partition (required).</param>
        /// <param name="sourceType">sourceType (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="topic">topic (required).</param>
        /// <param name="schema">schema (required).</param>
        /// <param name="payload">payload (required).</param>
        public GraphNodeAllOfData(Object headers = default(Object), string messageKey = default(string), Neo4jCaptureDataChangeMeta meta = default(Neo4jCaptureDataChangeMeta), int offset = default(int), int partition = default(int), string sourceType = default(string), DateTime timestamp = default(DateTime), string topic = default(string), Neo4jCaptureDataChangeSchema schema = default(Neo4jCaptureDataChangeSchema), Neo4jCaptureDataChangeNodePayload payload = default(Neo4jCaptureDataChangeNodePayload))
        {
            // to ensure "headers" is required (not null)
            if (headers == null)
            {
                throw new ArgumentNullException("headers is a required property for GraphNodeAllOfData and cannot be null");
            }
            this.Headers = headers;
            // to ensure "messageKey" is required (not null)
            if (messageKey == null)
            {
                throw new ArgumentNullException("messageKey is a required property for GraphNodeAllOfData and cannot be null");
            }
            this.MessageKey = messageKey;
            // to ensure "meta" is required (not null)
            if (meta == null)
            {
                throw new ArgumentNullException("meta is a required property for GraphNodeAllOfData and cannot be null");
            }
            this.Meta = meta;
            this.Offset = offset;
            this.Partition = partition;
            // to ensure "sourceType" is required (not null)
            if (sourceType == null)
            {
                throw new ArgumentNullException("sourceType is a required property for GraphNodeAllOfData and cannot be null");
            }
            this.SourceType = sourceType;
            this.Timestamp = timestamp;
            // to ensure "topic" is required (not null)
            if (topic == null)
            {
                throw new ArgumentNullException("topic is a required property for GraphNodeAllOfData and cannot be null");
            }
            this.Topic = topic;
            // to ensure "schema" is required (not null)
            if (schema == null)
            {
                throw new ArgumentNullException("schema is a required property for GraphNodeAllOfData and cannot be null");
            }
            this.Schema = schema;
            // to ensure "payload" is required (not null)
            if (payload == null)
            {
                throw new ArgumentNullException("payload is a required property for GraphNodeAllOfData and cannot be null");
            }
            this.Payload = payload;
        }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name = "headers", IsRequired = true, EmitDefaultValue = true)]
        public Object Headers { get; set; }

        /// <summary>
        /// Gets or Sets MessageKey
        /// </summary>
        [DataMember(Name = "message_key", IsRequired = true, EmitDefaultValue = true)]
        public string MessageKey { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", IsRequired = true, EmitDefaultValue = true)]
        public Neo4jCaptureDataChangeMeta Meta { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "offset", IsRequired = true, EmitDefaultValue = true)]
        public int Offset { get; set; }

        /// <summary>
        /// Gets or Sets Partition
        /// </summary>
        [DataMember(Name = "partition", IsRequired = true, EmitDefaultValue = true)]
        public int Partition { get; set; }

        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [DataMember(Name = "source_type", IsRequired = true, EmitDefaultValue = true)]
        public string SourceType { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Topic
        /// </summary>
        [DataMember(Name = "topic", IsRequired = true, EmitDefaultValue = true)]
        public string Topic { get; set; }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", IsRequired = true, EmitDefaultValue = true)]
        public Neo4jCaptureDataChangeSchema Schema { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name = "payload", IsRequired = true, EmitDefaultValue = true)]
        public Neo4jCaptureDataChangeNodePayload Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GraphNodeAllOfData {\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  MessageKey: ").Append(MessageKey).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Partition: ").Append(Partition).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
