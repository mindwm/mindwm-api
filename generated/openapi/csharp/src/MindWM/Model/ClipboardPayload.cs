/*
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MindWM.Client.OpenAPIDateConverter;

namespace MindWM.Model
{
    /// <summary>
    /// ClipboardPayload
    /// </summary>
    [DataContract(Name = "ClipboardPayload")]
    public partial class ClipboardPayload : IValidatableObject
    {
        /// <summary>
        /// Clipboard type
        /// </summary>
        /// <value>Clipboard type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Primary for value: primary
            /// </summary>
            [EnumMember(Value = "primary")]
            Primary = 1,

            /// <summary>
            /// Enum Secondary for value: secondary
            /// </summary>
            [EnumMember(Value = "secondary")]
            Secondary = 2,

            /// <summary>
            /// Enum Clipboard for value: clipboard
            /// </summary>
            [EnumMember(Value = "clipboard")]
            Clipboard = 3
        }


        /// <summary>
        /// Clipboard type
        /// </summary>
        /// <value>Clipboard type</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClipboardPayload" /> class.
        /// </summary>
        /// <param name="start">Starting position of clipboard selection [x,y].</param>
        /// <param name="stop">Ending position of clipboard selection [x,y].</param>
        /// <param name="data">Clipboard data.</param>
        /// <param name="type">Clipboard type.</param>
        /// <param name="context">context.</param>
        public ClipboardPayload(List<int> start = default(List<int>), List<int> stop = default(List<int>), string data = default(string), TypeEnum? type = default(TypeEnum?), ClipboardPayloadContext context = default(ClipboardPayloadContext))
        {
            this.Start = start;
            this.Stop = stop;
            this.Data = data;
            this.Type = type;
            this.Context = context;
        }

        /// <summary>
        /// Starting position of clipboard selection [x,y]
        /// </summary>
        /// <value>Starting position of clipboard selection [x,y]</value>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public List<int> Start { get; set; }

        /// <summary>
        /// Ending position of clipboard selection [x,y]
        /// </summary>
        /// <value>Ending position of clipboard selection [x,y]</value>
        [DataMember(Name = "stop", EmitDefaultValue = false)]
        public List<int> Stop { get; set; }

        /// <summary>
        /// Clipboard data
        /// </summary>
        /// <value>Clipboard data</value>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public ClipboardPayloadContext Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClipboardPayload {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Data (string) minLength
            if (this.Data != null && this.Data.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Data, length must be greater than 1.", new [] { "Data" });
            }

            yield break;
        }
    }

}
