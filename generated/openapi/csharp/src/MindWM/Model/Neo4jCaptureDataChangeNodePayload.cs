/*
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MindWM.Client.OpenAPIDateConverter;

namespace MindWM.Model
{
    /// <summary>
    /// Neo4jCaptureDataChangeNodePayload
    /// </summary>
    [DataContract(Name = "Neo4jCaptureDataChangeNodePayload")]
    public partial class Neo4jCaptureDataChangeNodePayload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Neo4jCaptureDataChangeNodePayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Neo4jCaptureDataChangeNodePayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Neo4jCaptureDataChangeNodePayload" /> class.
        /// </summary>
        /// <param name="after">after (required).</param>
        /// <param name="before">before (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="type">type (required).</param>
        public Neo4jCaptureDataChangeNodePayload(Neo4jCaptureDataChangeNodePayloadAfter after = default(Neo4jCaptureDataChangeNodePayloadAfter), string before = default(string), string id = default(string), string type = default(string))
        {
            // to ensure "after" is required (not null)
            if (after == null)
            {
                throw new ArgumentNullException("after is a required property for Neo4jCaptureDataChangeNodePayload and cannot be null");
            }
            this.After = after;
            // to ensure "before" is required (not null)
            if (before == null)
            {
                throw new ArgumentNullException("before is a required property for Neo4jCaptureDataChangeNodePayload and cannot be null");
            }
            this.Before = before;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Neo4jCaptureDataChangeNodePayload and cannot be null");
            }
            this.Id = id;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Neo4jCaptureDataChangeNodePayload and cannot be null");
            }
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets After
        /// </summary>
        [DataMember(Name = "after", IsRequired = true, EmitDefaultValue = true)]
        public Neo4jCaptureDataChangeNodePayloadAfter After { get; set; }

        /// <summary>
        /// Gets or Sets Before
        /// </summary>
        [DataMember(Name = "before", IsRequired = true, EmitDefaultValue = true)]
        public string Before { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Neo4jCaptureDataChangeNodePayload {\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
