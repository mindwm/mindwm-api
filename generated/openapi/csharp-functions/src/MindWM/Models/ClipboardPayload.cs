/*
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using MindWM.Converters;

namespace MindWM.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ClipboardPayload : IEquatable<ClipboardPayload>
    {
        /// <summary>
        /// Starting position of clipboard selection [x,y]
        /// </summary>
        /// <value>Starting position of clipboard selection [x,y]</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public List<int> Start { get; set; }

        /// <summary>
        /// Ending position of clipboard selection [x,y]
        /// </summary>
        /// <value>Ending position of clipboard selection [x,y]</value>
        [DataMember(Name="stop", EmitDefaultValue=false)]
        public List<int> Stop { get; set; }

        /// <summary>
        /// Clipboard data
        /// </summary>
        /// <value>Clipboard data</value>
        [MinLength(1)]
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }


        /// <summary>
        /// Clipboard type
        /// </summary>
        /// <value>Clipboard type</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum PrimaryEnum for primary
            /// </summary>
            [EnumMember(Value = "primary")]
            PrimaryEnum = 1,
            
            /// <summary>
            /// Enum SecondaryEnum for secondary
            /// </summary>
            [EnumMember(Value = "secondary")]
            SecondaryEnum = 2,
            
            /// <summary>
            /// Enum ClipboardEnum for clipboard
            /// </summary>
            [EnumMember(Value = "clipboard")]
            ClipboardEnum = 3
        }

        /// <summary>
        /// Clipboard type
        /// </summary>
        /// <value>Clipboard type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public ClipboardPayloadContext Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClipboardPayload {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ClipboardPayload)obj);
        }

        /// <summary>
        /// Returns true if ClipboardPayload instances are equal
        /// </summary>
        /// <param name="other">Instance of ClipboardPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClipboardPayload other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Start == other.Start ||
                    Start != null &&
                    other.Start != null &&
                    Start.SequenceEqual(other.Start)
                ) && 
                (
                    Stop == other.Stop ||
                    Stop != null &&
                    other.Stop != null &&
                    Stop.SequenceEqual(other.Stop)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.Equals(other.Data)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Start != null)
                    hashCode = hashCode * 59 + Start.GetHashCode();
                    if (Stop != null)
                    hashCode = hashCode * 59 + Stop.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ClipboardPayload left, ClipboardPayload right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ClipboardPayload left, ClipboardPayload right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
