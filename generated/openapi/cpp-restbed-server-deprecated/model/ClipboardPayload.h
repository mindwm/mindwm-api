/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ClipboardPayload.h
 *
 * 
 */

#ifndef ClipboardPayload_H_
#define ClipboardPayload_H_



#include <string>
#include "ClipboardPayload_context.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ClipboardPayload 
{
public:
    ClipboardPayload() = default;
    explicit ClipboardPayload(boost::property_tree::ptree const& pt);
    virtual ~ClipboardPayload() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// ClipboardPayload members

    /// <summary>
    /// Starting position of clipboard selection [x,y]
    /// </summary>
    std::vector<int32_t> getStart() const;
    void setStart(std::vector<int32_t> value);

    /// <summary>
    /// Ending position of clipboard selection [x,y]
    /// </summary>
    std::vector<int32_t> getStop() const;
    void setStop(std::vector<int32_t> value);

    /// <summary>
    /// Clipboard data
    /// </summary>
    std::string getData() const;
    void setData(std::string value);

    /// <summary>
    /// Clipboard type
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ClipboardPayload_context> getContext() const;
    void setContext(std::shared_ptr<ClipboardPayload_context> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::vector<int32_t> m_Start;
    std::vector<int32_t> m_Stop;
    std::string m_Data = "";
    std::string m_Type = "";
    std::shared_ptr<ClipboardPayload_context> m_Context;
    const std::array<std::string, 3> m_TypeEnum = {
          "primary","secondary","clipboard"
    };

};

std::vector<ClipboardPayload> createClipboardPayloadVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* ClipboardPayload_H_ */
