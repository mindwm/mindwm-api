/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ClipboardPayload.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ClipboardPayload::ClipboardPayload(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string ClipboardPayload::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void ClipboardPayload::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree ClipboardPayload::toPropertyTree()
{
    return toPropertyTree_internal();
}

void ClipboardPayload::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string ClipboardPayload::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void ClipboardPayload::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ClipboardPayload::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Start
	if (!m_Start.empty()) {
		for (const auto &childEntry : m_Start) {
            ptree Start_node;
            Start_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Start_node));
		}
		pt.add_child("start", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Stop
	if (!m_Stop.empty()) {
		for (const auto &childEntry : m_Stop) {
            ptree Stop_node;
            Stop_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Stop_node));
		}
		pt.add_child("stop", tmp_node);
		tmp_node.clear();
	}
	pt.put("data", m_Data);
	pt.put("type", m_Type);
	if (m_Context != nullptr) {
		pt.add_child("context", m_Context->toPropertyTree());
	}
	return pt;
}

void ClipboardPayload::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Start into member vector
	if (pt.get_child_optional("start")) {
		for (const auto &childTree : pt.get_child("start")) {
            int32_t val =
                std::stoi(childTree.second.data());
            m_Start.emplace_back(std::move(val));
		}
	}
	// push all items of Stop into member vector
	if (pt.get_child_optional("stop")) {
		for (const auto &childTree : pt.get_child("stop")) {
            int32_t val =
                std::stoi(childTree.second.data());
            m_Stop.emplace_back(std::move(val));
		}
	}
	m_Data = pt.get("data", "");
	setType(pt.get("type", ""));
	if (pt.get_child_optional("context")) {
		m_Context = std::make_shared<ClipboardPayload_context>();
		m_Context->fromPropertyTree(pt.get_child("context"));
	}
}

std::vector<int32_t> ClipboardPayload::getStart() const
{
    return m_Start;
}

void ClipboardPayload::setStart(std::vector<int32_t> value)
{
	m_Start = value;
}
std::vector<int32_t> ClipboardPayload::getStop() const
{
    return m_Stop;
}

void ClipboardPayload::setStop(std::vector<int32_t> value)
{
	m_Stop = value;
}
std::string ClipboardPayload::getData() const
{
    return m_Data;
}

void ClipboardPayload::setData(std::string value)
{
	m_Data = value;
}
std::string ClipboardPayload::getType() const
{
    return m_Type;
}

void ClipboardPayload::setType(std::string value)
{
	if (std::find(m_TypeEnum.begin(), m_TypeEnum.end(), value) != m_TypeEnum.end()) {
		m_Type = value;
	} else {
		throw std::runtime_error("Value " + value + " not allowed");
	}
}
std::shared_ptr<ClipboardPayload_context> ClipboardPayload::getContext() const
{
    return m_Context;
}

void ClipboardPayload::setContext(std::shared_ptr<ClipboardPayload_context> value)
{
	m_Context = value;
}

std::vector<ClipboardPayload> createClipboardPayloadVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ClipboardPayload>();
    for (const auto& child: pt) {
        vec.emplace_back(ClipboardPayload(child.second));
    }

    return vec;
}

}
}
}
}

