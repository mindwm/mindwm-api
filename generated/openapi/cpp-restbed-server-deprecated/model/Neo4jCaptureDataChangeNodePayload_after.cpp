/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Neo4jCaptureDataChangeNodePayload_after.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Neo4jCaptureDataChangeNodePayload_after::Neo4jCaptureDataChangeNodePayload_after(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string Neo4jCaptureDataChangeNodePayload_after::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void Neo4jCaptureDataChangeNodePayload_after::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree Neo4jCaptureDataChangeNodePayload_after::toPropertyTree()
{
    return toPropertyTree_internal();
}

void Neo4jCaptureDataChangeNodePayload_after::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string Neo4jCaptureDataChangeNodePayload_after::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void Neo4jCaptureDataChangeNodePayload_after::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Neo4jCaptureDataChangeNodePayload_after::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Labels
	if (!m_Labels.empty()) {
		for (const auto &childEntry : m_Labels) {
            ptree Labels_node;
            Labels_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Labels_node));
		}
		pt.add_child("labels", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Properties
	if (!m_Properties.empty()) {
		for (const auto &childEntry : m_Properties) {
            ptree Inner_node;
            Inner_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Inner_node));
		}
		pt.add_child("properties", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void Neo4jCaptureDataChangeNodePayload_after::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Labels into member vector
	if (pt.get_child_optional("labels")) {
		for (const auto &childTree : pt.get_child("labels")) {
            std::string val =
                childTree.second.data();
            m_Labels.emplace_back(std::move(val));
		}
	}
	// push all items of Properties into member vector
	if (pt.get_child_optional("properties")) {
		for (const auto &childTree : pt.get_child("properties")) {
            std::shared_ptr<AnyType> val =
            m_Inner.emplace_back(std::move(val));
		}
	}
}

std::vector<std::string> Neo4jCaptureDataChangeNodePayload_after::getLabels() const
{
    return m_Labels;
}

void Neo4jCaptureDataChangeNodePayload_after::setLabels(std::vector<std::string> value)
{
	m_Labels = value;
}
std::map<std::string, std::shared_ptr<AnyType>> Neo4jCaptureDataChangeNodePayload_after::getProperties() const
{
    return m_Properties;
}

void Neo4jCaptureDataChangeNodePayload_after::setProperties(std::map<std::string, std::shared_ptr<AnyType>> value)
{
	m_Properties = value;
}

std::vector<Neo4jCaptureDataChangeNodePayload_after> createNeo4jCaptureDataChangeNodePayload_afterVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<Neo4jCaptureDataChangeNodePayload_after>();
    for (const auto& child: pt) {
        vec.emplace_back(Neo4jCaptureDataChangeNodePayload_after(child.second));
    }

    return vec;
}

}
}
}
}

