/* tslint:disable */
/* eslint-disable */
/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Clipboard
 */
export interface Clipboard {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof Clipboard
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Clipboard
     */
    'source'?: string;
    /**
     * 
     * @type {ClipboardPayload}
     * @memberof Clipboard
     */
    'data'?: ClipboardPayload;
    /**
     * Identifies the event.
     * @type {string}
     * @memberof Clipboard
     */
    'id': string;
    /**
     * The version of the CloudEvents specification which the event uses.
     * @type {string}
     * @memberof Clipboard
     */
    'specversion': string;
    /**
     * Content type of the data value. Must adhere to RFC 2046 format.
     * @type {string}
     * @memberof Clipboard
     */
    'datacontenttype'?: string;
    /**
     * Identifies the schema that data adheres to.
     * @type {string}
     * @memberof Clipboard
     */
    'dataschema'?: string;
    /**
     * 
     * @type {string}
     * @memberof Clipboard
     */
    'subject'?: string;
    /**
     * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
     * @type {string}
     * @memberof Clipboard
     */
    'time'?: string;
    /**
     * Base64 encoded event payload. Must adhere to RFC4648.
     * @type {string}
     * @memberof Clipboard
     */
    'data_base64'?: string;
}
/**
 * 
 * @export
 * @interface ClipboardPayload
 */
export interface ClipboardPayload {
    /**
     * Starting position of clipboard selection [x,y]
     * @type {Array<number>}
     * @memberof ClipboardPayload
     */
    'start'?: Array<number>;
    /**
     * Ending position of clipboard selection [x,y]
     * @type {Array<number>}
     * @memberof ClipboardPayload
     */
    'stop'?: Array<number>;
    /**
     * Clipboard data
     * @type {string}
     * @memberof ClipboardPayload
     */
    'data'?: string;
    /**
     * Clipboard type
     * @type {string}
     * @memberof ClipboardPayload
     */
    'type'?: ClipboardPayloadTypeEnum;
    /**
     * 
     * @type {ClipboardPayloadContext}
     * @memberof ClipboardPayload
     */
    'context'?: ClipboardPayloadContext;
}

export const ClipboardPayloadTypeEnum = {
    Primary: 'primary',
    Secondary: 'secondary',
    Clipboard: 'clipboard'
} as const;

export type ClipboardPayloadTypeEnum = typeof ClipboardPayloadTypeEnum[keyof typeof ClipboardPayloadTypeEnum];

/**
 * Selection context
 * @export
 * @interface ClipboardPayloadContext
 */
export interface ClipboardPayloadContext {
    /**
     * window id
     * @type {string}
     * @memberof ClipboardPayloadContext
     */
    'window'?: string;
}
/**
 * CloudEvents Specification JSON Schema
 * @export
 * @interface CloudEvent
 */
export interface CloudEvent {
    /**
     * Identifies the event.
     * @type {string}
     * @memberof CloudEvent
     */
    'id': string;
    /**
     * Identifies the context in which an event happened.
     * @type {string}
     * @memberof CloudEvent
     */
    'source': string;
    /**
     * The version of the CloudEvents specification which the event uses.
     * @type {string}
     * @memberof CloudEvent
     */
    'specversion': string;
    /**
     * Describes the type of event related to the originating occurrence.
     * @type {string}
     * @memberof CloudEvent
     */
    'type': string;
    /**
     * Content type of the data value. Must adhere to RFC 2046 format.
     * @type {string}
     * @memberof CloudEvent
     */
    'datacontenttype'?: string | null;
    /**
     * Identifies the schema that data adheres to.
     * @type {string}
     * @memberof CloudEvent
     */
    'dataschema'?: string | null;
    /**
     * Describes the subject of the event in the context of the event producer (identified by source).
     * @type {string}
     * @memberof CloudEvent
     */
    'subject'?: string | null;
    /**
     * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
     * @type {string}
     * @memberof CloudEvent
     */
    'time'?: string | null;
    /**
     * 
     * @type {CloudEventData}
     * @memberof CloudEvent
     */
    'data'?: CloudEventData | null;
    /**
     * Base64 encoded event payload. Must adhere to RFC4648.
     * @type {string}
     * @memberof CloudEvent
     */
    'data_base64'?: string | null;
}
/**
 * The event payload.
 * @export
 * @interface CloudEventData
 */
export interface CloudEventData {
}
/**
 * 
 * @export
 * @interface IoDocument
 */
export interface IoDocument {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof IoDocument
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoDocument
     */
    'source'?: string;
    /**
     * 
     * @type {TmuxPaneIoDocument}
     * @memberof IoDocument
     */
    'data'?: TmuxPaneIoDocument;
    /**
     * Identifies the event.
     * @type {string}
     * @memberof IoDocument
     */
    'id': string;
    /**
     * The version of the CloudEvents specification which the event uses.
     * @type {string}
     * @memberof IoDocument
     */
    'specversion': string;
    /**
     * Content type of the data value. Must adhere to RFC 2046 format.
     * @type {string}
     * @memberof IoDocument
     */
    'datacontenttype'?: string;
    /**
     * Identifies the schema that data adheres to.
     * @type {string}
     * @memberof IoDocument
     */
    'dataschema'?: string;
    /**
     * Describes the subject of the event in the context of the event producer (identified by source).
     * @type {string}
     * @memberof IoDocument
     */
    'subject'?: string;
    /**
     * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
     * @type {string}
     * @memberof IoDocument
     */
    'time'?: string;
    /**
     * Base64 encoded event payload. Must adhere to RFC4648.
     * @type {string}
     * @memberof IoDocument
     */
    'data_base64'?: string;
}
/**
 * 
 * @export
 * @interface TmuxPaneIoDocument
 */
export interface TmuxPaneIoDocument {
    [key: string]: any;

    /**
     * User input
     * @type {string}
     * @memberof TmuxPaneIoDocument
     */
    'input': string;
    /**
     * Command output (mix of stdout & stderr)
     * @type {string}
     * @memberof TmuxPaneIoDocument
     */
    'output': string;
    /**
     * ps1 (prompt) AFTER the input and output
     * @type {string}
     * @memberof TmuxPaneIoDocument
     */
    'ps1': string;
}

