#
# Mindwm API
# This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
# Version: 0.1.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VarInput
User input
.PARAMETER Output
Command output (mix of stdout & stderr)
.PARAMETER Ps1
ps1 (prompt) AFTER the input and output
.OUTPUTS

TmuxPaneIoDocument<PSCustomObject>
#>

function Initialize-TmuxPaneIoDocument {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarInput},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Output},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ps1}
    )

    Process {
        'Creating PSCustomObject: MindWM => TmuxPaneIoDocument' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $VarInput) {
            throw "invalid value for 'VarInput', 'VarInput' cannot be null."
        }

        if ($VarInput.length -lt 1) {
            throw "invalid value for 'VarInput', the character length must be great than or equal to 1."
        }

        if ($null -eq $Output) {
            throw "invalid value for 'Output', 'Output' cannot be null."
        }

        if ($Output.length -lt 0) {
            throw "invalid value for 'Output', the character length must be great than or equal to 0."
        }

        if ($null -eq $Ps1) {
            throw "invalid value for 'Ps1', 'Ps1' cannot be null."
        }

        if ($Ps1.length -lt 1) {
            throw "invalid value for 'Ps1', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "input" = ${VarInput}
            "output" = ${Output}
            "ps1" = ${Ps1}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TmuxPaneIoDocument<PSCustomObject>

.DESCRIPTION

Convert from JSON to TmuxPaneIoDocument<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TmuxPaneIoDocument<PSCustomObject>
#>
function ConvertFrom-JsonToTmuxPaneIoDocument {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: MindWM => TmuxPaneIoDocument' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $TmuxPaneIoDocumentAdditionalProperties = @{}

        # check if Json contains properties not defined in TmuxPaneIoDocument
        $AllProperties = ("input", "output", "ps1")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $TmuxPaneIoDocumentAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'input' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input"))) {
            throw "Error! JSON cannot be serialized due to the required property 'input' missing."
        } else {
            $VarInput = $JsonParameters.PSobject.Properties["input"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "output"))) {
            throw "Error! JSON cannot be serialized due to the required property 'output' missing."
        } else {
            $Output = $JsonParameters.PSobject.Properties["output"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ps1"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ps1' missing."
        } else {
            $Ps1 = $JsonParameters.PSobject.Properties["ps1"].value
        }

        $PSO = [PSCustomObject]@{
            "input" = ${VarInput}
            "output" = ${Output}
            "ps1" = ${Ps1}
            "AdditionalProperties" = $TmuxPaneIoDocumentAdditionalProperties
        }

        return $PSO
    }

}

