#
# Mindwm API
# This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
# Version: 0.1.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Start
Starting position of clipboard selection [x,y]
.PARAMETER Stop
Ending position of clipboard selection [x,y]
.PARAMETER VarData
Clipboard data
.PARAMETER Type
Clipboard type
.PARAMETER Context
No description available.
.OUTPUTS

ClipboardPayload<PSCustomObject>
#>

function Initialize-ClipboardPayload {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Start},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Stop},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarData},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("primary", "secondary", "clipboard")]
        [String]
        ${Type},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Context}
    )

    Process {
        'Creating PSCustomObject: MindWM => ClipboardPayload' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Start -and $Start.length -gt 2) {
            throw "invalid value for 'Start', number of items must be less than or equal to 2."
        }

        if (!$Start -and $Start.length -lt 2) {
            throw "invalid value for 'Start', number of items must be greater than or equal to 2."
        }

        if (!$Stop -and $Stop.length -gt 2) {
            throw "invalid value for 'Stop', number of items must be less than or equal to 2."
        }

        if (!$Stop -and $Stop.length -lt 2) {
            throw "invalid value for 'Stop', number of items must be greater than or equal to 2."
        }

        if (!$VarData -and $VarData.length -lt 1) {
            throw "invalid value for 'VarData', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "start" = ${Start}
            "stop" = ${Stop}
            "data" = ${VarData}
            "type" = ${Type}
            "context" = ${Context}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClipboardPayload<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClipboardPayload<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClipboardPayload<PSCustomObject>
#>
function ConvertFrom-JsonToClipboardPayload {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: MindWM => ClipboardPayload' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClipboardPayload
        $AllProperties = ("start", "stop", "data", "type", "context")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start"))) { #optional property not found
            $Start = $null
        } else {
            $Start = $JsonParameters.PSobject.Properties["start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stop"))) { #optional property not found
            $Stop = $null
        } else {
            $Stop = $JsonParameters.PSobject.Properties["stop"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data"))) { #optional property not found
            $VarData = $null
        } else {
            $VarData = $JsonParameters.PSobject.Properties["data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "context"))) { #optional property not found
            $Context = $null
        } else {
            $Context = $JsonParameters.PSobject.Properties["context"].value
        }

        $PSO = [PSCustomObject]@{
            "start" = ${Start}
            "stop" = ${Stop}
            "data" = ${VarData}
            "type" = ${Type}
            "context" = ${Context}
        }

        return $PSO
    }

}

