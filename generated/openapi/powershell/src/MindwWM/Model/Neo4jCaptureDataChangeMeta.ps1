#
# Mindwm API
# This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
# Version: 0.1.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Operation
No description available.
.PARAMETER Source
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER TxEventId
No description available.
.PARAMETER TxEventsCount
No description available.
.PARAMETER TxId
No description available.
.PARAMETER Username
No description available.
.OUTPUTS

Neo4jCaptureDataChangeMeta<PSCustomObject>
#>

function Initialize-Neo4jCaptureDataChangeMeta {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Operation},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Source},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Timestamp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${TxEventId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${TxEventsCount},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${TxId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username}
    )

    Process {
        'Creating PSCustomObject: MindwWM => Neo4jCaptureDataChangeMeta' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Operation) {
            throw "invalid value for 'Operation', 'Operation' cannot be null."
        }

        if ($null -eq $Source) {
            throw "invalid value for 'Source', 'Source' cannot be null."
        }

        if ($null -eq $Timestamp) {
            throw "invalid value for 'Timestamp', 'Timestamp' cannot be null."
        }

        if ($null -eq $TxEventId) {
            throw "invalid value for 'TxEventId', 'TxEventId' cannot be null."
        }

        if ($null -eq $TxEventsCount) {
            throw "invalid value for 'TxEventsCount', 'TxEventsCount' cannot be null."
        }

        if ($null -eq $TxId) {
            throw "invalid value for 'TxId', 'TxId' cannot be null."
        }

        if ($null -eq $Username) {
            throw "invalid value for 'Username', 'Username' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "operation" = ${Operation}
            "source" = ${Source}
            "timestamp" = ${Timestamp}
            "txEventId" = ${TxEventId}
            "txEventsCount" = ${TxEventsCount}
            "txId" = ${TxId}
            "username" = ${Username}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Neo4jCaptureDataChangeMeta<PSCustomObject>

.DESCRIPTION

Convert from JSON to Neo4jCaptureDataChangeMeta<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Neo4jCaptureDataChangeMeta<PSCustomObject>
#>
function ConvertFrom-JsonToNeo4jCaptureDataChangeMeta {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: MindwWM => Neo4jCaptureDataChangeMeta' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Neo4jCaptureDataChangeMeta
        $AllProperties = ("operation", "source", "timestamp", "txEventId", "txEventsCount", "txId", "username")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'operation' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operation"))) {
            throw "Error! JSON cannot be serialized due to the required property 'operation' missing."
        } else {
            $Operation = $JsonParameters.PSobject.Properties["operation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) {
            throw "Error! JSON cannot be serialized due to the required property 'source' missing."
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) {
            throw "Error! JSON cannot be serialized due to the required property 'timestamp' missing."
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "txEventId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'txEventId' missing."
        } else {
            $TxEventId = $JsonParameters.PSobject.Properties["txEventId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "txEventsCount"))) {
            throw "Error! JSON cannot be serialized due to the required property 'txEventsCount' missing."
        } else {
            $TxEventsCount = $JsonParameters.PSobject.Properties["txEventsCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "txId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'txId' missing."
        } else {
            $TxId = $JsonParameters.PSobject.Properties["txId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) {
            throw "Error! JSON cannot be serialized due to the required property 'username' missing."
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        $PSO = [PSCustomObject]@{
            "operation" = ${Operation}
            "source" = ${Source}
            "timestamp" = ${Timestamp}
            "txEventId" = ${TxEventId}
            "txEventsCount" = ${TxEventsCount}
            "txId" = ${TxId}
            "username" = ${Username}
        }

        return $PSO
    }

}

