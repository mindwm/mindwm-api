#
# Mindwm API
# This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
# Version: 0.1.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Headers
No description available.
.PARAMETER MessageKey
No description available.
.PARAMETER Meta
No description available.
.PARAMETER Offset
No description available.
.PARAMETER Partition
No description available.
.PARAMETER SourceType
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER Topic
No description available.
.PARAMETER Schema
No description available.
.PARAMETER Payload
No description available.
.OUTPUTS

GraphRelationshipAllOfData<PSCustomObject>
#>

function Initialize-GraphRelationshipAllOfData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Headers},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MessageKey},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Meta},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Offset},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Partition},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${Timestamp},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Topic},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Schema},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Payload}
    )

    Process {
        'Creating PSCustomObject: MindwWM => GraphRelationshipAllOfData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Headers) {
            throw "invalid value for 'Headers', 'Headers' cannot be null."
        }

        if ($null -eq $MessageKey) {
            throw "invalid value for 'MessageKey', 'MessageKey' cannot be null."
        }

        if ($null -eq $Meta) {
            throw "invalid value for 'Meta', 'Meta' cannot be null."
        }

        if ($null -eq $Offset) {
            throw "invalid value for 'Offset', 'Offset' cannot be null."
        }

        if ($null -eq $Partition) {
            throw "invalid value for 'Partition', 'Partition' cannot be null."
        }

        if ($null -eq $SourceType) {
            throw "invalid value for 'SourceType', 'SourceType' cannot be null."
        }

        if ($null -eq $Timestamp) {
            throw "invalid value for 'Timestamp', 'Timestamp' cannot be null."
        }

        if ($null -eq $Topic) {
            throw "invalid value for 'Topic', 'Topic' cannot be null."
        }

        if ($null -eq $Schema) {
            throw "invalid value for 'Schema', 'Schema' cannot be null."
        }

        if ($null -eq $Payload) {
            throw "invalid value for 'Payload', 'Payload' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "headers" = ${Headers}
            "message_key" = ${MessageKey}
            "meta" = ${Meta}
            "offset" = ${Offset}
            "partition" = ${Partition}
            "source_type" = ${SourceType}
            "timestamp" = ${Timestamp}
            "topic" = ${Topic}
            "schema" = ${Schema}
            "payload" = ${Payload}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GraphRelationshipAllOfData<PSCustomObject>

.DESCRIPTION

Convert from JSON to GraphRelationshipAllOfData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GraphRelationshipAllOfData<PSCustomObject>
#>
function ConvertFrom-JsonToGraphRelationshipAllOfData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: MindwWM => GraphRelationshipAllOfData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GraphRelationshipAllOfData
        $AllProperties = ("headers", "message_key", "meta", "offset", "partition", "source_type", "timestamp", "topic", "schema", "payload")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'headers' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "headers"))) {
            throw "Error! JSON cannot be serialized due to the required property 'headers' missing."
        } else {
            $Headers = $JsonParameters.PSobject.Properties["headers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message_key"))) {
            throw "Error! JSON cannot be serialized due to the required property 'message_key' missing."
        } else {
            $MessageKey = $JsonParameters.PSobject.Properties["message_key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "meta"))) {
            throw "Error! JSON cannot be serialized due to the required property 'meta' missing."
        } else {
            $Meta = $JsonParameters.PSobject.Properties["meta"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offset"))) {
            throw "Error! JSON cannot be serialized due to the required property 'offset' missing."
        } else {
            $Offset = $JsonParameters.PSobject.Properties["offset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partition"))) {
            throw "Error! JSON cannot be serialized due to the required property 'partition' missing."
        } else {
            $Partition = $JsonParameters.PSobject.Properties["partition"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'source_type' missing."
        } else {
            $SourceType = $JsonParameters.PSobject.Properties["source_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) {
            throw "Error! JSON cannot be serialized due to the required property 'timestamp' missing."
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "topic"))) {
            throw "Error! JSON cannot be serialized due to the required property 'topic' missing."
        } else {
            $Topic = $JsonParameters.PSobject.Properties["topic"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schema"))) {
            throw "Error! JSON cannot be serialized due to the required property 'schema' missing."
        } else {
            $Schema = $JsonParameters.PSobject.Properties["schema"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "payload"))) {
            throw "Error! JSON cannot be serialized due to the required property 'payload' missing."
        } else {
            $Payload = $JsonParameters.PSobject.Properties["payload"].value
        }

        $PSO = [PSCustomObject]@{
            "headers" = ${Headers}
            "message_key" = ${MessageKey}
            "meta" = ${Meta}
            "offset" = ${Offset}
            "partition" = ${Partition}
            "source_type" = ${SourceType}
            "timestamp" = ${Timestamp}
            "topic" = ${Topic}
            "schema" = ${Schema}
            "payload" = ${Payload}
        }

        return $PSO
    }

}

