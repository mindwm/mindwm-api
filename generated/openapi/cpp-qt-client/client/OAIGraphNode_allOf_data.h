/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGraphNode_allOf_data.h
 *
 * 
 */

#ifndef OAIGraphNode_allOf_data_H
#define OAIGraphNode_allOf_data_H

#include <QJsonObject>

#include "OAINeo4jCaptureDataChangeNodePayload.h"
#include "OAINeo4jCaptureDataChange_meta.h"
#include "OAINeo4jCaptureDataChange_schema.h"
#include "OAIObject.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINeo4jCaptureDataChange_meta;
class OAINeo4jCaptureDataChange_schema;
class OAINeo4jCaptureDataChangeNodePayload;

class OAIGraphNode_allOf_data : public OAIObject {
public:
    OAIGraphNode_allOf_data();
    OAIGraphNode_allOf_data(QString json);
    ~OAIGraphNode_allOf_data() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getHeaders() const;
    void setHeaders(const OAIObject &headers);
    bool is_headers_Set() const;
    bool is_headers_Valid() const;

    QString getMessageKey() const;
    void setMessageKey(const QString &message_key);
    bool is_message_key_Set() const;
    bool is_message_key_Valid() const;

    OAINeo4jCaptureDataChange_meta getMeta() const;
    void setMeta(const OAINeo4jCaptureDataChange_meta &meta);
    bool is_meta_Set() const;
    bool is_meta_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    qint32 getPartition() const;
    void setPartition(const qint32 &partition);
    bool is_partition_Set() const;
    bool is_partition_Valid() const;

    QString getSourceType() const;
    void setSourceType(const QString &source_type);
    bool is_source_type_Set() const;
    bool is_source_type_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QString getTopic() const;
    void setTopic(const QString &topic);
    bool is_topic_Set() const;
    bool is_topic_Valid() const;

    OAINeo4jCaptureDataChange_schema getSchema() const;
    void setSchema(const OAINeo4jCaptureDataChange_schema &schema);
    bool is_schema_Set() const;
    bool is_schema_Valid() const;

    OAINeo4jCaptureDataChangeNodePayload getPayload() const;
    void setPayload(const OAINeo4jCaptureDataChangeNodePayload &payload);
    bool is_payload_Set() const;
    bool is_payload_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m_headers;
    bool m_headers_isSet;
    bool m_headers_isValid;

    QString m_message_key;
    bool m_message_key_isSet;
    bool m_message_key_isValid;

    OAINeo4jCaptureDataChange_meta m_meta;
    bool m_meta_isSet;
    bool m_meta_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    qint32 m_partition;
    bool m_partition_isSet;
    bool m_partition_isValid;

    QString m_source_type;
    bool m_source_type_isSet;
    bool m_source_type_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QString m_topic;
    bool m_topic_isSet;
    bool m_topic_isValid;

    OAINeo4jCaptureDataChange_schema m_schema;
    bool m_schema_isSet;
    bool m_schema_isValid;

    OAINeo4jCaptureDataChangeNodePayload m_payload;
    bool m_payload_isSet;
    bool m_payload_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGraphNode_allOf_data)

#endif // OAIGraphNode_allOf_data_H
