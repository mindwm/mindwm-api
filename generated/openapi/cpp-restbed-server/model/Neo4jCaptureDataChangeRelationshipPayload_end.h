/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Neo4jCaptureDataChangeRelationshipPayload_end.h
 *
 * 
 */

#ifndef Neo4jCaptureDataChangeRelationshipPayload_end_H_
#define Neo4jCaptureDataChangeRelationshipPayload_end_H_



#include <string>
#include <map>
#include <vector>
#include "AnyType.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Neo4jCaptureDataChangeRelationshipPayload_end 
{
public:
    Neo4jCaptureDataChangeRelationshipPayload_end() = default;
    explicit Neo4jCaptureDataChangeRelationshipPayload_end(boost::property_tree::ptree const& pt);
    virtual ~Neo4jCaptureDataChangeRelationshipPayload_end() = default;

    Neo4jCaptureDataChangeRelationshipPayload_end(const Neo4jCaptureDataChangeRelationshipPayload_end& other) = default; // copy constructor
    Neo4jCaptureDataChangeRelationshipPayload_end(Neo4jCaptureDataChangeRelationshipPayload_end&& other) noexcept = default; // move constructor

    Neo4jCaptureDataChangeRelationshipPayload_end& operator=(const Neo4jCaptureDataChangeRelationshipPayload_end& other) = default; // copy assignment
    Neo4jCaptureDataChangeRelationshipPayload_end& operator=(Neo4jCaptureDataChangeRelationshipPayload_end&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Neo4jCaptureDataChangeRelationshipPayload_end members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::map<std::string, AnyType> getIds() const;
    void setIds(std::map<std::string, AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getLabels() const;
    void setLabels(std::vector<std::string> value);

protected:
    std::string m_Id = "";
    std::map<std::string, AnyType> m_Ids;
    std::vector<std::string> m_Labels;
};

std::vector<Neo4jCaptureDataChangeRelationshipPayload_end> createNeo4jCaptureDataChangeRelationshipPayload_endVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Neo4jCaptureDataChangeRelationshipPayload_end>(const Neo4jCaptureDataChangeRelationshipPayload_end& val) {
    return val.toPropertyTree();
}

template<>
inline Neo4jCaptureDataChangeRelationshipPayload_end fromPt<Neo4jCaptureDataChangeRelationshipPayload_end>(const boost::property_tree::ptree& pt) {
    Neo4jCaptureDataChangeRelationshipPayload_end ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Neo4jCaptureDataChangeRelationshipPayload_end_H_ */
