/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IoDocument.h
 *
 * 
 */

#ifndef IoDocument_H_
#define IoDocument_H_



#include <string>
#include <map>
#include "AnyType.h"
#include "TmuxPaneIoDocument.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "CloudEvent.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  IoDocument : public CloudEvent
{
public:
    IoDocument() = default;
    explicit IoDocument(boost::property_tree::ptree const& pt);
    virtual ~IoDocument() = default;

    IoDocument(const IoDocument& other) = default; // copy constructor
    IoDocument(IoDocument&& other) noexcept = default; // move constructor

    IoDocument& operator=(const IoDocument& other) = default; // copy assignment
    IoDocument& operator=(IoDocument&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// IoDocument members

    /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getSource() const;
    void setSource(std::string value);

    /// <summary>
    /// 
    /// </summary>
    TmuxPaneIoDocument getData() const;
    void setData(TmuxPaneIoDocument value);

    /// <summary>
    /// Identifies the event.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// The version of the CloudEvents specification which the event uses.
    /// </summary>
    std::string getSpecversion() const;
    void setSpecversion(std::string value);

    /// <summary>
    /// Content type of the data value. Must adhere to RFC 2046 format.
    /// </summary>
    std::string getDatacontenttype() const;
    void setDatacontenttype(std::string value);

    /// <summary>
    /// Identifies the schema that data adheres to.
    /// </summary>
    std::string getDataschema() const;
    void setDataschema(std::string value);

    /// <summary>
    /// Describes the subject of the event in the context of the event producer (identified by source).
    /// </summary>
    std::string getSubject() const;
    void setSubject(std::string value);

    /// <summary>
    /// Timestamp of when the occurrence happened. Must adhere to RFC 3339.
    /// </summary>
    std::string getTime() const;
    void setTime(std::string value);

    /// <summary>
    /// Base64 encoded event payload. Must adhere to RFC4648.
    /// </summary>
    std::string getDataBase64() const;
    void setDataBase64(std::string value);

protected:
    std::string m_Type = "";
    std::string m_Source = "";
    TmuxPaneIoDocument m_Data = TmuxPaneIoDocument{};
    std::string m_Id = "";
    std::string m_Specversion = "";
    std::string m_Datacontenttype = "";
    std::string m_Dataschema = "";
    std::string m_Subject = "";
    std::string m_Time = "";
    std::string m_Data_base64 = "";
};

std::vector<IoDocument> createIoDocumentVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<IoDocument>(const IoDocument& val) {
    return val.toPropertyTree();
}

template<>
inline IoDocument fromPt<IoDocument>(const boost::property_tree::ptree& pt) {
    IoDocument ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* IoDocument_H_ */
