/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ClipboardPayload.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ClipboardPayload::ClipboardPayload(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ClipboardPayload::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ClipboardPayload::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ClipboardPayload::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Start
    tmp_node.clear();
	if (!m_Start.empty()) {
        tmp_node = toPt(m_Start);
		pt.add_child("start", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Stop
    tmp_node.clear();
	if (!m_Stop.empty()) {
        tmp_node = toPt(m_Stop);
		pt.add_child("stop", tmp_node);
		tmp_node.clear();
	}
	pt.put("data", m_Data);
	pt.put("type", m_Type);
	pt.add_child("context", m_Context.toPropertyTree());
	return pt;
}

void ClipboardPayload::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Start into member
	if (pt.get_child_optional("start")) {
        m_Start = fromPt<std::vector<int32_t>>(pt.get_child("start"));
	}
	// push all items of Stop into member
	if (pt.get_child_optional("stop")) {
        m_Stop = fromPt<std::vector<int32_t>>(pt.get_child("stop"));
	}
	m_Data = pt.get("data", "");
	setType(pt.get("type", ""));
	if (pt.get_child_optional("context")) {
        m_Context = fromPt<ClipboardPayload_context>(pt.get_child("context"));
	}
}

std::vector<int32_t> ClipboardPayload::getStart() const
{
    return m_Start;
}

void ClipboardPayload::setStart(std::vector<int32_t> value)
{
    m_Start = value;
}


std::vector<int32_t> ClipboardPayload::getStop() const
{
    return m_Stop;
}

void ClipboardPayload::setStop(std::vector<int32_t> value)
{
    m_Stop = value;
}


std::string ClipboardPayload::getData() const
{
    return m_Data;
}

void ClipboardPayload::setData(std::string value)
{
    m_Data = value;
}


std::string ClipboardPayload::getType() const
{
    return m_Type;
}

void ClipboardPayload::setType(std::string value)
{
    static const std::array<std::string, 3> allowedValues = {
        "primary", "secondary", "clipboard"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Type = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


ClipboardPayload_context ClipboardPayload::getContext() const
{
    return m_Context;
}

void ClipboardPayload::setContext(ClipboardPayload_context value)
{
    m_Context = value;
}



std::vector<ClipboardPayload> createClipboardPayloadVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ClipboardPayload>();
    for (const auto& child: pt) {
        vec.emplace_back(ClipboardPayload(child.second));
    }

    return vec;
}

}
}
}
}

