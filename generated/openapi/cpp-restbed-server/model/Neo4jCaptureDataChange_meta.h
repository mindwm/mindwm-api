/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Neo4jCaptureDataChange_meta.h
 *
 * 
 */

#ifndef Neo4jCaptureDataChange_meta_H_
#define Neo4jCaptureDataChange_meta_H_



#include "Neo4jCaptureDataChange_meta_source.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Neo4jCaptureDataChange_meta 
{
public:
    Neo4jCaptureDataChange_meta() = default;
    explicit Neo4jCaptureDataChange_meta(boost::property_tree::ptree const& pt);
    virtual ~Neo4jCaptureDataChange_meta() = default;

    Neo4jCaptureDataChange_meta(const Neo4jCaptureDataChange_meta& other) = default; // copy constructor
    Neo4jCaptureDataChange_meta(Neo4jCaptureDataChange_meta&& other) noexcept = default; // move constructor

    Neo4jCaptureDataChange_meta& operator=(const Neo4jCaptureDataChange_meta& other) = default; // copy assignment
    Neo4jCaptureDataChange_meta& operator=(Neo4jCaptureDataChange_meta&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Neo4jCaptureDataChange_meta members

    /// <summary>
    /// 
    /// </summary>
    std::string getOperation() const;
    void setOperation(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Neo4jCaptureDataChange_meta_source getSource() const;
    void setSource(Neo4jCaptureDataChange_meta_source value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTimestamp() const;
    void setTimestamp(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTxEventId() const;
    void setTxEventId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTxEventsCount() const;
    void setTxEventsCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTxId() const;
    void setTxId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getUsername() const;
    void setUsername(std::string value);

protected:
    std::string m_Operation = "";
    Neo4jCaptureDataChange_meta_source m_Source;
    int32_t m_Timestamp = 0;
    int32_t m_TxEventId = 0;
    int32_t m_TxEventsCount = 0;
    int32_t m_TxId = 0;
    std::string m_Username = "";
};

std::vector<Neo4jCaptureDataChange_meta> createNeo4jCaptureDataChange_metaVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Neo4jCaptureDataChange_meta>(const Neo4jCaptureDataChange_meta& val) {
    return val.toPropertyTree();
}

template<>
inline Neo4jCaptureDataChange_meta fromPt<Neo4jCaptureDataChange_meta>(const boost::property_tree::ptree& pt) {
    Neo4jCaptureDataChange_meta ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Neo4jCaptureDataChange_meta_H_ */
