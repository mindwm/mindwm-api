/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Neo4jCaptureDataChange.h
 *
 * 
 */

#ifndef Neo4jCaptureDataChange_H_
#define Neo4jCaptureDataChange_H_



#include "Neo4jCaptureDataChange_payload.h"
#include <string>
#include "Neo4jCaptureDataChange_meta.h"
#include <map>
#include "Neo4jCaptureDataChange_schema.h"
#include "AnyType.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Neo4jCaptureDataChange 
{
public:
    Neo4jCaptureDataChange() = default;
    explicit Neo4jCaptureDataChange(boost::property_tree::ptree const& pt);
    virtual ~Neo4jCaptureDataChange() = default;

    Neo4jCaptureDataChange(const Neo4jCaptureDataChange& other) = default; // copy constructor
    Neo4jCaptureDataChange(Neo4jCaptureDataChange&& other) noexcept = default; // move constructor

    Neo4jCaptureDataChange& operator=(const Neo4jCaptureDataChange& other) = default; // copy assignment
    Neo4jCaptureDataChange& operator=(Neo4jCaptureDataChange&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Neo4jCaptureDataChange members

    /// <summary>
    /// 
    /// </summary>
    std::map<std::string, AnyType> getHeaders() const;
    void setHeaders(std::map<std::string, AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::string getMessageKey() const;
    void setMessageKey(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Neo4jCaptureDataChange_meta getMeta() const;
    void setMeta(Neo4jCaptureDataChange_meta value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getOffset() const;
    void setOffset(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPartition() const;
    void setPartition(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getSourceType() const;
    void setSourceType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getTimestamp() const;
    void setTimestamp(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getTopic() const;
    void setTopic(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Neo4jCaptureDataChange_schema getSchema() const;
    void setSchema(Neo4jCaptureDataChange_schema value);

    /// <summary>
    /// 
    /// </summary>
    Neo4jCaptureDataChange_payload getPayload() const;
    void setPayload(Neo4jCaptureDataChange_payload value);

protected:
    std::map<std::string, AnyType> m_Headers;
    std::string m_Message_key = "";
    Neo4jCaptureDataChange_meta m_Meta;
    int32_t m_Offset = 0;
    int32_t m_Partition = 0;
    std::string m_Source_type = "";
    std::string m_Timestamp = "";
    std::string m_Topic = "";
    Neo4jCaptureDataChange_schema m_Schema;
    Neo4jCaptureDataChange_payload m_Payload;
};

std::vector<Neo4jCaptureDataChange> createNeo4jCaptureDataChangeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Neo4jCaptureDataChange>(const Neo4jCaptureDataChange& val) {
    return val.toPropertyTree();
}

template<>
inline Neo4jCaptureDataChange fromPt<Neo4jCaptureDataChange>(const boost::property_tree::ptree& pt) {
    Neo4jCaptureDataChange ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Neo4jCaptureDataChange_H_ */
