/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Neo4jCaptureDataChange_meta.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Neo4jCaptureDataChange_meta::Neo4jCaptureDataChange_meta(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string Neo4jCaptureDataChange_meta::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void Neo4jCaptureDataChange_meta::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Neo4jCaptureDataChange_meta::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("operation", m_Operation);
	pt.add_child("source", m_Source.toPropertyTree());
	pt.put("timestamp", m_Timestamp);
	pt.put("txEventId", m_TxEventId);
	pt.put("txEventsCount", m_TxEventsCount);
	pt.put("txId", m_TxId);
	pt.put("username", m_Username);
	return pt;
}

void Neo4jCaptureDataChange_meta::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Operation = pt.get("operation", "");
	if (pt.get_child_optional("source")) {
        m_Source = fromPt<Neo4jCaptureDataChange_meta_source>(pt.get_child("source"));
	}
	m_Timestamp = pt.get("timestamp", 0);
	m_TxEventId = pt.get("txEventId", 0);
	m_TxEventsCount = pt.get("txEventsCount", 0);
	m_TxId = pt.get("txId", 0);
	m_Username = pt.get("username", "");
}

std::string Neo4jCaptureDataChange_meta::getOperation() const
{
    return m_Operation;
}

void Neo4jCaptureDataChange_meta::setOperation(std::string value)
{
    m_Operation = value;
}


Neo4jCaptureDataChange_meta_source Neo4jCaptureDataChange_meta::getSource() const
{
    return m_Source;
}

void Neo4jCaptureDataChange_meta::setSource(Neo4jCaptureDataChange_meta_source value)
{
    m_Source = value;
}


int32_t Neo4jCaptureDataChange_meta::getTimestamp() const
{
    return m_Timestamp;
}

void Neo4jCaptureDataChange_meta::setTimestamp(int32_t value)
{
    m_Timestamp = value;
}


int32_t Neo4jCaptureDataChange_meta::getTxEventId() const
{
    return m_TxEventId;
}

void Neo4jCaptureDataChange_meta::setTxEventId(int32_t value)
{
    m_TxEventId = value;
}


int32_t Neo4jCaptureDataChange_meta::getTxEventsCount() const
{
    return m_TxEventsCount;
}

void Neo4jCaptureDataChange_meta::setTxEventsCount(int32_t value)
{
    m_TxEventsCount = value;
}


int32_t Neo4jCaptureDataChange_meta::getTxId() const
{
    return m_TxId;
}

void Neo4jCaptureDataChange_meta::setTxId(int32_t value)
{
    m_TxId = value;
}


std::string Neo4jCaptureDataChange_meta::getUsername() const
{
    return m_Username;
}

void Neo4jCaptureDataChange_meta::setUsername(std::string value)
{
    m_Username = value;
}



std::vector<Neo4jCaptureDataChange_meta> createNeo4jCaptureDataChange_metaVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<Neo4jCaptureDataChange_meta>();
    for (const auto& child: pt) {
        vec.emplace_back(Neo4jCaptureDataChange_meta(child.second));
    }

    return vec;
}

}
}
}
}

