/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Neo4jCaptureDataChangeRelationshipPayload.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Neo4jCaptureDataChangeRelationshipPayload::Neo4jCaptureDataChangeRelationshipPayload(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string Neo4jCaptureDataChangeRelationshipPayload::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void Neo4jCaptureDataChangeRelationshipPayload::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Neo4jCaptureDataChangeRelationshipPayload::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("before", m_Before);
	pt.add_child("end", m_End.toPropertyTree());
	pt.put("id", m_Id);
	pt.put("label", m_Label);
	pt.add_child("start", m_Start.toPropertyTree());
	pt.put("type", m_Type);
	return pt;
}

void Neo4jCaptureDataChangeRelationshipPayload::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Before = pt.get("before", "");
	if (pt.get_child_optional("end")) {
        m_End = fromPt<Neo4jCaptureDataChangeRelationshipPayload_end>(pt.get_child("end"));
	}
	m_Id = pt.get("id", "");
	m_Label = pt.get("label", "");
	if (pt.get_child_optional("start")) {
        m_Start = fromPt<Neo4jCaptureDataChangeRelationshipPayload_end>(pt.get_child("start"));
	}
	m_Type = pt.get("type", "");
}

std::string Neo4jCaptureDataChangeRelationshipPayload::getAfter() const
{
    return m_After;
}

void Neo4jCaptureDataChangeRelationshipPayload::setAfter(std::string value)
{
    m_After = value;
}


std::string Neo4jCaptureDataChangeRelationshipPayload::getBefore() const
{
    return m_Before;
}

void Neo4jCaptureDataChangeRelationshipPayload::setBefore(std::string value)
{
    m_Before = value;
}


Neo4jCaptureDataChangeRelationshipPayload_end Neo4jCaptureDataChangeRelationshipPayload::getEnd() const
{
    return m_End;
}

void Neo4jCaptureDataChangeRelationshipPayload::setEnd(Neo4jCaptureDataChangeRelationshipPayload_end value)
{
    m_End = value;
}


std::string Neo4jCaptureDataChangeRelationshipPayload::getId() const
{
    return m_Id;
}

void Neo4jCaptureDataChangeRelationshipPayload::setId(std::string value)
{
    m_Id = value;
}


std::string Neo4jCaptureDataChangeRelationshipPayload::getLabel() const
{
    return m_Label;
}

void Neo4jCaptureDataChangeRelationshipPayload::setLabel(std::string value)
{
    m_Label = value;
}


Neo4jCaptureDataChangeRelationshipPayload_end Neo4jCaptureDataChangeRelationshipPayload::getStart() const
{
    return m_Start;
}

void Neo4jCaptureDataChangeRelationshipPayload::setStart(Neo4jCaptureDataChangeRelationshipPayload_end value)
{
    m_Start = value;
}


std::string Neo4jCaptureDataChangeRelationshipPayload::getType() const
{
    return m_Type;
}

void Neo4jCaptureDataChangeRelationshipPayload::setType(std::string value)
{
    m_Type = value;
}



std::vector<Neo4jCaptureDataChangeRelationshipPayload> createNeo4jCaptureDataChangeRelationshipPayloadVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<Neo4jCaptureDataChangeRelationshipPayload>();
    for (const auto& child: pt) {
        vec.emplace_back(Neo4jCaptureDataChangeRelationshipPayload(child.second));
    }

    return vec;
}

}
}
}
}

