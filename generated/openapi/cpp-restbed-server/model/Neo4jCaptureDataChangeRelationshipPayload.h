/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Neo4jCaptureDataChangeRelationshipPayload.h
 *
 * 
 */

#ifndef Neo4jCaptureDataChangeRelationshipPayload_H_
#define Neo4jCaptureDataChangeRelationshipPayload_H_



#include "Neo4jCaptureDataChangeRelationshipPayload_end.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Neo4jCaptureDataChangeRelationshipPayload 
{
public:
    Neo4jCaptureDataChangeRelationshipPayload() = default;
    explicit Neo4jCaptureDataChangeRelationshipPayload(boost::property_tree::ptree const& pt);
    virtual ~Neo4jCaptureDataChangeRelationshipPayload() = default;

    Neo4jCaptureDataChangeRelationshipPayload(const Neo4jCaptureDataChangeRelationshipPayload& other) = default; // copy constructor
    Neo4jCaptureDataChangeRelationshipPayload(Neo4jCaptureDataChangeRelationshipPayload&& other) noexcept = default; // move constructor

    Neo4jCaptureDataChangeRelationshipPayload& operator=(const Neo4jCaptureDataChangeRelationshipPayload& other) = default; // copy assignment
    Neo4jCaptureDataChangeRelationshipPayload& operator=(Neo4jCaptureDataChangeRelationshipPayload&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Neo4jCaptureDataChangeRelationshipPayload members

    /// <summary>
    /// 
    /// </summary>
    std::string getAfter() const;
    void setAfter(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getBefore() const;
    void setBefore(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Neo4jCaptureDataChangeRelationshipPayload_end getEnd() const;
    void setEnd(Neo4jCaptureDataChangeRelationshipPayload_end value);

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getLabel() const;
    void setLabel(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Neo4jCaptureDataChangeRelationshipPayload_end getStart() const;
    void setStart(Neo4jCaptureDataChangeRelationshipPayload_end value);

    /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

protected:
    std::string m_After = nullptr;
    std::string m_Before = "";
    Neo4jCaptureDataChangeRelationshipPayload_end m_End;
    std::string m_Id = "";
    std::string m_Label = "";
    Neo4jCaptureDataChangeRelationshipPayload_end m_Start;
    std::string m_Type = "";
};

std::vector<Neo4jCaptureDataChangeRelationshipPayload> createNeo4jCaptureDataChangeRelationshipPayloadVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Neo4jCaptureDataChangeRelationshipPayload>(const Neo4jCaptureDataChangeRelationshipPayload& val) {
    return val.toPropertyTree();
}

template<>
inline Neo4jCaptureDataChangeRelationshipPayload fromPt<Neo4jCaptureDataChangeRelationshipPayload>(const boost::property_tree::ptree& pt) {
    Neo4jCaptureDataChangeRelationshipPayload ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Neo4jCaptureDataChangeRelationshipPayload_H_ */
