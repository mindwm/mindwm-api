/*
Mindwm API

This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package MindwWM

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Neo4jCaptureDataChangeRelationshipPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Neo4jCaptureDataChangeRelationshipPayload{}

// Neo4jCaptureDataChangeRelationshipPayload struct for Neo4jCaptureDataChangeRelationshipPayload
type Neo4jCaptureDataChangeRelationshipPayload struct {
	After map[string]interface{} `json:"after"`
	Before string `json:"before"`
	End Neo4jCaptureDataChangeRelationshipPayloadEnd `json:"end"`
	Id string `json:"id"`
	Label string `json:"label"`
	Start Neo4jCaptureDataChangeRelationshipPayloadEnd `json:"start"`
	Type string `json:"type"`
}

type _Neo4jCaptureDataChangeRelationshipPayload Neo4jCaptureDataChangeRelationshipPayload

// NewNeo4jCaptureDataChangeRelationshipPayload instantiates a new Neo4jCaptureDataChangeRelationshipPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNeo4jCaptureDataChangeRelationshipPayload(after map[string]interface{}, before string, end Neo4jCaptureDataChangeRelationshipPayloadEnd, id string, label string, start Neo4jCaptureDataChangeRelationshipPayloadEnd, type_ string) *Neo4jCaptureDataChangeRelationshipPayload {
	this := Neo4jCaptureDataChangeRelationshipPayload{}
	this.After = after
	this.Before = before
	this.End = end
	this.Id = id
	this.Label = label
	this.Start = start
	this.Type = type_
	return &this
}

// NewNeo4jCaptureDataChangeRelationshipPayloadWithDefaults instantiates a new Neo4jCaptureDataChangeRelationshipPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNeo4jCaptureDataChangeRelationshipPayloadWithDefaults() *Neo4jCaptureDataChangeRelationshipPayload {
	this := Neo4jCaptureDataChangeRelationshipPayload{}
	return &this
}

// GetAfter returns the After field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetAfter() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.After
}

// GetAfterOk returns a tuple with the After field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetAfterOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.After, true
}

// SetAfter sets field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) SetAfter(v map[string]interface{}) {
	o.After = v
}

// GetBefore returns the Before field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetBefore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Before
}

// GetBeforeOk returns a tuple with the Before field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetBeforeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Before, true
}

// SetBefore sets field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) SetBefore(v string) {
	o.Before = v
}

// GetEnd returns the End field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetEnd() Neo4jCaptureDataChangeRelationshipPayloadEnd {
	if o == nil {
		var ret Neo4jCaptureDataChangeRelationshipPayloadEnd
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetEndOk() (*Neo4jCaptureDataChangeRelationshipPayloadEnd, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) SetEnd(v Neo4jCaptureDataChangeRelationshipPayloadEnd) {
	o.End = v
}

// GetId returns the Id field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) SetId(v string) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) SetLabel(v string) {
	o.Label = v
}

// GetStart returns the Start field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetStart() Neo4jCaptureDataChangeRelationshipPayloadEnd {
	if o == nil {
		var ret Neo4jCaptureDataChangeRelationshipPayloadEnd
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetStartOk() (*Neo4jCaptureDataChangeRelationshipPayloadEnd, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) SetStart(v Neo4jCaptureDataChangeRelationshipPayloadEnd) {
	o.Start = v
}

// GetType returns the Type field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChangeRelationshipPayload) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Neo4jCaptureDataChangeRelationshipPayload) SetType(v string) {
	o.Type = v
}

func (o Neo4jCaptureDataChangeRelationshipPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Neo4jCaptureDataChangeRelationshipPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["after"] = o.After
	toSerialize["before"] = o.Before
	toSerialize["end"] = o.End
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["start"] = o.Start
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *Neo4jCaptureDataChangeRelationshipPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"after",
		"before",
		"end",
		"id",
		"label",
		"start",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNeo4jCaptureDataChangeRelationshipPayload := _Neo4jCaptureDataChangeRelationshipPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNeo4jCaptureDataChangeRelationshipPayload)

	if err != nil {
		return err
	}

	*o = Neo4jCaptureDataChangeRelationshipPayload(varNeo4jCaptureDataChangeRelationshipPayload)

	return err
}

type NullableNeo4jCaptureDataChangeRelationshipPayload struct {
	value *Neo4jCaptureDataChangeRelationshipPayload
	isSet bool
}

func (v NullableNeo4jCaptureDataChangeRelationshipPayload) Get() *Neo4jCaptureDataChangeRelationshipPayload {
	return v.value
}

func (v *NullableNeo4jCaptureDataChangeRelationshipPayload) Set(val *Neo4jCaptureDataChangeRelationshipPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableNeo4jCaptureDataChangeRelationshipPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableNeo4jCaptureDataChangeRelationshipPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeo4jCaptureDataChangeRelationshipPayload(val *Neo4jCaptureDataChangeRelationshipPayload) *NullableNeo4jCaptureDataChangeRelationshipPayload {
	return &NullableNeo4jCaptureDataChangeRelationshipPayload{value: val, isSet: true}
}

func (v NullableNeo4jCaptureDataChangeRelationshipPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeo4jCaptureDataChangeRelationshipPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


