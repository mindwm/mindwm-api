/*
Mindwm API

This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package MindWM

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// Neo4jCaptureDataChangePayload - struct for Neo4jCaptureDataChangePayload
type Neo4jCaptureDataChangePayload struct {
	Neo4jCaptureDataChangeNodePayload *Neo4jCaptureDataChangeNodePayload
	Neo4jCaptureDataChangeRelationshipPayload *Neo4jCaptureDataChangeRelationshipPayload
}

// Neo4jCaptureDataChangeNodePayloadAsNeo4jCaptureDataChangePayload is a convenience function that returns Neo4jCaptureDataChangeNodePayload wrapped in Neo4jCaptureDataChangePayload
func Neo4jCaptureDataChangeNodePayloadAsNeo4jCaptureDataChangePayload(v *Neo4jCaptureDataChangeNodePayload) Neo4jCaptureDataChangePayload {
	return Neo4jCaptureDataChangePayload{
		Neo4jCaptureDataChangeNodePayload: v,
	}
}

// Neo4jCaptureDataChangeRelationshipPayloadAsNeo4jCaptureDataChangePayload is a convenience function that returns Neo4jCaptureDataChangeRelationshipPayload wrapped in Neo4jCaptureDataChangePayload
func Neo4jCaptureDataChangeRelationshipPayloadAsNeo4jCaptureDataChangePayload(v *Neo4jCaptureDataChangeRelationshipPayload) Neo4jCaptureDataChangePayload {
	return Neo4jCaptureDataChangePayload{
		Neo4jCaptureDataChangeRelationshipPayload: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Neo4jCaptureDataChangePayload) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Neo4jCaptureDataChangeNodePayload
	err = newStrictDecoder(data).Decode(&dst.Neo4jCaptureDataChangeNodePayload)
	if err == nil {
		jsonNeo4jCaptureDataChangeNodePayload, _ := json.Marshal(dst.Neo4jCaptureDataChangeNodePayload)
		if string(jsonNeo4jCaptureDataChangeNodePayload) == "{}" { // empty struct
			dst.Neo4jCaptureDataChangeNodePayload = nil
		} else {
			if err = validator.Validate(dst.Neo4jCaptureDataChangeNodePayload); err != nil {
				dst.Neo4jCaptureDataChangeNodePayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.Neo4jCaptureDataChangeNodePayload = nil
	}

	// try to unmarshal data into Neo4jCaptureDataChangeRelationshipPayload
	err = newStrictDecoder(data).Decode(&dst.Neo4jCaptureDataChangeRelationshipPayload)
	if err == nil {
		jsonNeo4jCaptureDataChangeRelationshipPayload, _ := json.Marshal(dst.Neo4jCaptureDataChangeRelationshipPayload)
		if string(jsonNeo4jCaptureDataChangeRelationshipPayload) == "{}" { // empty struct
			dst.Neo4jCaptureDataChangeRelationshipPayload = nil
		} else {
			if err = validator.Validate(dst.Neo4jCaptureDataChangeRelationshipPayload); err != nil {
				dst.Neo4jCaptureDataChangeRelationshipPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.Neo4jCaptureDataChangeRelationshipPayload = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Neo4jCaptureDataChangeNodePayload = nil
		dst.Neo4jCaptureDataChangeRelationshipPayload = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Neo4jCaptureDataChangePayload)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Neo4jCaptureDataChangePayload)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Neo4jCaptureDataChangePayload) MarshalJSON() ([]byte, error) {
	if src.Neo4jCaptureDataChangeNodePayload != nil {
		return json.Marshal(&src.Neo4jCaptureDataChangeNodePayload)
	}

	if src.Neo4jCaptureDataChangeRelationshipPayload != nil {
		return json.Marshal(&src.Neo4jCaptureDataChangeRelationshipPayload)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Neo4jCaptureDataChangePayload) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Neo4jCaptureDataChangeNodePayload != nil {
		return obj.Neo4jCaptureDataChangeNodePayload
	}

	if obj.Neo4jCaptureDataChangeRelationshipPayload != nil {
		return obj.Neo4jCaptureDataChangeRelationshipPayload
	}

	// all schemas are nil
	return nil
}

type NullableNeo4jCaptureDataChangePayload struct {
	value *Neo4jCaptureDataChangePayload
	isSet bool
}

func (v NullableNeo4jCaptureDataChangePayload) Get() *Neo4jCaptureDataChangePayload {
	return v.value
}

func (v *NullableNeo4jCaptureDataChangePayload) Set(val *Neo4jCaptureDataChangePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableNeo4jCaptureDataChangePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableNeo4jCaptureDataChangePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeo4jCaptureDataChangePayload(val *Neo4jCaptureDataChangePayload) *NullableNeo4jCaptureDataChangePayload {
	return &NullableNeo4jCaptureDataChangePayload{value: val, isSet: true}
}

func (v NullableNeo4jCaptureDataChangePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeo4jCaptureDataChangePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


