/*
Mindwm API

This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package MindwWM

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Neo4jCaptureDataChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Neo4jCaptureDataChange{}

// Neo4jCaptureDataChange struct for Neo4jCaptureDataChange
type Neo4jCaptureDataChange struct {
	Headers map[string]interface{} `json:"headers"`
	MessageKey string `json:"message_key"`
	Meta Neo4jCaptureDataChangeMeta `json:"meta"`
	Offset int32 `json:"offset"`
	Partition int32 `json:"partition"`
	SourceType string `json:"source_type"`
	Timestamp time.Time `json:"timestamp"`
	Topic string `json:"topic"`
	Schema Neo4jCaptureDataChangeSchema `json:"schema"`
	Payload Neo4jCaptureDataChangePayload `json:"payload"`
}

type _Neo4jCaptureDataChange Neo4jCaptureDataChange

// NewNeo4jCaptureDataChange instantiates a new Neo4jCaptureDataChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNeo4jCaptureDataChange(headers map[string]interface{}, messageKey string, meta Neo4jCaptureDataChangeMeta, offset int32, partition int32, sourceType string, timestamp time.Time, topic string, schema Neo4jCaptureDataChangeSchema, payload Neo4jCaptureDataChangePayload) *Neo4jCaptureDataChange {
	this := Neo4jCaptureDataChange{}
	this.Headers = headers
	this.MessageKey = messageKey
	this.Meta = meta
	this.Offset = offset
	this.Partition = partition
	this.SourceType = sourceType
	this.Timestamp = timestamp
	this.Topic = topic
	this.Schema = schema
	this.Payload = payload
	return &this
}

// NewNeo4jCaptureDataChangeWithDefaults instantiates a new Neo4jCaptureDataChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNeo4jCaptureDataChangeWithDefaults() *Neo4jCaptureDataChange {
	this := Neo4jCaptureDataChange{}
	return &this
}

// GetHeaders returns the Headers field value
func (o *Neo4jCaptureDataChange) GetHeaders() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChange) GetHeadersOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Headers, true
}

// SetHeaders sets field value
func (o *Neo4jCaptureDataChange) SetHeaders(v map[string]interface{}) {
	o.Headers = v
}

// GetMessageKey returns the MessageKey field value
func (o *Neo4jCaptureDataChange) GetMessageKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageKey
}

// GetMessageKeyOk returns a tuple with the MessageKey field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChange) GetMessageKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageKey, true
}

// SetMessageKey sets field value
func (o *Neo4jCaptureDataChange) SetMessageKey(v string) {
	o.MessageKey = v
}

// GetMeta returns the Meta field value
func (o *Neo4jCaptureDataChange) GetMeta() Neo4jCaptureDataChangeMeta {
	if o == nil {
		var ret Neo4jCaptureDataChangeMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChange) GetMetaOk() (*Neo4jCaptureDataChangeMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *Neo4jCaptureDataChange) SetMeta(v Neo4jCaptureDataChangeMeta) {
	o.Meta = v
}

// GetOffset returns the Offset field value
func (o *Neo4jCaptureDataChange) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChange) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *Neo4jCaptureDataChange) SetOffset(v int32) {
	o.Offset = v
}

// GetPartition returns the Partition field value
func (o *Neo4jCaptureDataChange) GetPartition() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChange) GetPartitionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Partition, true
}

// SetPartition sets field value
func (o *Neo4jCaptureDataChange) SetPartition(v int32) {
	o.Partition = v
}

// GetSourceType returns the SourceType field value
func (o *Neo4jCaptureDataChange) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChange) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *Neo4jCaptureDataChange) SetSourceType(v string) {
	o.SourceType = v
}

// GetTimestamp returns the Timestamp field value
func (o *Neo4jCaptureDataChange) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChange) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Neo4jCaptureDataChange) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetTopic returns the Topic field value
func (o *Neo4jCaptureDataChange) GetTopic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChange) GetTopicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Topic, true
}

// SetTopic sets field value
func (o *Neo4jCaptureDataChange) SetTopic(v string) {
	o.Topic = v
}

// GetSchema returns the Schema field value
func (o *Neo4jCaptureDataChange) GetSchema() Neo4jCaptureDataChangeSchema {
	if o == nil {
		var ret Neo4jCaptureDataChangeSchema
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChange) GetSchemaOk() (*Neo4jCaptureDataChangeSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schema, true
}

// SetSchema sets field value
func (o *Neo4jCaptureDataChange) SetSchema(v Neo4jCaptureDataChangeSchema) {
	o.Schema = v
}

// GetPayload returns the Payload field value
func (o *Neo4jCaptureDataChange) GetPayload() Neo4jCaptureDataChangePayload {
	if o == nil {
		var ret Neo4jCaptureDataChangePayload
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *Neo4jCaptureDataChange) GetPayloadOk() (*Neo4jCaptureDataChangePayload, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *Neo4jCaptureDataChange) SetPayload(v Neo4jCaptureDataChangePayload) {
	o.Payload = v
}

func (o Neo4jCaptureDataChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Neo4jCaptureDataChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["headers"] = o.Headers
	toSerialize["message_key"] = o.MessageKey
	toSerialize["meta"] = o.Meta
	toSerialize["offset"] = o.Offset
	toSerialize["partition"] = o.Partition
	toSerialize["source_type"] = o.SourceType
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["topic"] = o.Topic
	toSerialize["schema"] = o.Schema
	toSerialize["payload"] = o.Payload
	return toSerialize, nil
}

func (o *Neo4jCaptureDataChange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"headers",
		"message_key",
		"meta",
		"offset",
		"partition",
		"source_type",
		"timestamp",
		"topic",
		"schema",
		"payload",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNeo4jCaptureDataChange := _Neo4jCaptureDataChange{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNeo4jCaptureDataChange)

	if err != nil {
		return err
	}

	*o = Neo4jCaptureDataChange(varNeo4jCaptureDataChange)

	return err
}

type NullableNeo4jCaptureDataChange struct {
	value *Neo4jCaptureDataChange
	isSet bool
}

func (v NullableNeo4jCaptureDataChange) Get() *Neo4jCaptureDataChange {
	return v.value
}

func (v *NullableNeo4jCaptureDataChange) Set(val *Neo4jCaptureDataChange) {
	v.value = val
	v.isSet = true
}

func (v NullableNeo4jCaptureDataChange) IsSet() bool {
	return v.isSet
}

func (v *NullableNeo4jCaptureDataChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeo4jCaptureDataChange(val *Neo4jCaptureDataChange) *NullableNeo4jCaptureDataChange {
	return &NullableNeo4jCaptureDataChange{value: val, isSet: true}
}

func (v NullableNeo4jCaptureDataChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeo4jCaptureDataChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


