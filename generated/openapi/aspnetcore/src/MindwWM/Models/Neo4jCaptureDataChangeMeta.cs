/*
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using MindwWM.Converters;

namespace MindwWM.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Neo4jCaptureDataChangeMeta : IEquatable<Neo4jCaptureDataChangeMeta>
    {
        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [Required]
        [DataMember(Name="operation", EmitDefaultValue=false)]
        public string Operation { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [Required]
        [DataMember(Name="source", EmitDefaultValue=false)]
        public Neo4jCaptureDataChangeMetaSource Source { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [Required]
        [DataMember(Name="timestamp", EmitDefaultValue=true)]
        public int Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets TxEventId
        /// </summary>
        [Required]
        [DataMember(Name="txEventId", EmitDefaultValue=true)]
        public int TxEventId { get; set; }

        /// <summary>
        /// Gets or Sets TxEventsCount
        /// </summary>
        [Required]
        [DataMember(Name="txEventsCount", EmitDefaultValue=true)]
        public int TxEventsCount { get; set; }

        /// <summary>
        /// Gets or Sets TxId
        /// </summary>
        [Required]
        [DataMember(Name="txId", EmitDefaultValue=true)]
        public int TxId { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [Required]
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Neo4jCaptureDataChangeMeta {\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TxEventId: ").Append(TxEventId).Append("\n");
            sb.Append("  TxEventsCount: ").Append(TxEventsCount).Append("\n");
            sb.Append("  TxId: ").Append(TxId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Neo4jCaptureDataChangeMeta)obj);
        }

        /// <summary>
        /// Returns true if Neo4jCaptureDataChangeMeta instances are equal
        /// </summary>
        /// <param name="other">Instance of Neo4jCaptureDataChangeMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Neo4jCaptureDataChangeMeta other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Operation == other.Operation ||
                    Operation != null &&
                    Operation.Equals(other.Operation)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    TxEventId == other.TxEventId ||
                    
                    TxEventId.Equals(other.TxEventId)
                ) && 
                (
                    TxEventsCount == other.TxEventsCount ||
                    
                    TxEventsCount.Equals(other.TxEventsCount)
                ) && 
                (
                    TxId == other.TxId ||
                    
                    TxId.Equals(other.TxId)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Operation != null)
                    hashCode = hashCode * 59 + Operation.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    
                    hashCode = hashCode * 59 + TxEventId.GetHashCode();
                    
                    hashCode = hashCode * 59 + TxEventsCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + TxId.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Neo4jCaptureDataChangeMeta left, Neo4jCaptureDataChangeMeta right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Neo4jCaptureDataChangeMeta left, Neo4jCaptureDataChangeMeta right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
