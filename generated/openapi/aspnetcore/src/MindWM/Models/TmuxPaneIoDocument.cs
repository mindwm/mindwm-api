/*
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using MindWM.Converters;

namespace MindWM.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TmuxPaneIoDocument : IEquatable<TmuxPaneIoDocument>
    {
        /// <summary>
        /// User input
        /// </summary>
        /// <value>User input</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="input", EmitDefaultValue=false)]
        public string Input { get; set; }

        /// <summary>
        /// Command output (mix of stdout &amp; stderr)
        /// </summary>
        /// <value>Command output (mix of stdout &amp; stderr)</value>
        [Required]
        [MinLength(0)]
        [DataMember(Name="output", EmitDefaultValue=false)]
        public string Output { get; set; }

        /// <summary>
        /// ps1 (prompt) AFTER the input and output
        /// </summary>
        /// <value>ps1 (prompt) AFTER the input and output</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="ps1", EmitDefaultValue=false)]
        public string Ps1 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TmuxPaneIoDocument {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  Ps1: ").Append(Ps1).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TmuxPaneIoDocument)obj);
        }

        /// <summary>
        /// Returns true if TmuxPaneIoDocument instances are equal
        /// </summary>
        /// <param name="other">Instance of TmuxPaneIoDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TmuxPaneIoDocument other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Input == other.Input ||
                    Input != null &&
                    Input.Equals(other.Input)
                ) && 
                (
                    Output == other.Output ||
                    Output != null &&
                    Output.Equals(other.Output)
                ) && 
                (
                    Ps1 == other.Ps1 ||
                    Ps1 != null &&
                    Ps1.Equals(other.Ps1)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Input != null)
                    hashCode = hashCode * 59 + Input.GetHashCode();
                    if (Output != null)
                    hashCode = hashCode * 59 + Output.GetHashCode();
                    if (Ps1 != null)
                    hashCode = hashCode * 59 + Ps1.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TmuxPaneIoDocument left, TmuxPaneIoDocument right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TmuxPaneIoDocument left, TmuxPaneIoDocument right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
