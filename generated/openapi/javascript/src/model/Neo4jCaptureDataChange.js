/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Neo4jCaptureDataChangeMeta from './Neo4jCaptureDataChangeMeta';
import Neo4jCaptureDataChangePayload from './Neo4jCaptureDataChangePayload';
import Neo4jCaptureDataChangeSchema from './Neo4jCaptureDataChangeSchema';

/**
 * The Neo4jCaptureDataChange model module.
 * @module model/Neo4jCaptureDataChange
 * @version 0.1.0
 */
class Neo4jCaptureDataChange {
    /**
     * Constructs a new <code>Neo4jCaptureDataChange</code>.
     * @alias module:model/Neo4jCaptureDataChange
     * @param headers {Object.<String, Object>} 
     * @param messageKey {String} 
     * @param meta {module:model/Neo4jCaptureDataChangeMeta} 
     * @param offset {Number} 
     * @param partition {Number} 
     * @param sourceType {String} 
     * @param timestamp {Date} 
     * @param topic {String} 
     * @param schema {module:model/Neo4jCaptureDataChangeSchema} 
     * @param payload {module:model/Neo4jCaptureDataChangePayload} 
     */
    constructor(headers, messageKey, meta, offset, partition, sourceType, timestamp, topic, schema, payload) { 
        
        Neo4jCaptureDataChange.initialize(this, headers, messageKey, meta, offset, partition, sourceType, timestamp, topic, schema, payload);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, headers, messageKey, meta, offset, partition, sourceType, timestamp, topic, schema, payload) { 
        obj['headers'] = headers;
        obj['message_key'] = messageKey;
        obj['meta'] = meta;
        obj['offset'] = offset;
        obj['partition'] = partition;
        obj['source_type'] = sourceType;
        obj['timestamp'] = timestamp;
        obj['topic'] = topic;
        obj['schema'] = schema;
        obj['payload'] = payload;
    }

    /**
     * Constructs a <code>Neo4jCaptureDataChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Neo4jCaptureDataChange} obj Optional instance to populate.
     * @return {module:model/Neo4jCaptureDataChange} The populated <code>Neo4jCaptureDataChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Neo4jCaptureDataChange();

            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], {'String': Object});
            }
            if (data.hasOwnProperty('message_key')) {
                obj['message_key'] = ApiClient.convertToType(data['message_key'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = Neo4jCaptureDataChangeMeta.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('partition')) {
                obj['partition'] = ApiClient.convertToType(data['partition'], 'Number');
            }
            if (data.hasOwnProperty('source_type')) {
                obj['source_type'] = ApiClient.convertToType(data['source_type'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = Neo4jCaptureDataChangeSchema.constructFromObject(data['schema']);
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = Neo4jCaptureDataChangePayload.constructFromObject(data['payload']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Neo4jCaptureDataChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Neo4jCaptureDataChange</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Neo4jCaptureDataChange.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message_key'] && !(typeof data['message_key'] === 'string' || data['message_key'] instanceof String)) {
            throw new Error("Expected the field `message_key` to be a primitive type in the JSON string but got " + data['message_key']);
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          Neo4jCaptureDataChangeMeta.validateJSON(data['meta']);
        }
        // ensure the json data is a string
        if (data['source_type'] && !(typeof data['source_type'] === 'string' || data['source_type'] instanceof String)) {
            throw new Error("Expected the field `source_type` to be a primitive type in the JSON string but got " + data['source_type']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          Neo4jCaptureDataChangeSchema.validateJSON(data['schema']);
        }
        // validate the optional field `payload`
        if (data['payload']) { // data not null
          Neo4jCaptureDataChangePayload.validateJSON(data['payload']);
        }

        return true;
    }


}

Neo4jCaptureDataChange.RequiredProperties = ["headers", "message_key", "meta", "offset", "partition", "source_type", "timestamp", "topic", "schema", "payload"];

/**
 * @member {Object.<String, Object>} headers
 */
Neo4jCaptureDataChange.prototype['headers'] = undefined;

/**
 * @member {String} message_key
 */
Neo4jCaptureDataChange.prototype['message_key'] = undefined;

/**
 * @member {module:model/Neo4jCaptureDataChangeMeta} meta
 */
Neo4jCaptureDataChange.prototype['meta'] = undefined;

/**
 * @member {Number} offset
 */
Neo4jCaptureDataChange.prototype['offset'] = undefined;

/**
 * @member {Number} partition
 */
Neo4jCaptureDataChange.prototype['partition'] = undefined;

/**
 * @member {String} source_type
 */
Neo4jCaptureDataChange.prototype['source_type'] = undefined;

/**
 * @member {Date} timestamp
 */
Neo4jCaptureDataChange.prototype['timestamp'] = undefined;

/**
 * @member {String} topic
 */
Neo4jCaptureDataChange.prototype['topic'] = undefined;

/**
 * @member {module:model/Neo4jCaptureDataChangeSchema} schema
 */
Neo4jCaptureDataChange.prototype['schema'] = undefined;

/**
 * @member {module:model/Neo4jCaptureDataChangePayload} payload
 */
Neo4jCaptureDataChange.prototype['payload'] = undefined;






export default Neo4jCaptureDataChange;

