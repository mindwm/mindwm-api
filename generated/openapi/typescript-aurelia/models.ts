/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface Clipboard extends any {
  /**
   * Identifies the event.
   */
  id: string;
  source: string;
  /**
   * The version of the CloudEvents specification which the event uses.
   */
  specversion: string;
  type: string;
  /**
   * Content type of the data value. Must adhere to RFC 2046 format.
   */
  datacontenttype?: string;
  /**
   * Identifies the schema that data adheres to.
   */
  dataschema?: string;
  subject?: string;
  /**
   * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
   */
  time?: string;
  data?: ClipboardPayload;
  /**
   * Base64 encoded event payload. Must adhere to RFC4648.
   */
  data_base64?: string;
}


export interface ClipboardPayload {
  /**
   * Starting position of clipboard selection [x,y]
   */
  start?: Array<number>;
  /**
   * Ending position of clipboard selection [x,y]
   */
  stop?: Array<number>;
  /**
   * Clipboard data
   */
  data?: string;
  /**
   * Clipboard type
   */
  type?: ClipboardPayloadTypeEnum;
  context?: ClipboardPayloadContext;
}

/**
 * Enum for the type property.
 */
export type ClipboardPayloadTypeEnum = 'primary' | 'secondary' | 'clipboard';


/**
 * Selection context
 */
export interface ClipboardPayloadContext {
  /**
   * window id
   */
  window?: string;
}


/**
 * CloudEvents Specification JSON Schema
 */
export interface CloudEvent {
  /**
   * Identifies the event.
   */
  id: string;
  /**
   * Identifies the context in which an event happened.
   */
  source: string;
  /**
   * The version of the CloudEvents specification which the event uses.
   */
  specversion: string;
  /**
   * Describes the type of event related to the originating occurrence.
   */
  type: string;
  /**
   * Content type of the data value. Must adhere to RFC 2046 format.
   */
  datacontenttype?: string;
  /**
   * Identifies the schema that data adheres to.
   */
  dataschema?: string;
  /**
   * Describes the subject of the event in the context of the event producer (identified by source).
   */
  subject?: string;
  /**
   * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
   */
  time?: string;
  data?: CloudEventData;
  /**
   * Base64 encoded event payload. Must adhere to RFC4648.
   */
  data_base64?: string;
}


/**
 * The event payload.
 */
export interface CloudEventData {
}


export interface GraphNode extends any {
  /**
   * Identifies the event.
   */
  id: string;
  source: GraphNodeSourceEnum;
  /**
   * The version of the CloudEvents specification which the event uses.
   */
  specversion: string;
  type: GraphNodeTypeEnum;
  /**
   * Content type of the data value. Must adhere to RFC 2046 format.
   */
  datacontenttype?: string;
  /**
   * Identifies the schema that data adheres to.
   */
  dataschema?: string;
  /**
   * Describes the subject of the event in the context of the event producer (identified by source).
   */
  subject?: string;
  /**
   * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
   */
  time?: string;
  data?: GraphNodeAllOfData;
  /**
   * Base64 encoded event payload. Must adhere to RFC4648.
   */
  data_base64?: string;
}

/**
 * Enum for the source property.
 */
export type GraphNodeSourceEnum = 'graph.node' | 'graph.relationship';

/**
 * Enum for the type property.
 */
export type GraphNodeTypeEnum = 'created' | 'updated' | 'deleted';


export interface GraphNodeAllOfData {
  headers: object;
  message_key: string;
  meta: Neo4jCaptureDataChangeMeta;
  offset: number;
  partition: number;
  source_type: string;
  timestamp: string;
  topic: string;
  schema: Neo4jCaptureDataChangeSchema;
  payload: Neo4jCaptureDataChangeNodePayload;
}


export interface GraphRelationship extends any {
  /**
   * Identifies the event.
   */
  id: string;
  source: GraphRelationshipSourceEnum;
  /**
   * The version of the CloudEvents specification which the event uses.
   */
  specversion: string;
  type: GraphRelationshipTypeEnum;
  /**
   * Content type of the data value. Must adhere to RFC 2046 format.
   */
  datacontenttype?: string;
  /**
   * Identifies the schema that data adheres to.
   */
  dataschema?: string;
  /**
   * Describes the subject of the event in the context of the event producer (identified by source).
   */
  subject?: string;
  /**
   * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
   */
  time?: string;
  data?: GraphRelationshipAllOfData;
  /**
   * Base64 encoded event payload. Must adhere to RFC4648.
   */
  data_base64?: string;
}

/**
 * Enum for the source property.
 */
export type GraphRelationshipSourceEnum = 'graph.relationship';

/**
 * Enum for the type property.
 */
export type GraphRelationshipTypeEnum = 'created' | 'updated' | 'deleted';


export interface GraphRelationshipAllOfData {
  headers: object;
  message_key: string;
  meta: Neo4jCaptureDataChangeMeta;
  offset: number;
  partition: number;
  source_type: string;
  timestamp: string;
  topic: string;
  schema: Neo4jCaptureDataChangeSchema;
  payload: Neo4jCaptureDataChangeRelationshipPayload;
}


export interface IoDocument extends any {
  /**
   * Identifies the event.
   */
  id: string;
  source: string;
  /**
   * The version of the CloudEvents specification which the event uses.
   */
  specversion: string;
  type: string;
  /**
   * Content type of the data value. Must adhere to RFC 2046 format.
   */
  datacontenttype?: string;
  /**
   * Identifies the schema that data adheres to.
   */
  dataschema?: string;
  subject?: string;
  /**
   * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
   */
  time?: string;
  data?: TmuxPaneIoDocument;
  /**
   * Base64 encoded event payload. Must adhere to RFC4648.
   */
  data_base64?: string;
}


export interface Neo4jCaptureDataChange {
  headers: { [key: string]: any; };
  message_key: string;
  meta: Neo4jCaptureDataChangeMeta;
  offset: number;
  partition: number;
  source_type: string;
  timestamp: string;
  topic: string;
  schema: Neo4jCaptureDataChangeSchema;
  payload: Neo4jCaptureDataChangePayload;
}


export interface Neo4jCaptureDataChangeMeta {
  operation: string;
  source: Neo4jCaptureDataChangeMetaSource;
  timestamp: number;
  txEventId: number;
  txEventsCount: number;
  txId: number;
  username: string;
}


export interface Neo4jCaptureDataChangeMetaSource {
  hostname: string;
}


export interface Neo4jCaptureDataChangeNodePayload {
  after: Neo4jCaptureDataChangeNodePayloadAfter;
  before: string;
  id: string;
  type: string;
}


export interface Neo4jCaptureDataChangeNodePayloadAfter {
  labels: Array<string>;
  properties: { [key: string]: any; };
}

/**
 * @type Neo4jCaptureDataChangePayload
 * @export
 */
export type Neo4jCaptureDataChangePayload = Neo4jCaptureDataChangeNodePayload | Neo4jCaptureDataChangeRelationshipPayload;


export interface Neo4jCaptureDataChangeRelationshipPayload {
  after: object;
  before: string;
  end: Neo4jCaptureDataChangeRelationshipPayloadEnd;
  id: string;
  label: string;
  start: Neo4jCaptureDataChangeRelationshipPayloadEnd;
  type: string;
}


export interface Neo4jCaptureDataChangeRelationshipPayloadEnd {
  id: string;
  ids: { [key: string]: any; };
  labels: Array<string>;
}


export interface Neo4jCaptureDataChangeSchema {
  constraints?: { [key: string]: any; };
  properties?: { [key: string]: any; };
}


export interface TmuxPaneIoDocument extends any {
  /**
   * User input
   */
  input: string;
  /**
   * Command output (mix of stdout & stderr)
   */
  output: string;
  /**
   * ps1 (prompt) AFTER the input and output
   */
  ps1: string;
}

