from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from MindwWM.models.base_model import Model
from MindwWM.models.neo4j_capture_data_change_relationship_payload_end import Neo4jCaptureDataChangeRelationshipPayloadEnd
from MindwWM import util

from MindwWM.models.neo4j_capture_data_change_relationship_payload_end import Neo4jCaptureDataChangeRelationshipPayloadEnd  # noqa: E501

class Neo4jCaptureDataChangeRelationshipPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after=None, before=None, end=None, id=None, label=None, start=None, type=None):  # noqa: E501
        """Neo4jCaptureDataChangeRelationshipPayload - a model defined in OpenAPI

        :param after: The after of this Neo4jCaptureDataChangeRelationshipPayload.  # noqa: E501
        :type after: object
        :param before: The before of this Neo4jCaptureDataChangeRelationshipPayload.  # noqa: E501
        :type before: str
        :param end: The end of this Neo4jCaptureDataChangeRelationshipPayload.  # noqa: E501
        :type end: Neo4jCaptureDataChangeRelationshipPayloadEnd
        :param id: The id of this Neo4jCaptureDataChangeRelationshipPayload.  # noqa: E501
        :type id: str
        :param label: The label of this Neo4jCaptureDataChangeRelationshipPayload.  # noqa: E501
        :type label: str
        :param start: The start of this Neo4jCaptureDataChangeRelationshipPayload.  # noqa: E501
        :type start: Neo4jCaptureDataChangeRelationshipPayloadEnd
        :param type: The type of this Neo4jCaptureDataChangeRelationshipPayload.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'after': object,
            'before': str,
            'end': Neo4jCaptureDataChangeRelationshipPayloadEnd,
            'id': str,
            'label': str,
            'start': Neo4jCaptureDataChangeRelationshipPayloadEnd,
            'type': str
        }

        self.attribute_map = {
            'after': 'after',
            'before': 'before',
            'end': 'end',
            'id': 'id',
            'label': 'label',
            'start': 'start',
            'type': 'type'
        }

        self._after = after
        self._before = before
        self._end = end
        self._id = id
        self._label = label
        self._start = start
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Neo4jCaptureDataChangeRelationshipPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Neo4jCaptureDataChangeRelationshipPayload of this Neo4jCaptureDataChangeRelationshipPayload.  # noqa: E501
        :rtype: Neo4jCaptureDataChangeRelationshipPayload
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after(self) -> object:
        """Gets the after of this Neo4jCaptureDataChangeRelationshipPayload.


        :return: The after of this Neo4jCaptureDataChangeRelationshipPayload.
        :rtype: object
        """
        return self._after

    @after.setter
    def after(self, after: object):
        """Sets the after of this Neo4jCaptureDataChangeRelationshipPayload.


        :param after: The after of this Neo4jCaptureDataChangeRelationshipPayload.
        :type after: object
        """
        if after is None:
            raise ValueError("Invalid value for `after`, must not be `None`")  # noqa: E501

        self._after = after

    @property
    def before(self) -> str:
        """Gets the before of this Neo4jCaptureDataChangeRelationshipPayload.


        :return: The before of this Neo4jCaptureDataChangeRelationshipPayload.
        :rtype: str
        """
        return self._before

    @before.setter
    def before(self, before: str):
        """Sets the before of this Neo4jCaptureDataChangeRelationshipPayload.


        :param before: The before of this Neo4jCaptureDataChangeRelationshipPayload.
        :type before: str
        """
        if before is None:
            raise ValueError("Invalid value for `before`, must not be `None`")  # noqa: E501

        self._before = before

    @property
    def end(self) -> Neo4jCaptureDataChangeRelationshipPayloadEnd:
        """Gets the end of this Neo4jCaptureDataChangeRelationshipPayload.


        :return: The end of this Neo4jCaptureDataChangeRelationshipPayload.
        :rtype: Neo4jCaptureDataChangeRelationshipPayloadEnd
        """
        return self._end

    @end.setter
    def end(self, end: Neo4jCaptureDataChangeRelationshipPayloadEnd):
        """Sets the end of this Neo4jCaptureDataChangeRelationshipPayload.


        :param end: The end of this Neo4jCaptureDataChangeRelationshipPayload.
        :type end: Neo4jCaptureDataChangeRelationshipPayloadEnd
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def id(self) -> str:
        """Gets the id of this Neo4jCaptureDataChangeRelationshipPayload.


        :return: The id of this Neo4jCaptureDataChangeRelationshipPayload.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Neo4jCaptureDataChangeRelationshipPayload.


        :param id: The id of this Neo4jCaptureDataChangeRelationshipPayload.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def label(self) -> str:
        """Gets the label of this Neo4jCaptureDataChangeRelationshipPayload.


        :return: The label of this Neo4jCaptureDataChangeRelationshipPayload.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """Sets the label of this Neo4jCaptureDataChangeRelationshipPayload.


        :param label: The label of this Neo4jCaptureDataChangeRelationshipPayload.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def start(self) -> Neo4jCaptureDataChangeRelationshipPayloadEnd:
        """Gets the start of this Neo4jCaptureDataChangeRelationshipPayload.


        :return: The start of this Neo4jCaptureDataChangeRelationshipPayload.
        :rtype: Neo4jCaptureDataChangeRelationshipPayloadEnd
        """
        return self._start

    @start.setter
    def start(self, start: Neo4jCaptureDataChangeRelationshipPayloadEnd):
        """Sets the start of this Neo4jCaptureDataChangeRelationshipPayload.


        :param start: The start of this Neo4jCaptureDataChangeRelationshipPayload.
        :type start: Neo4jCaptureDataChangeRelationshipPayloadEnd
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def type(self) -> str:
        """Gets the type of this Neo4jCaptureDataChangeRelationshipPayload.


        :return: The type of this Neo4jCaptureDataChangeRelationshipPayload.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Neo4jCaptureDataChangeRelationshipPayload.


        :param type: The type of this Neo4jCaptureDataChangeRelationshipPayload.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
