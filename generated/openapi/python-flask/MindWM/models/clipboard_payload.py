from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from MindWM.models.base_model import Model
from MindWM.models.clipboard_payload_context import ClipboardPayloadContext
from MindWM import util

from MindWM.models.clipboard_payload_context import ClipboardPayloadContext  # noqa: E501

class ClipboardPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start=None, stop=None, data=None, type=None, context=None):  # noqa: E501
        """ClipboardPayload - a model defined in OpenAPI

        :param start: The start of this ClipboardPayload.  # noqa: E501
        :type start: List[int]
        :param stop: The stop of this ClipboardPayload.  # noqa: E501
        :type stop: List[int]
        :param data: The data of this ClipboardPayload.  # noqa: E501
        :type data: str
        :param type: The type of this ClipboardPayload.  # noqa: E501
        :type type: str
        :param context: The context of this ClipboardPayload.  # noqa: E501
        :type context: ClipboardPayloadContext
        """
        self.openapi_types = {
            'start': List[int],
            'stop': List[int],
            'data': str,
            'type': str,
            'context': ClipboardPayloadContext
        }

        self.attribute_map = {
            'start': 'start',
            'stop': 'stop',
            'data': 'data',
            'type': 'type',
            'context': 'context'
        }

        self._start = start
        self._stop = stop
        self._data = data
        self._type = type
        self._context = context

    @classmethod
    def from_dict(cls, dikt) -> 'ClipboardPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClipboardPayload of this ClipboardPayload.  # noqa: E501
        :rtype: ClipboardPayload
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start(self) -> List[int]:
        """Gets the start of this ClipboardPayload.

        Starting position of clipboard selection [x,y]  # noqa: E501

        :return: The start of this ClipboardPayload.
        :rtype: List[int]
        """
        return self._start

    @start.setter
    def start(self, start: List[int]):
        """Sets the start of this ClipboardPayload.

        Starting position of clipboard selection [x,y]  # noqa: E501

        :param start: The start of this ClipboardPayload.
        :type start: List[int]
        """
        if start is not None and len(start) > 2:
            raise ValueError("Invalid value for `start`, number of items must be less than or equal to `2`")  # noqa: E501
        if start is not None and len(start) < 2:
            raise ValueError("Invalid value for `start`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._start = start

    @property
    def stop(self) -> List[int]:
        """Gets the stop of this ClipboardPayload.

        Ending position of clipboard selection [x,y]  # noqa: E501

        :return: The stop of this ClipboardPayload.
        :rtype: List[int]
        """
        return self._stop

    @stop.setter
    def stop(self, stop: List[int]):
        """Sets the stop of this ClipboardPayload.

        Ending position of clipboard selection [x,y]  # noqa: E501

        :param stop: The stop of this ClipboardPayload.
        :type stop: List[int]
        """
        if stop is not None and len(stop) > 2:
            raise ValueError("Invalid value for `stop`, number of items must be less than or equal to `2`")  # noqa: E501
        if stop is not None and len(stop) < 2:
            raise ValueError("Invalid value for `stop`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._stop = stop

    @property
    def data(self) -> str:
        """Gets the data of this ClipboardPayload.

        Clipboard data  # noqa: E501

        :return: The data of this ClipboardPayload.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this ClipboardPayload.

        Clipboard data  # noqa: E501

        :param data: The data of this ClipboardPayload.
        :type data: str
        """
        if data is not None and len(data) < 1:
            raise ValueError("Invalid value for `data`, length must be greater than or equal to `1`")  # noqa: E501

        self._data = data

    @property
    def type(self) -> str:
        """Gets the type of this ClipboardPayload.

        Clipboard type  # noqa: E501

        :return: The type of this ClipboardPayload.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ClipboardPayload.

        Clipboard type  # noqa: E501

        :param type: The type of this ClipboardPayload.
        :type type: str
        """
        allowed_values = ["primary", "secondary", "clipboard"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def context(self) -> ClipboardPayloadContext:
        """Gets the context of this ClipboardPayload.


        :return: The context of this ClipboardPayload.
        :rtype: ClipboardPayloadContext
        """
        return self._context

    @context.setter
    def context(self, context: ClipboardPayloadContext):
        """Sets the context of this ClipboardPayload.


        :param context: The context of this ClipboardPayload.
        :type context: ClipboardPayloadContext
        """

        self._context = context
