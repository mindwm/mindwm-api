//
// CloudEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** CloudEvents Specification JSON Schema */
public struct CloudEvent: Codable, JSONEncodable, Hashable {

    static let idRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let sourceRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let specversionRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let typeRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let datacontenttypeRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let dataschemaRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let subjectRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** Identifies the event. */
    public var id: String
    /** Identifies the context in which an event happened. */
    public var source: String
    /** The version of the CloudEvents specification which the event uses. */
    public var specversion: String
    /** Describes the type of event related to the originating occurrence. */
    public var type: String
    /** Content type of the data value. Must adhere to RFC 2046 format. */
    public var datacontenttype: String?
    /** Identifies the schema that data adheres to. */
    public var dataschema: String?
    /** Describes the subject of the event in the context of the event producer (identified by source). */
    public var subject: String?
    /** Timestamp of when the occurrence happened. Must adhere to RFC 3339. */
    public var time: Date?
    public var data: CloudEventData?
    /** Base64 encoded event payload. Must adhere to RFC4648. */
    public var dataBase64: String?

    public init(id: String, source: String, specversion: String, type: String, datacontenttype: String? = nil, dataschema: String? = nil, subject: String? = nil, time: Date? = nil, data: CloudEventData? = nil, dataBase64: String? = nil) {
        self.id = id
        self.source = source
        self.specversion = specversion
        self.type = type
        self.datacontenttype = datacontenttype
        self.dataschema = dataschema
        self.subject = subject
        self.time = time
        self.data = data
        self.dataBase64 = dataBase64
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case source
        case specversion
        case type
        case datacontenttype
        case dataschema
        case subject
        case time
        case data
        case dataBase64 = "data_base64"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(source, forKey: .source)
        try container.encode(specversion, forKey: .specversion)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(datacontenttype, forKey: .datacontenttype)
        try container.encodeIfPresent(dataschema, forKey: .dataschema)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(time, forKey: .time)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(dataBase64, forKey: .dataBase64)
    }
}

