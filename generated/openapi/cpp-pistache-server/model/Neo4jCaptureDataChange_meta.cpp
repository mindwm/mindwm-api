/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Neo4jCaptureDataChange_meta.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Neo4jCaptureDataChange_meta::Neo4jCaptureDataChange_meta()
{
    m_Operation = "";
    m_Timestamp = 0;
    m_TxEventId = 0;
    m_TxEventsCount = 0;
    m_TxId = 0;
    m_Username = "";
    
}

void Neo4jCaptureDataChange_meta::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Neo4jCaptureDataChange_meta::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Neo4jCaptureDataChange_meta::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Neo4jCaptureDataChange_meta" : pathPrefix;

            
    if (!m_Source.validate(msg, _pathPrefix + ".source")) {
        msg << _pathPrefix << ": Source is invalid;";
        success = false;
    }                    
    return success;
}

bool Neo4jCaptureDataChange_meta::operator==(const Neo4jCaptureDataChange_meta& rhs) const
{
    return
    
    
    (getOperation() == rhs.getOperation())
     &&
    
    (getSource() == rhs.getSource())
     &&
    
    (getTimestamp() == rhs.getTimestamp())
     &&
    
    (getTxEventId() == rhs.getTxEventId())
     &&
    
    (getTxEventsCount() == rhs.getTxEventsCount())
     &&
    
    (getTxId() == rhs.getTxId())
     &&
    
    (getUsername() == rhs.getUsername())
    
    
    ;
}

bool Neo4jCaptureDataChange_meta::operator!=(const Neo4jCaptureDataChange_meta& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Neo4jCaptureDataChange_meta& o)
{
    j = nlohmann::json::object();
    j["operation"] = o.m_Operation;
    j["source"] = o.m_Source;
    j["timestamp"] = o.m_Timestamp;
    j["txEventId"] = o.m_TxEventId;
    j["txEventsCount"] = o.m_TxEventsCount;
    j["txId"] = o.m_TxId;
    j["username"] = o.m_Username;
    
}

void from_json(const nlohmann::json& j, Neo4jCaptureDataChange_meta& o)
{
    j.at("operation").get_to(o.m_Operation);
    j.at("source").get_to(o.m_Source);
    j.at("timestamp").get_to(o.m_Timestamp);
    j.at("txEventId").get_to(o.m_TxEventId);
    j.at("txEventsCount").get_to(o.m_TxEventsCount);
    j.at("txId").get_to(o.m_TxId);
    j.at("username").get_to(o.m_Username);
    
}

std::string Neo4jCaptureDataChange_meta::getOperation() const
{
    return m_Operation;
}
void Neo4jCaptureDataChange_meta::setOperation(std::string const& value)
{
    m_Operation = value;
}
org::openapitools::server::model::Neo4jCaptureDataChange_meta_source Neo4jCaptureDataChange_meta::getSource() const
{
    return m_Source;
}
void Neo4jCaptureDataChange_meta::setSource(org::openapitools::server::model::Neo4jCaptureDataChange_meta_source const& value)
{
    m_Source = value;
}
int32_t Neo4jCaptureDataChange_meta::getTimestamp() const
{
    return m_Timestamp;
}
void Neo4jCaptureDataChange_meta::setTimestamp(int32_t const value)
{
    m_Timestamp = value;
}
int32_t Neo4jCaptureDataChange_meta::getTxEventId() const
{
    return m_TxEventId;
}
void Neo4jCaptureDataChange_meta::setTxEventId(int32_t const value)
{
    m_TxEventId = value;
}
int32_t Neo4jCaptureDataChange_meta::getTxEventsCount() const
{
    return m_TxEventsCount;
}
void Neo4jCaptureDataChange_meta::setTxEventsCount(int32_t const value)
{
    m_TxEventsCount = value;
}
int32_t Neo4jCaptureDataChange_meta::getTxId() const
{
    return m_TxId;
}
void Neo4jCaptureDataChange_meta::setTxId(int32_t const value)
{
    m_TxId = value;
}
std::string Neo4jCaptureDataChange_meta::getUsername() const
{
    return m_Username;
}
void Neo4jCaptureDataChange_meta::setUsername(std::string const& value)
{
    m_Username = value;
}


} // namespace org::openapitools::server::model

