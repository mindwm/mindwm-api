/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ClipboardPayload_context.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ClipboardPayload_context::ClipboardPayload_context()
{
    m_Window = "";
    m_WindowIsSet = false;
    
}

void ClipboardPayload_context::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ClipboardPayload_context::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ClipboardPayload_context::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ClipboardPayload_context" : pathPrefix;

        
    return success;
}

bool ClipboardPayload_context::operator==(const ClipboardPayload_context& rhs) const
{
    return
    
    
    
    ((!windowIsSet() && !rhs.windowIsSet()) || (windowIsSet() && rhs.windowIsSet() && getWindow() == rhs.getWindow()))
    
    ;
}

bool ClipboardPayload_context::operator!=(const ClipboardPayload_context& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ClipboardPayload_context& o)
{
    j = nlohmann::json::object();
    if(o.windowIsSet())
        j["window"] = o.m_Window;
    
}

void from_json(const nlohmann::json& j, ClipboardPayload_context& o)
{
    if(j.find("window") != j.end())
    {
        j.at("window").get_to(o.m_Window);
        o.m_WindowIsSet = true;
    } 
    
}

std::string ClipboardPayload_context::getWindow() const
{
    return m_Window;
}
void ClipboardPayload_context::setWindow(std::string const& value)
{
    m_Window = value;
    m_WindowIsSet = true;
}
bool ClipboardPayload_context::windowIsSet() const
{
    return m_WindowIsSet;
}
void ClipboardPayload_context::unsetWindow()
{
    m_WindowIsSet = false;
}


} // namespace org::openapitools::server::model

