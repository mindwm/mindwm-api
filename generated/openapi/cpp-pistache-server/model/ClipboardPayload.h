/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ClipboardPayload.h
 *
 * 
 */

#ifndef ClipboardPayload_H_
#define ClipboardPayload_H_


#include <string>
#include "ClipboardPayload_context.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ClipboardPayload
{
public:
    ClipboardPayload();
    virtual ~ClipboardPayload() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ClipboardPayload& rhs) const;
    bool operator!=(const ClipboardPayload& rhs) const;

    /////////////////////////////////////////////
    /// ClipboardPayload members

    /// <summary>
    /// Starting position of clipboard selection [x,y]
    /// </summary>
    std::vector<int32_t> getStart() const;
    void setStart(std::vector<int32_t> const value);
    bool startIsSet() const;
    void unsetStart();
    /// <summary>
    /// Ending position of clipboard selection [x,y]
    /// </summary>
    std::vector<int32_t> getStop() const;
    void setStop(std::vector<int32_t> const value);
    bool stopIsSet() const;
    void unsetStop();
    /// <summary>
    /// Clipboard data
    /// </summary>
    std::string getData() const;
    void setData(std::string const& value);
    bool dataIsSet() const;
    void unsetData();
    /// <summary>
    /// Clipboard type
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ClipboardPayload_context getContext() const;
    void setContext(org::openapitools::server::model::ClipboardPayload_context const& value);
    bool contextIsSet() const;
    void unsetContext();

    friend  void to_json(nlohmann::json& j, const ClipboardPayload& o);
    friend  void from_json(const nlohmann::json& j, ClipboardPayload& o);
protected:
    std::vector<int32_t> m_Start;
    bool m_StartIsSet;
    std::vector<int32_t> m_Stop;
    bool m_StopIsSet;
    std::string m_Data;
    bool m_DataIsSet;
    std::string m_Type;
    bool m_TypeIsSet;
    org::openapitools::server::model::ClipboardPayload_context m_Context;
    bool m_ContextIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ClipboardPayload_H_ */
