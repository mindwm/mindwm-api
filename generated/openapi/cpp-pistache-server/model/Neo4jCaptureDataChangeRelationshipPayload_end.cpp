/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Neo4jCaptureDataChangeRelationshipPayload_end.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Neo4jCaptureDataChangeRelationshipPayload_end::Neo4jCaptureDataChangeRelationshipPayload_end()
{
    m_Id = "";
    
}

void Neo4jCaptureDataChangeRelationshipPayload_end::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Neo4jCaptureDataChangeRelationshipPayload_end::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Neo4jCaptureDataChangeRelationshipPayload_end::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Neo4jCaptureDataChangeRelationshipPayload_end" : pathPrefix;

                 
    
    /* Labels */ {
        const std::vector<std::string>& value = m_Labels;
        const std::string currentValuePath = _pathPrefix + ".labels";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool Neo4jCaptureDataChangeRelationshipPayload_end::operator==(const Neo4jCaptureDataChangeRelationshipPayload_end& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getIds() == rhs.getIds())
     &&
    
    (getLabels() == rhs.getLabels())
    
    
    ;
}

bool Neo4jCaptureDataChangeRelationshipPayload_end::operator!=(const Neo4jCaptureDataChangeRelationshipPayload_end& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Neo4jCaptureDataChangeRelationshipPayload_end& o)
{
    j = nlohmann::json::object();
    j["id"] = o.m_Id;
    j["ids"] = o.m_Ids;
    j["labels"] = o.m_Labels;
    
}

void from_json(const nlohmann::json& j, Neo4jCaptureDataChangeRelationshipPayload_end& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("ids").get_to(o.m_Ids);
    j.at("labels").get_to(o.m_Labels);
    
}

std::string Neo4jCaptureDataChangeRelationshipPayload_end::getId() const
{
    return m_Id;
}
void Neo4jCaptureDataChangeRelationshipPayload_end::setId(std::string const& value)
{
    m_Id = value;
}
std::map<std::string, nlohmann::json> Neo4jCaptureDataChangeRelationshipPayload_end::getIds() const
{
    return m_Ids;
}
void Neo4jCaptureDataChangeRelationshipPayload_end::setIds(std::map<std::string, nlohmann::json> const& value)
{
    m_Ids = value;
}
std::vector<std::string> Neo4jCaptureDataChangeRelationshipPayload_end::getLabels() const
{
    return m_Labels;
}
void Neo4jCaptureDataChangeRelationshipPayload_end::setLabels(std::vector<std::string> const& value)
{
    m_Labels = value;
}


} // namespace org::openapitools::server::model

