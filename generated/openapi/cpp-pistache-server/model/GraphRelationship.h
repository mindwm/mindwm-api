/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GraphRelationship.h
 *
 * 
 */

#ifndef GraphRelationship_H_
#define GraphRelationship_H_


#include <nlohmann/json.hpp>
#include "GraphRelationship_allOf_data.h"
#include <string>
#include <map>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  GraphRelationship
{
public:
    GraphRelationship();
    virtual ~GraphRelationship() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GraphRelationship& rhs) const;
    bool operator!=(const GraphRelationship& rhs) const;

    /////////////////////////////////////////////
    /// GraphRelationship members

    /// <summary>
    /// Identifies the event.
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getSource() const;
    void setSource(std::string const& value);
    /// <summary>
    /// The version of the CloudEvents specification which the event uses.
    /// </summary>
    std::string getSpecversion() const;
    void setSpecversion(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    /// <summary>
    /// Content type of the data value. Must adhere to RFC 2046 format.
    /// </summary>
    std::string getDatacontenttype() const;
    void setDatacontenttype(std::string const& value);
    bool datacontenttypeIsSet() const;
    void unsetDatacontenttype();
    /// <summary>
    /// Identifies the schema that data adheres to.
    /// </summary>
    std::string getDataschema() const;
    void setDataschema(std::string const& value);
    bool dataschemaIsSet() const;
    void unsetDataschema();
    /// <summary>
    /// Describes the subject of the event in the context of the event producer (identified by source).
    /// </summary>
    std::string getSubject() const;
    void setSubject(std::string const& value);
    bool subjectIsSet() const;
    void unsetSubject();
    /// <summary>
    /// Timestamp of when the occurrence happened. Must adhere to RFC 3339.
    /// </summary>
    std::string getTime() const;
    void setTime(std::string const& value);
    bool timeIsSet() const;
    void unsetTime();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::GraphRelationship_allOf_data getData() const;
    void setData(org::openapitools::server::model::GraphRelationship_allOf_data const& value);
    bool dataIsSet() const;
    void unsetData();
    /// <summary>
    /// Base64 encoded event payload. Must adhere to RFC4648.
    /// </summary>
    std::string getDataBase64() const;
    void setDataBase64(std::string const& value);
    bool dataBase64IsSet() const;
    void unsetData_base64();

    friend  void to_json(nlohmann::json& j, const GraphRelationship& o);
    friend  void from_json(const nlohmann::json& j, GraphRelationship& o);
protected:
    std::string m_Id;

    std::string m_Source;

    std::string m_Specversion;

    std::string m_Type;

    std::string m_Datacontenttype;
    bool m_DatacontenttypeIsSet;
    std::string m_Dataschema;
    bool m_DataschemaIsSet;
    std::string m_Subject;
    bool m_SubjectIsSet;
    std::string m_Time;
    bool m_TimeIsSet;
    org::openapitools::server::model::GraphRelationship_allOf_data m_Data;
    bool m_DataIsSet;
    std::string m_Data_base64;
    bool m_Data_base64IsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GraphRelationship_H_ */
