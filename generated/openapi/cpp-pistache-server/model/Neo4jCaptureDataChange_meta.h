/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Neo4jCaptureDataChange_meta.h
 *
 * 
 */

#ifndef Neo4jCaptureDataChange_meta_H_
#define Neo4jCaptureDataChange_meta_H_


#include "Neo4jCaptureDataChange_meta_source.h"
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  Neo4jCaptureDataChange_meta
{
public:
    Neo4jCaptureDataChange_meta();
    virtual ~Neo4jCaptureDataChange_meta() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Neo4jCaptureDataChange_meta& rhs) const;
    bool operator!=(const Neo4jCaptureDataChange_meta& rhs) const;

    /////////////////////////////////////////////
    /// Neo4jCaptureDataChange_meta members

    /// <summary>
    /// 
    /// </summary>
    std::string getOperation() const;
    void setOperation(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Neo4jCaptureDataChange_meta_source getSource() const;
    void setSource(org::openapitools::server::model::Neo4jCaptureDataChange_meta_source const& value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getTimestamp() const;
    void setTimestamp(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getTxEventId() const;
    void setTxEventId(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getTxEventsCount() const;
    void setTxEventsCount(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getTxId() const;
    void setTxId(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    std::string getUsername() const;
    void setUsername(std::string const& value);

    friend  void to_json(nlohmann::json& j, const Neo4jCaptureDataChange_meta& o);
    friend  void from_json(const nlohmann::json& j, Neo4jCaptureDataChange_meta& o);
protected:
    std::string m_Operation;

    org::openapitools::server::model::Neo4jCaptureDataChange_meta_source m_Source;

    int32_t m_Timestamp;

    int32_t m_TxEventId;

    int32_t m_TxEventsCount;

    int32_t m_TxId;

    std::string m_Username;

    
};

} // namespace org::openapitools::server::model

#endif /* Neo4jCaptureDataChange_meta_H_ */
