/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Neo4jCaptureDataChange_payload.h
 *
 * 
 */

#ifndef Neo4jCaptureDataChange_payload_H_
#define Neo4jCaptureDataChange_payload_H_


#include "Neo4jCaptureDataChangeRelationshipPayload_end.h"
#include "Neo4jCaptureDataChangeRelationshipPayload.h"
#include <nlohmann/json.hpp>
#include <string>
#include "Neo4jCaptureDataChangeNodePayload.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  Neo4jCaptureDataChange_payload
{
public:
    Neo4jCaptureDataChange_payload();
    virtual ~Neo4jCaptureDataChange_payload() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Neo4jCaptureDataChange_payload& rhs) const;
    bool operator!=(const Neo4jCaptureDataChange_payload& rhs) const;

    /////////////////////////////////////////////
    /// Neo4jCaptureDataChange_payload members

    /// <summary>
    /// 
    /// </summary>
    nlohmann::json getAfter() const;
    void setAfter(nlohmann::json const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getBefore() const;
    void setBefore(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Neo4jCaptureDataChangeRelationshipPayload_end getEnd() const;
    void setEnd(org::openapitools::server::model::Neo4jCaptureDataChangeRelationshipPayload_end const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getLabel() const;
    void setLabel(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Neo4jCaptureDataChangeRelationshipPayload_end getStart() const;
    void setStart(org::openapitools::server::model::Neo4jCaptureDataChangeRelationshipPayload_end const& value);

    friend  void to_json(nlohmann::json& j, const Neo4jCaptureDataChange_payload& o);
    friend  void from_json(const nlohmann::json& j, Neo4jCaptureDataChange_payload& o);
protected:
    nlohmann::json m_After;

    std::string m_Before;

    std::string m_Id;

    std::string m_Type;

    org::openapitools::server::model::Neo4jCaptureDataChangeRelationshipPayload_end m_End;

    std::string m_Label;

    org::openapitools::server::model::Neo4jCaptureDataChangeRelationshipPayload_end m_Start;

    
};

} // namespace org::openapitools::server::model

#endif /* Neo4jCaptureDataChange_payload_H_ */
