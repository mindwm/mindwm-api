/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Neo4jCaptureDataChange_schema.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Neo4jCaptureDataChange_schema::Neo4jCaptureDataChange_schema()
{
    m_ConstraintsIsSet = false;
    m_PropertiesIsSet = false;
    
}

void Neo4jCaptureDataChange_schema::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Neo4jCaptureDataChange_schema::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Neo4jCaptureDataChange_schema::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Neo4jCaptureDataChange_schema" : pathPrefix;

            
    return success;
}

bool Neo4jCaptureDataChange_schema::operator==(const Neo4jCaptureDataChange_schema& rhs) const
{
    return
    
    
    
    ((!constraintsIsSet() && !rhs.constraintsIsSet()) || (constraintsIsSet() && rhs.constraintsIsSet() && getConstraints() == rhs.getConstraints())) &&
    
    
    ((!propertiesIsSet() && !rhs.propertiesIsSet()) || (propertiesIsSet() && rhs.propertiesIsSet() && getProperties() == rhs.getProperties()))
    
    ;
}

bool Neo4jCaptureDataChange_schema::operator!=(const Neo4jCaptureDataChange_schema& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Neo4jCaptureDataChange_schema& o)
{
    j = nlohmann::json::object();
    if(o.constraintsIsSet() || !o.m_Constraints.empty())
        j["constraints"] = o.m_Constraints;
    if(o.propertiesIsSet() || !o.m_Properties.empty())
        j["properties"] = o.m_Properties;
    
}

void from_json(const nlohmann::json& j, Neo4jCaptureDataChange_schema& o)
{
    if(j.find("constraints") != j.end())
    {
        j.at("constraints").get_to(o.m_Constraints);
        o.m_ConstraintsIsSet = true;
    } 
    if(j.find("properties") != j.end())
    {
        j.at("properties").get_to(o.m_Properties);
        o.m_PropertiesIsSet = true;
    } 
    
}

std::map<std::string, nlohmann::json> Neo4jCaptureDataChange_schema::getConstraints() const
{
    return m_Constraints;
}
void Neo4jCaptureDataChange_schema::setConstraints(std::map<std::string, nlohmann::json> const& value)
{
    m_Constraints = value;
    m_ConstraintsIsSet = true;
}
bool Neo4jCaptureDataChange_schema::constraintsIsSet() const
{
    return m_ConstraintsIsSet;
}
void Neo4jCaptureDataChange_schema::unsetConstraints()
{
    m_ConstraintsIsSet = false;
}
std::map<std::string, nlohmann::json> Neo4jCaptureDataChange_schema::getProperties() const
{
    return m_Properties;
}
void Neo4jCaptureDataChange_schema::setProperties(std::map<std::string, nlohmann::json> const& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}
bool Neo4jCaptureDataChange_schema::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}
void Neo4jCaptureDataChange_schema::unsetProperties()
{
    m_PropertiesIsSet = false;
}


} // namespace org::openapitools::server::model

