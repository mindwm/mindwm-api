/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "IoDocument.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

IoDocument::IoDocument()
{
    m_Type = "";
    m_TypeIsSet = false;
    m_Source = "";
    m_SourceIsSet = false;
    m_DataIsSet = false;
    m_Id = "";
    m_Specversion = "";
    m_Datacontenttype = "";
    m_DatacontenttypeIsSet = false;
    m_Dataschema = "";
    m_DataschemaIsSet = false;
    m_Subject = "IoDocument";
    m_SubjectIsSet = false;
    m_Time = "";
    m_TimeIsSet = false;
    m_Data_base64 = "";
    m_Data_base64IsSet = false;
    
}

void IoDocument::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool IoDocument::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool IoDocument::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "IoDocument" : pathPrefix;

             
    if (sourceIsSet())
    {
        const std::string& value = m_Source;
        const std::string currentValuePath = _pathPrefix + ".source";
                
        

    }
             
    
    /* Id */ {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }

    }
         
    
    /* Specversion */ {
        const std::string& value = m_Specversion;
        const std::string currentValuePath = _pathPrefix + ".specversion";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }

    }
         
    if (datacontenttypeIsSet())
    {
        const std::string& value = m_Datacontenttype;
        const std::string currentValuePath = _pathPrefix + ".datacontenttype";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }

    }
         
    if (dataschemaIsSet())
    {
        const std::string& value = m_Dataschema;
        const std::string currentValuePath = _pathPrefix + ".dataschema";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }

    }
             
    if (timeIsSet())
    {
        const std::string& value = m_Time;
        const std::string currentValuePath = _pathPrefix + ".time";
                
        
        if (!org::openapitools::server::helpers::validateRfc3339_date_time(value))
        {
            success = false;
            msg << currentValuePath << ": must be a valid RFC 3339 date-time string;";
        }

    }
        
    return success;
}

bool IoDocument::operator==(const IoDocument& rhs) const
{
    return
    
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!sourceIsSet() && !rhs.sourceIsSet()) || (sourceIsSet() && rhs.sourceIsSet() && getSource() == rhs.getSource())) &&
    
    
    ((!dataIsSet() && !rhs.dataIsSet()) || (dataIsSet() && rhs.dataIsSet() && getData() == rhs.getData())) &&
    
    (getId() == rhs.getId())
     &&
    
    (getSpecversion() == rhs.getSpecversion())
     &&
    
    
    ((!datacontenttypeIsSet() && !rhs.datacontenttypeIsSet()) || (datacontenttypeIsSet() && rhs.datacontenttypeIsSet() && getDatacontenttype() == rhs.getDatacontenttype())) &&
    
    
    ((!dataschemaIsSet() && !rhs.dataschemaIsSet()) || (dataschemaIsSet() && rhs.dataschemaIsSet() && getDataschema() == rhs.getDataschema())) &&
    
    
    ((!subjectIsSet() && !rhs.subjectIsSet()) || (subjectIsSet() && rhs.subjectIsSet() && getSubject() == rhs.getSubject())) &&
    
    
    ((!timeIsSet() && !rhs.timeIsSet()) || (timeIsSet() && rhs.timeIsSet() && getTime() == rhs.getTime())) &&
    
    
    ((!dataBase64IsSet() && !rhs.dataBase64IsSet()) || (dataBase64IsSet() && rhs.dataBase64IsSet() && getDataBase64() == rhs.getDataBase64()))
    
    ;
}

bool IoDocument::operator!=(const IoDocument& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const IoDocument& o)
{
    j = nlohmann::json::object();
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.sourceIsSet())
        j["source"] = o.m_Source;
    if(o.dataIsSet())
        j["data"] = o.m_Data;
    j["id"] = o.m_Id;
    j["specversion"] = o.m_Specversion;
    if(o.datacontenttypeIsSet())
        j["datacontenttype"] = o.m_Datacontenttype;
    if(o.dataschemaIsSet())
        j["dataschema"] = o.m_Dataschema;
    if(o.subjectIsSet())
        j["subject"] = o.m_Subject;
    if(o.timeIsSet())
        j["time"] = o.m_Time;
    if(o.dataBase64IsSet())
        j["data_base64"] = o.m_Data_base64;
    
}

void from_json(const nlohmann::json& j, IoDocument& o)
{
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("source") != j.end())
    {
        j.at("source").get_to(o.m_Source);
        o.m_SourceIsSet = true;
    } 
    if(j.find("data") != j.end())
    {
        j.at("data").get_to(o.m_Data);
        o.m_DataIsSet = true;
    } 
    j.at("id").get_to(o.m_Id);
    j.at("specversion").get_to(o.m_Specversion);
    if(j.find("datacontenttype") != j.end())
    {
        j.at("datacontenttype").get_to(o.m_Datacontenttype);
        o.m_DatacontenttypeIsSet = true;
    } 
    if(j.find("dataschema") != j.end())
    {
        j.at("dataschema").get_to(o.m_Dataschema);
        o.m_DataschemaIsSet = true;
    } 
    if(j.find("subject") != j.end())
    {
        j.at("subject").get_to(o.m_Subject);
        o.m_SubjectIsSet = true;
    } 
    if(j.find("time") != j.end())
    {
        j.at("time").get_to(o.m_Time);
        o.m_TimeIsSet = true;
    } 
    if(j.find("data_base64") != j.end())
    {
        j.at("data_base64").get_to(o.m_Data_base64);
        o.m_Data_base64IsSet = true;
    } 
    
}

std::string IoDocument::getType() const
{
    return m_Type;
}
void IoDocument::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool IoDocument::typeIsSet() const
{
    return m_TypeIsSet;
}
void IoDocument::unsetType()
{
    m_TypeIsSet = false;
}
std::string IoDocument::getSource() const
{
    return m_Source;
}
void IoDocument::setSource(std::string const& value)
{
    m_Source = value;
    m_SourceIsSet = true;
}
bool IoDocument::sourceIsSet() const
{
    return m_SourceIsSet;
}
void IoDocument::unsetSource()
{
    m_SourceIsSet = false;
}
org::openapitools::server::model::TmuxPaneIoDocument IoDocument::getData() const
{
    return m_Data;
}
void IoDocument::setData(org::openapitools::server::model::TmuxPaneIoDocument const& value)
{
    m_Data = value;
    m_DataIsSet = true;
}
bool IoDocument::dataIsSet() const
{
    return m_DataIsSet;
}
void IoDocument::unsetData()
{
    m_DataIsSet = false;
}
std::string IoDocument::getId() const
{
    return m_Id;
}
void IoDocument::setId(std::string const& value)
{
    m_Id = value;
}
std::string IoDocument::getSpecversion() const
{
    return m_Specversion;
}
void IoDocument::setSpecversion(std::string const& value)
{
    m_Specversion = value;
}
std::string IoDocument::getDatacontenttype() const
{
    return m_Datacontenttype;
}
void IoDocument::setDatacontenttype(std::string const& value)
{
    m_Datacontenttype = value;
    m_DatacontenttypeIsSet = true;
}
bool IoDocument::datacontenttypeIsSet() const
{
    return m_DatacontenttypeIsSet;
}
void IoDocument::unsetDatacontenttype()
{
    m_DatacontenttypeIsSet = false;
}
std::string IoDocument::getDataschema() const
{
    return m_Dataschema;
}
void IoDocument::setDataschema(std::string const& value)
{
    m_Dataschema = value;
    m_DataschemaIsSet = true;
}
bool IoDocument::dataschemaIsSet() const
{
    return m_DataschemaIsSet;
}
void IoDocument::unsetDataschema()
{
    m_DataschemaIsSet = false;
}
std::string IoDocument::getSubject() const
{
    return m_Subject;
}
void IoDocument::setSubject(std::string const& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}
bool IoDocument::subjectIsSet() const
{
    return m_SubjectIsSet;
}
void IoDocument::unsetSubject()
{
    m_SubjectIsSet = false;
}
std::string IoDocument::getTime() const
{
    return m_Time;
}
void IoDocument::setTime(std::string const& value)
{
    m_Time = value;
    m_TimeIsSet = true;
}
bool IoDocument::timeIsSet() const
{
    return m_TimeIsSet;
}
void IoDocument::unsetTime()
{
    m_TimeIsSet = false;
}
std::string IoDocument::getDataBase64() const
{
    return m_Data_base64;
}
void IoDocument::setDataBase64(std::string const& value)
{
    m_Data_base64 = value;
    m_Data_base64IsSet = true;
}
bool IoDocument::dataBase64IsSet() const
{
    return m_Data_base64IsSet;
}
void IoDocument::unsetData_base64()
{
    m_Data_base64IsSet = false;
}


} // namespace org::openapitools::server::model

