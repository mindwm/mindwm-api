/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TmuxPaneIoDocument.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TmuxPaneIoDocument::TmuxPaneIoDocument()
{
    m_Input = "";
    m_Output = "";
    m_Ps1 = "";
    
}

void TmuxPaneIoDocument::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TmuxPaneIoDocument::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TmuxPaneIoDocument::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TmuxPaneIoDocument" : pathPrefix;

         
    
    /* Input */ {
        const std::string& value = m_Input;
        const std::string currentValuePath = _pathPrefix + ".input";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }

    }
         
    
    /* Output */ {
        const std::string& value = m_Output;
        const std::string currentValuePath = _pathPrefix + ".output";
                
        
        if (value.length() < 0)
        {
            success = false;
            msg << currentValuePath << ": must be at least 0 characters long;";
        }

    }
         
    
    /* Ps1 */ {
        const std::string& value = m_Ps1;
        const std::string currentValuePath = _pathPrefix + ".ps1";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }

    }
    
    return success;
}

bool TmuxPaneIoDocument::operator==(const TmuxPaneIoDocument& rhs) const
{
    return
    
    
    (getInput() == rhs.getInput())
     &&
    
    (getOutput() == rhs.getOutput())
     &&
    
    (getPs1() == rhs.getPs1())
    
    
    ;
}

bool TmuxPaneIoDocument::operator!=(const TmuxPaneIoDocument& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TmuxPaneIoDocument& o)
{
    j = nlohmann::json::object();
    j["input"] = o.m_Input;
    j["output"] = o.m_Output;
    j["ps1"] = o.m_Ps1;
    
}

void from_json(const nlohmann::json& j, TmuxPaneIoDocument& o)
{
    j.at("input").get_to(o.m_Input);
    j.at("output").get_to(o.m_Output);
    j.at("ps1").get_to(o.m_Ps1);
    
}

std::string TmuxPaneIoDocument::getInput() const
{
    return m_Input;
}
void TmuxPaneIoDocument::setInput(std::string const& value)
{
    m_Input = value;
}
std::string TmuxPaneIoDocument::getOutput() const
{
    return m_Output;
}
void TmuxPaneIoDocument::setOutput(std::string const& value)
{
    m_Output = value;
}
std::string TmuxPaneIoDocument::getPs1() const
{
    return m_Ps1;
}
void TmuxPaneIoDocument::setPs1(std::string const& value)
{
    m_Ps1 = value;
}


} // namespace org::openapitools::server::model

