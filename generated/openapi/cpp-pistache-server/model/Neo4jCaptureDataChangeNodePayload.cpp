/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Neo4jCaptureDataChangeNodePayload.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Neo4jCaptureDataChangeNodePayload::Neo4jCaptureDataChangeNodePayload()
{
    m_Before = "";
    m_Id = "";
    m_Type = "";
    
}

void Neo4jCaptureDataChangeNodePayload::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Neo4jCaptureDataChangeNodePayload::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Neo4jCaptureDataChangeNodePayload::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Neo4jCaptureDataChangeNodePayload" : pathPrefix;

        
    if (!m_After.validate(msg, _pathPrefix + ".after")) {
        msg << _pathPrefix << ": After is invalid;";
        success = false;
    }            
    return success;
}

bool Neo4jCaptureDataChangeNodePayload::operator==(const Neo4jCaptureDataChangeNodePayload& rhs) const
{
    return
    
    
    (getAfter() == rhs.getAfter())
     &&
    
    (getBefore() == rhs.getBefore())
     &&
    
    (getId() == rhs.getId())
     &&
    
    (getType() == rhs.getType())
    
    
    ;
}

bool Neo4jCaptureDataChangeNodePayload::operator!=(const Neo4jCaptureDataChangeNodePayload& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Neo4jCaptureDataChangeNodePayload& o)
{
    j = nlohmann::json::object();
    j["after"] = o.m_After;
    j["before"] = o.m_Before;
    j["id"] = o.m_Id;
    j["type"] = o.m_Type;
    
}

void from_json(const nlohmann::json& j, Neo4jCaptureDataChangeNodePayload& o)
{
    j.at("after").get_to(o.m_After);
    j.at("before").get_to(o.m_Before);
    j.at("id").get_to(o.m_Id);
    j.at("type").get_to(o.m_Type);
    
}

org::openapitools::server::model::Neo4jCaptureDataChangeNodePayload_after Neo4jCaptureDataChangeNodePayload::getAfter() const
{
    return m_After;
}
void Neo4jCaptureDataChangeNodePayload::setAfter(org::openapitools::server::model::Neo4jCaptureDataChangeNodePayload_after const& value)
{
    m_After = value;
}
std::string Neo4jCaptureDataChangeNodePayload::getBefore() const
{
    return m_Before;
}
void Neo4jCaptureDataChangeNodePayload::setBefore(std::string const& value)
{
    m_Before = value;
}
std::string Neo4jCaptureDataChangeNodePayload::getId() const
{
    return m_Id;
}
void Neo4jCaptureDataChangeNodePayload::setId(std::string const& value)
{
    m_Id = value;
}
std::string Neo4jCaptureDataChangeNodePayload::getType() const
{
    return m_Type;
}
void Neo4jCaptureDataChangeNodePayload::setType(std::string const& value)
{
    m_Type = value;
}


} // namespace org::openapitools::server::model

