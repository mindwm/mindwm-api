/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Neo4jCaptureDataChange_meta.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Neo4jCaptureDataChange_meta_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Neo4jCaptureDataChange_meta_H_


#include "MindwWM/ModelBase.h"

#include "MindwWM/model/Neo4jCaptureDataChange_meta_source.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Neo4jCaptureDataChange_meta_source;


/// <summary>
/// 
/// </summary>
class  Neo4jCaptureDataChange_meta
    : public ModelBase
{
public:
    Neo4jCaptureDataChange_meta();
    virtual ~Neo4jCaptureDataChange_meta();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Neo4jCaptureDataChange_meta members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOperation() const;
    bool operationIsSet() const;
    void unsetOperation();

    void setOperation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Neo4jCaptureDataChange_meta_source> getSource() const;
    bool sourceIsSet() const;
    void unsetSource();

    void setSource(const std::shared_ptr<Neo4jCaptureDataChange_meta_source>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTxEventId() const;
    bool txEventIdIsSet() const;
    void unsetTxEventId();

    void setTxEventId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTxEventsCount() const;
    bool txEventsCountIsSet() const;
    void unsetTxEventsCount();

    void setTxEventsCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTxId() const;
    bool txIdIsSet() const;
    void unsetTxId();

    void setTxId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUsername() const;
    bool usernameIsSet() const;
    void unsetUsername();

    void setUsername(const utility::string_t& value);


protected:
    utility::string_t m_Operation;
    bool m_OperationIsSet;
    std::shared_ptr<Neo4jCaptureDataChange_meta_source> m_Source;
    bool m_SourceIsSet;
    int32_t m_Timestamp;
    bool m_TimestampIsSet;
    int32_t m_TxEventId;
    bool m_TxEventIdIsSet;
    int32_t m_TxEventsCount;
    bool m_TxEventsCountIsSet;
    int32_t m_TxId;
    bool m_TxIdIsSet;
    utility::string_t m_Username;
    bool m_UsernameIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Neo4jCaptureDataChange_meta_H_ */
