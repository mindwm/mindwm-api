/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Clipboard.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Clipboard_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Clipboard_H_


#include "MindwWM/ModelBase.h"

#include "MindwWM/model/ClipboardPayload.h"
#include "MindwWM/AnyType.h"
#include <cpprest/details/basic_types.h>
#include <map>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ClipboardPayload;


/// <summary>
/// 
/// </summary>
class  Clipboard
    : public ModelBase
{
public:
    Clipboard();
    virtual ~Clipboard();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Clipboard members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSource() const;
    bool sourceIsSet() const;
    void unsetSource();

    void setSource(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ClipboardPayload> getData() const;
    bool dataIsSet() const;
    void unsetData();

    void setData(const std::shared_ptr<ClipboardPayload>& value);

    /// <summary>
    /// Identifies the event.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// The version of the CloudEvents specification which the event uses.
    /// </summary>
    utility::string_t getSpecversion() const;
    bool specversionIsSet() const;
    void unsetSpecversion();

    void setSpecversion(const utility::string_t& value);

    /// <summary>
    /// Content type of the data value. Must adhere to RFC 2046 format.
    /// </summary>
    utility::string_t getDatacontenttype() const;
    bool datacontenttypeIsSet() const;
    void unsetDatacontenttype();

    void setDatacontenttype(const utility::string_t& value);

    /// <summary>
    /// Identifies the schema that data adheres to.
    /// </summary>
    utility::string_t getDataschema() const;
    bool dataschemaIsSet() const;
    void unsetDataschema();

    void setDataschema(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSubject() const;
    bool subjectIsSet() const;
    void unsetSubject();

    void setSubject(const utility::string_t& value);

    /// <summary>
    /// Timestamp of when the occurrence happened. Must adhere to RFC 3339.
    /// </summary>
    utility::datetime getTime() const;
    bool timeIsSet() const;
    void unsetTime();

    void setTime(const utility::datetime& value);

    /// <summary>
    /// Base64 encoded event payload. Must adhere to RFC4648.
    /// </summary>
    utility::string_t getDataBase64() const;
    bool dataBase64IsSet() const;
    void unsetData_base64();

    void setDataBase64(const utility::string_t& value);


protected:
    utility::string_t m_Type;
    bool m_TypeIsSet;
    utility::string_t m_Source;
    bool m_SourceIsSet;
    std::shared_ptr<ClipboardPayload> m_Data;
    bool m_DataIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Specversion;
    bool m_SpecversionIsSet;
    utility::string_t m_Datacontenttype;
    bool m_DatacontenttypeIsSet;
    utility::string_t m_Dataschema;
    bool m_DataschemaIsSet;
    utility::string_t m_Subject;
    bool m_SubjectIsSet;
    utility::datetime m_Time;
    bool m_TimeIsSet;
    utility::string_t m_Data_base64;
    bool m_Data_base64IsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Clipboard_H_ */
