/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MindwWM/model/Neo4jCaptureDataChangeRelationshipPayload_end.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Neo4jCaptureDataChangeRelationshipPayload_end::Neo4jCaptureDataChangeRelationshipPayload_end()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_IdsIsSet = false;
    m_LabelsIsSet = false;
}

Neo4jCaptureDataChangeRelationshipPayload_end::~Neo4jCaptureDataChangeRelationshipPayload_end()
{
}

void Neo4jCaptureDataChangeRelationshipPayload_end::validate()
{
    // TODO: implement validation
}

web::json::value Neo4jCaptureDataChangeRelationshipPayload_end::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_IdsIsSet)
    {
        val[utility::conversions::to_string_t(U("ids"))] = ModelBase::toJson(m_Ids);
    }
    if(m_LabelsIsSet)
    {
        val[utility::conversions::to_string_t(U("labels"))] = ModelBase::toJson(m_Labels);
    }

    return val;
}

bool Neo4jCaptureDataChangeRelationshipPayload_end::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ids")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIds);
            setIds(refVal_setIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("labels"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("labels")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setLabels;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLabels);
            setLabels(refVal_setLabels);
        }
    }
    return ok;
}

void Neo4jCaptureDataChangeRelationshipPayload_end::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_IdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ids")), m_Ids));
    }
    if(m_LabelsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("labels")), m_Labels));
    }
}

bool Neo4jCaptureDataChangeRelationshipPayload_end::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ids"))))
    {
        std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ids"))), refVal_setIds );
        setIds(refVal_setIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("labels"))))
    {
        std::vector<utility::string_t> refVal_setLabels;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("labels"))), refVal_setLabels );
        setLabels(refVal_setLabels);
    }
    return ok;
}

utility::string_t Neo4jCaptureDataChangeRelationshipPayload_end::getId() const
{
    return m_Id;
}

void Neo4jCaptureDataChangeRelationshipPayload_end::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Neo4jCaptureDataChangeRelationshipPayload_end::idIsSet() const
{
    return m_IdIsSet;
}

void Neo4jCaptureDataChangeRelationshipPayload_end::unsetId()
{
    m_IdIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<AnyType>>& Neo4jCaptureDataChangeRelationshipPayload_end::getIds()
{
    return m_Ids;
}

void Neo4jCaptureDataChangeRelationshipPayload_end::setIds(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value)
{
    m_Ids = value;
    m_IdsIsSet = true;
}

bool Neo4jCaptureDataChangeRelationshipPayload_end::idsIsSet() const
{
    return m_IdsIsSet;
}

void Neo4jCaptureDataChangeRelationshipPayload_end::unsetIds()
{
    m_IdsIsSet = false;
}
std::vector<utility::string_t>& Neo4jCaptureDataChangeRelationshipPayload_end::getLabels()
{
    return m_Labels;
}

void Neo4jCaptureDataChangeRelationshipPayload_end::setLabels(const std::vector<utility::string_t>& value)
{
    m_Labels = value;
    m_LabelsIsSet = true;
}

bool Neo4jCaptureDataChangeRelationshipPayload_end::labelsIsSet() const
{
    return m_LabelsIsSet;
}

void Neo4jCaptureDataChangeRelationshipPayload_end::unsetLabels()
{
    m_LabelsIsSet = false;
}
}
}
}
}


