/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MindWM/model/Neo4jCaptureDataChange_schema.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Neo4jCaptureDataChange_schema::Neo4jCaptureDataChange_schema()
{
    m_ConstraintsIsSet = false;
    m_PropertiesIsSet = false;
}

Neo4jCaptureDataChange_schema::~Neo4jCaptureDataChange_schema()
{
}

void Neo4jCaptureDataChange_schema::validate()
{
    // TODO: implement validation
}

web::json::value Neo4jCaptureDataChange_schema::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ConstraintsIsSet)
    {
        val[utility::conversions::to_string_t(U("constraints"))] = ModelBase::toJson(m_Constraints);
    }
    if(m_PropertiesIsSet)
    {
        val[utility::conversions::to_string_t(U("properties"))] = ModelBase::toJson(m_Properties);
    }

    return val;
}

bool Neo4jCaptureDataChange_schema::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("constraints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("constraints")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setConstraints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConstraints);
            setConstraints(refVal_setConstraints);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("properties"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("properties")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setProperties;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProperties);
            setProperties(refVal_setProperties);
        }
    }
    return ok;
}

void Neo4jCaptureDataChange_schema::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ConstraintsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("constraints")), m_Constraints));
    }
    if(m_PropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("properties")), m_Properties));
    }
}

bool Neo4jCaptureDataChange_schema::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("constraints"))))
    {
        std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setConstraints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("constraints"))), refVal_setConstraints );
        setConstraints(refVal_setConstraints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("properties"))))
    {
        std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setProperties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("properties"))), refVal_setProperties );
        setProperties(refVal_setProperties);
    }
    return ok;
}

std::map<utility::string_t, std::shared_ptr<AnyType>>& Neo4jCaptureDataChange_schema::getConstraints()
{
    return m_Constraints;
}

void Neo4jCaptureDataChange_schema::setConstraints(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value)
{
    m_Constraints = value;
    m_ConstraintsIsSet = true;
}

bool Neo4jCaptureDataChange_schema::constraintsIsSet() const
{
    return m_ConstraintsIsSet;
}

void Neo4jCaptureDataChange_schema::unsetConstraints()
{
    m_ConstraintsIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<AnyType>>& Neo4jCaptureDataChange_schema::getProperties()
{
    return m_Properties;
}

void Neo4jCaptureDataChange_schema::setProperties(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}

bool Neo4jCaptureDataChange_schema::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void Neo4jCaptureDataChange_schema::unsetProperties()
{
    m_PropertiesIsSet = false;
}
}
}
}
}


