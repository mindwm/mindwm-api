/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MindWM/model/Neo4jCaptureDataChangeRelationshipPayload.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Neo4jCaptureDataChangeRelationshipPayload::Neo4jCaptureDataChangeRelationshipPayload()
{
    m_AfterIsSet = false;
    m_Before = utility::conversions::to_string_t("");
    m_BeforeIsSet = false;
    m_EndIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_StartIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
}

Neo4jCaptureDataChangeRelationshipPayload::~Neo4jCaptureDataChangeRelationshipPayload()
{
}

void Neo4jCaptureDataChangeRelationshipPayload::validate()
{
    // TODO: implement validation
}

web::json::value Neo4jCaptureDataChangeRelationshipPayload::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AfterIsSet)
    {
        val[utility::conversions::to_string_t(U("after"))] = ModelBase::toJson(m_After);
    }
    if(m_BeforeIsSet)
    {
        val[utility::conversions::to_string_t(U("before"))] = ModelBase::toJson(m_Before);
    }
    if(m_EndIsSet)
    {
        val[utility::conversions::to_string_t(U("end"))] = ModelBase::toJson(m_End);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_LabelIsSet)
    {
        val[utility::conversions::to_string_t(U("label"))] = ModelBase::toJson(m_Label);
    }
    if(m_StartIsSet)
    {
        val[utility::conversions::to_string_t(U("start"))] = ModelBase::toJson(m_Start);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool Neo4jCaptureDataChangeRelationshipPayload::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("after"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("after")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setAfter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAfter);
            setAfter(refVal_setAfter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("before"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("before")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBefore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBefore);
            setBefore(refVal_setBefore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Neo4jCaptureDataChangeRelationshipPayload_end> refVal_setEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnd);
            setEnd(refVal_setEnd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLabel);
            setLabel(refVal_setLabel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Neo4jCaptureDataChangeRelationshipPayload_end> refVal_setStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStart);
            setStart(refVal_setStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    return ok;
}

void Neo4jCaptureDataChangeRelationshipPayload::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("after")), m_After));
    }
    if(m_BeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("before")), m_Before));
    }
    if(m_EndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end")), m_End));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("label")), m_Label));
    }
    if(m_StartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start")), m_Start));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
}

bool Neo4jCaptureDataChangeRelationshipPayload::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("after"))))
    {
        std::shared_ptr<Object> refVal_setAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("after"))), refVal_setAfter );
        setAfter(refVal_setAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("before"))))
    {
        utility::string_t refVal_setBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("before"))), refVal_setBefore );
        setBefore(refVal_setBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end"))))
    {
        std::shared_ptr<Neo4jCaptureDataChangeRelationshipPayload_end> refVal_setEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end"))), refVal_setEnd );
        setEnd(refVal_setEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("label"))))
    {
        utility::string_t refVal_setLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("label"))), refVal_setLabel );
        setLabel(refVal_setLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("start"))))
    {
        std::shared_ptr<Neo4jCaptureDataChangeRelationshipPayload_end> refVal_setStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start"))), refVal_setStart );
        setStart(refVal_setStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    return ok;
}

std::shared_ptr<Object> Neo4jCaptureDataChangeRelationshipPayload::getAfter() const
{
    return m_After;
}

void Neo4jCaptureDataChangeRelationshipPayload::setAfter(const std::shared_ptr<Object>& value)
{
    m_After = value;
    m_AfterIsSet = true;
}

bool Neo4jCaptureDataChangeRelationshipPayload::afterIsSet() const
{
    return m_AfterIsSet;
}

void Neo4jCaptureDataChangeRelationshipPayload::unsetAfter()
{
    m_AfterIsSet = false;
}
utility::string_t Neo4jCaptureDataChangeRelationshipPayload::getBefore() const
{
    return m_Before;
}

void Neo4jCaptureDataChangeRelationshipPayload::setBefore(const utility::string_t& value)
{
    m_Before = value;
    m_BeforeIsSet = true;
}

bool Neo4jCaptureDataChangeRelationshipPayload::beforeIsSet() const
{
    return m_BeforeIsSet;
}

void Neo4jCaptureDataChangeRelationshipPayload::unsetBefore()
{
    m_BeforeIsSet = false;
}
std::shared_ptr<Neo4jCaptureDataChangeRelationshipPayload_end> Neo4jCaptureDataChangeRelationshipPayload::getEnd() const
{
    return m_End;
}

void Neo4jCaptureDataChangeRelationshipPayload::setEnd(const std::shared_ptr<Neo4jCaptureDataChangeRelationshipPayload_end>& value)
{
    m_End = value;
    m_EndIsSet = true;
}

bool Neo4jCaptureDataChangeRelationshipPayload::endIsSet() const
{
    return m_EndIsSet;
}

void Neo4jCaptureDataChangeRelationshipPayload::unsetEnd()
{
    m_EndIsSet = false;
}
utility::string_t Neo4jCaptureDataChangeRelationshipPayload::getId() const
{
    return m_Id;
}

void Neo4jCaptureDataChangeRelationshipPayload::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Neo4jCaptureDataChangeRelationshipPayload::idIsSet() const
{
    return m_IdIsSet;
}

void Neo4jCaptureDataChangeRelationshipPayload::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Neo4jCaptureDataChangeRelationshipPayload::getLabel() const
{
    return m_Label;
}

void Neo4jCaptureDataChangeRelationshipPayload::setLabel(const utility::string_t& value)
{
    m_Label = value;
    m_LabelIsSet = true;
}

bool Neo4jCaptureDataChangeRelationshipPayload::labelIsSet() const
{
    return m_LabelIsSet;
}

void Neo4jCaptureDataChangeRelationshipPayload::unsetLabel()
{
    m_LabelIsSet = false;
}
std::shared_ptr<Neo4jCaptureDataChangeRelationshipPayload_end> Neo4jCaptureDataChangeRelationshipPayload::getStart() const
{
    return m_Start;
}

void Neo4jCaptureDataChangeRelationshipPayload::setStart(const std::shared_ptr<Neo4jCaptureDataChangeRelationshipPayload_end>& value)
{
    m_Start = value;
    m_StartIsSet = true;
}

bool Neo4jCaptureDataChangeRelationshipPayload::startIsSet() const
{
    return m_StartIsSet;
}

void Neo4jCaptureDataChangeRelationshipPayload::unsetStart()
{
    m_StartIsSet = false;
}
utility::string_t Neo4jCaptureDataChangeRelationshipPayload::getType() const
{
    return m_Type;
}

void Neo4jCaptureDataChangeRelationshipPayload::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool Neo4jCaptureDataChangeRelationshipPayload::typeIsSet() const
{
    return m_TypeIsSet;
}

void Neo4jCaptureDataChangeRelationshipPayload::unsetType()
{
    m_TypeIsSet = false;
}
}
}
}
}


