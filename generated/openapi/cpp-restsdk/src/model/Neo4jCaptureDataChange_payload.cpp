/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MindwWM/model/Neo4jCaptureDataChange_payload.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


void Neo4jCaptureDataChange_payload::validate()
{
    // TODO: implement validation
}

const Neo4jCaptureDataChange_payload::VariantType& Neo4jCaptureDataChange_payload::getVariant() const
{
    return m_variantValue;
}

void Neo4jCaptureDataChange_payload::setVariant(Neo4jCaptureDataChange_payload::VariantType value)
{
    m_variantValue = value;
}

web::json::value Neo4jCaptureDataChange_payload::toJson() const
{
    web::json::value val = web::json::value::object();

    std::visit([&](auto&& arg) {
        using T = std::decay_t<decltype(arg)>;
        if constexpr (std::is_same_v<T, std::monostate>) {
            val = web::json::value::null();
        } else {
            val = arg.toJson();
        }
    }, m_variantValue);

    return val;
}

void Neo4jCaptureDataChange_payload::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    std::visit([&](auto&& arg) {
        using T = std::decay_t<decltype(arg)>;
        if constexpr (!std::is_same_v<T, std::monostate>) {
          arg.toMultipart(multipart, prefix);
        }
    }, m_variantValue);
}

template bool Neo4jCaptureDataChange_payload::fromJson<Neo4jCaptureDataChangeNodePayload>(const web::json::value& json);
template bool Neo4jCaptureDataChange_payload::fromMultiPart<Neo4jCaptureDataChangeNodePayload>(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix);
template bool Neo4jCaptureDataChange_payload::fromJson<Neo4jCaptureDataChangeRelationshipPayload>(const web::json::value& json);
template bool Neo4jCaptureDataChange_payload::fromMultiPart<Neo4jCaptureDataChangeRelationshipPayload>(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix);


}
}
}
}


