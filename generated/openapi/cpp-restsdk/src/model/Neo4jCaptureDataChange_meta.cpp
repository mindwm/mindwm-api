/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MindwWM/model/Neo4jCaptureDataChange_meta.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Neo4jCaptureDataChange_meta::Neo4jCaptureDataChange_meta()
{
    m_Operation = utility::conversions::to_string_t("");
    m_OperationIsSet = false;
    m_SourceIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_TxEventId = 0;
    m_TxEventIdIsSet = false;
    m_TxEventsCount = 0;
    m_TxEventsCountIsSet = false;
    m_TxId = 0;
    m_TxIdIsSet = false;
    m_Username = utility::conversions::to_string_t("");
    m_UsernameIsSet = false;
}

Neo4jCaptureDataChange_meta::~Neo4jCaptureDataChange_meta()
{
}

void Neo4jCaptureDataChange_meta::validate()
{
    // TODO: implement validation
}

web::json::value Neo4jCaptureDataChange_meta::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OperationIsSet)
    {
        val[utility::conversions::to_string_t(U("operation"))] = ModelBase::toJson(m_Operation);
    }
    if(m_SourceIsSet)
    {
        val[utility::conversions::to_string_t(U("source"))] = ModelBase::toJson(m_Source);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_TxEventIdIsSet)
    {
        val[utility::conversions::to_string_t(U("txEventId"))] = ModelBase::toJson(m_TxEventId);
    }
    if(m_TxEventsCountIsSet)
    {
        val[utility::conversions::to_string_t(U("txEventsCount"))] = ModelBase::toJson(m_TxEventsCount);
    }
    if(m_TxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("txId"))] = ModelBase::toJson(m_TxId);
    }
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("username"))] = ModelBase::toJson(m_Username);
    }

    return val;
}

bool Neo4jCaptureDataChange_meta::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("operation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("operation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOperation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperation);
            setOperation(refVal_setOperation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("source"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("source")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Neo4jCaptureDataChange_meta_source> refVal_setSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSource);
            setSource(refVal_setSource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("txEventId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("txEventId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTxEventId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTxEventId);
            setTxEventId(refVal_setTxEventId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("txEventsCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("txEventsCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTxEventsCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTxEventsCount);
            setTxEventsCount(refVal_setTxEventsCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("txId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("txId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTxId);
            setTxId(refVal_setTxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("username"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("username")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsername);
            setUsername(refVal_setUsername);
        }
    }
    return ok;
}

void Neo4jCaptureDataChange_meta::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OperationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("operation")), m_Operation));
    }
    if(m_SourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("source")), m_Source));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_TxEventIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("txEventId")), m_TxEventId));
    }
    if(m_TxEventsCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("txEventsCount")), m_TxEventsCount));
    }
    if(m_TxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("txId")), m_TxId));
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("username")), m_Username));
    }
}

bool Neo4jCaptureDataChange_meta::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("operation"))))
    {
        utility::string_t refVal_setOperation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("operation"))), refVal_setOperation );
        setOperation(refVal_setOperation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("source"))))
    {
        std::shared_ptr<Neo4jCaptureDataChange_meta_source> refVal_setSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("source"))), refVal_setSource );
        setSource(refVal_setSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        int32_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("txEventId"))))
    {
        int32_t refVal_setTxEventId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("txEventId"))), refVal_setTxEventId );
        setTxEventId(refVal_setTxEventId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("txEventsCount"))))
    {
        int32_t refVal_setTxEventsCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("txEventsCount"))), refVal_setTxEventsCount );
        setTxEventsCount(refVal_setTxEventsCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("txId"))))
    {
        int32_t refVal_setTxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("txId"))), refVal_setTxId );
        setTxId(refVal_setTxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("username"))))
    {
        utility::string_t refVal_setUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("username"))), refVal_setUsername );
        setUsername(refVal_setUsername);
    }
    return ok;
}

utility::string_t Neo4jCaptureDataChange_meta::getOperation() const
{
    return m_Operation;
}

void Neo4jCaptureDataChange_meta::setOperation(const utility::string_t& value)
{
    m_Operation = value;
    m_OperationIsSet = true;
}

bool Neo4jCaptureDataChange_meta::operationIsSet() const
{
    return m_OperationIsSet;
}

void Neo4jCaptureDataChange_meta::unsetOperation()
{
    m_OperationIsSet = false;
}
std::shared_ptr<Neo4jCaptureDataChange_meta_source> Neo4jCaptureDataChange_meta::getSource() const
{
    return m_Source;
}

void Neo4jCaptureDataChange_meta::setSource(const std::shared_ptr<Neo4jCaptureDataChange_meta_source>& value)
{
    m_Source = value;
    m_SourceIsSet = true;
}

bool Neo4jCaptureDataChange_meta::sourceIsSet() const
{
    return m_SourceIsSet;
}

void Neo4jCaptureDataChange_meta::unsetSource()
{
    m_SourceIsSet = false;
}
int32_t Neo4jCaptureDataChange_meta::getTimestamp() const
{
    return m_Timestamp;
}

void Neo4jCaptureDataChange_meta::setTimestamp(int32_t value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Neo4jCaptureDataChange_meta::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Neo4jCaptureDataChange_meta::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
int32_t Neo4jCaptureDataChange_meta::getTxEventId() const
{
    return m_TxEventId;
}

void Neo4jCaptureDataChange_meta::setTxEventId(int32_t value)
{
    m_TxEventId = value;
    m_TxEventIdIsSet = true;
}

bool Neo4jCaptureDataChange_meta::txEventIdIsSet() const
{
    return m_TxEventIdIsSet;
}

void Neo4jCaptureDataChange_meta::unsetTxEventId()
{
    m_TxEventIdIsSet = false;
}
int32_t Neo4jCaptureDataChange_meta::getTxEventsCount() const
{
    return m_TxEventsCount;
}

void Neo4jCaptureDataChange_meta::setTxEventsCount(int32_t value)
{
    m_TxEventsCount = value;
    m_TxEventsCountIsSet = true;
}

bool Neo4jCaptureDataChange_meta::txEventsCountIsSet() const
{
    return m_TxEventsCountIsSet;
}

void Neo4jCaptureDataChange_meta::unsetTxEventsCount()
{
    m_TxEventsCountIsSet = false;
}
int32_t Neo4jCaptureDataChange_meta::getTxId() const
{
    return m_TxId;
}

void Neo4jCaptureDataChange_meta::setTxId(int32_t value)
{
    m_TxId = value;
    m_TxIdIsSet = true;
}

bool Neo4jCaptureDataChange_meta::txIdIsSet() const
{
    return m_TxIdIsSet;
}

void Neo4jCaptureDataChange_meta::unsetTxId()
{
    m_TxIdIsSet = false;
}
utility::string_t Neo4jCaptureDataChange_meta::getUsername() const
{
    return m_Username;
}

void Neo4jCaptureDataChange_meta::setUsername(const utility::string_t& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}

bool Neo4jCaptureDataChange_meta::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void Neo4jCaptureDataChange_meta::unsetUsername()
{
    m_UsernameIsSet = false;
}
}
}
}
}


