/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MindWM/model/ClipboardPayload.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ClipboardPayload::ClipboardPayload()
{
    m_StartIsSet = false;
    m_StopIsSet = false;
    m_Data = utility::conversions::to_string_t("");
    m_DataIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_ContextIsSet = false;
}

ClipboardPayload::~ClipboardPayload()
{
}

void ClipboardPayload::validate()
{
    // TODO: implement validation
}

web::json::value ClipboardPayload::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StartIsSet)
    {
        val[utility::conversions::to_string_t(U("start"))] = ModelBase::toJson(m_Start);
    }
    if(m_StopIsSet)
    {
        val[utility::conversions::to_string_t(U("stop"))] = ModelBase::toJson(m_Stop);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t(U("data"))] = ModelBase::toJson(m_Data);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_ContextIsSet)
    {
        val[utility::conversions::to_string_t(U("context"))] = ModelBase::toJson(m_Context);
    }

    return val;
}

bool ClipboardPayload::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start")));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_setStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStart);
            setStart(refVal_setStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stop"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stop")));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_setStop;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStop);
            setStop(refVal_setStop);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("data")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setData);
            setData(refVal_setData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("context"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("context")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ClipboardPayload_context> refVal_setContext;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContext);
            setContext(refVal_setContext);
        }
    }
    return ok;
}

void ClipboardPayload::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start")), m_Start));
    }
    if(m_StopIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stop")), m_Stop));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("data")), m_Data));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_ContextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("context")), m_Context));
    }
}

bool ClipboardPayload::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("start"))))
    {
        std::vector<int32_t> refVal_setStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start"))), refVal_setStart );
        setStart(refVal_setStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stop"))))
    {
        std::vector<int32_t> refVal_setStop;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stop"))), refVal_setStop );
        setStop(refVal_setStop);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("data"))))
    {
        utility::string_t refVal_setData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("data"))), refVal_setData );
        setData(refVal_setData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("context"))))
    {
        std::shared_ptr<ClipboardPayload_context> refVal_setContext;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("context"))), refVal_setContext );
        setContext(refVal_setContext);
    }
    return ok;
}

std::vector<int32_t>& ClipboardPayload::getStart()
{
    return m_Start;
}

void ClipboardPayload::setStart(std::vector<int32_t> value)
{
    m_Start = value;
    m_StartIsSet = true;
}

bool ClipboardPayload::startIsSet() const
{
    return m_StartIsSet;
}

void ClipboardPayload::unsetStart()
{
    m_StartIsSet = false;
}
std::vector<int32_t>& ClipboardPayload::getStop()
{
    return m_Stop;
}

void ClipboardPayload::setStop(std::vector<int32_t> value)
{
    m_Stop = value;
    m_StopIsSet = true;
}

bool ClipboardPayload::stopIsSet() const
{
    return m_StopIsSet;
}

void ClipboardPayload::unsetStop()
{
    m_StopIsSet = false;
}
utility::string_t ClipboardPayload::getData() const
{
    return m_Data;
}

void ClipboardPayload::setData(const utility::string_t& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool ClipboardPayload::dataIsSet() const
{
    return m_DataIsSet;
}

void ClipboardPayload::unsetData()
{
    m_DataIsSet = false;
}
utility::string_t ClipboardPayload::getType() const
{
    return m_Type;
}

void ClipboardPayload::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool ClipboardPayload::typeIsSet() const
{
    return m_TypeIsSet;
}

void ClipboardPayload::unsetType()
{
    m_TypeIsSet = false;
}
std::shared_ptr<ClipboardPayload_context> ClipboardPayload::getContext() const
{
    return m_Context;
}

void ClipboardPayload::setContext(const std::shared_ptr<ClipboardPayload_context>& value)
{
    m_Context = value;
    m_ContextIsSet = true;
}

bool ClipboardPayload::contextIsSet() const
{
    return m_ContextIsSet;
}

void ClipboardPayload::unsetContext()
{
    m_ContextIsSet = false;
}
}
}
}
}


