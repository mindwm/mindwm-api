/**
* Mindwm API
* This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ClipboardPayload.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ClipboardPayload::ClipboardPayload()
{
    m_StartIsSet = false;
    m_StopIsSet = false;
    m_Data = "";
    m_DataIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    m_ContextIsSet = false;
    
}

void ClipboardPayload::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ClipboardPayload::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ClipboardPayload::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ClipboardPayload" : pathPrefix;

         
    if (startIsSet())
    {
        const std::vector<int32_t>& value = m_Start;
        const std::string currentValuePath = _pathPrefix + ".start";
                
        
        if (value.size() < 2)
        {
            success = false;
            msg << currentValuePath << ": must have at least 2 elements;";
        }
        if (value.size() > 2)
        {
            success = false;
            msg << currentValuePath << ": must have at most 2 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int32_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (stopIsSet())
    {
        const std::vector<int32_t>& value = m_Stop;
        const std::string currentValuePath = _pathPrefix + ".stop";
                
        
        if (value.size() < 2)
        {
            success = false;
            msg << currentValuePath << ": must have at least 2 elements;";
        }
        if (value.size() > 2)
        {
            success = false;
            msg << currentValuePath << ": must have at most 2 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int32_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (dataIsSet())
    {
        const std::string& value = m_Data;
        const std::string currentValuePath = _pathPrefix + ".data";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }

    }
            
    return success;
}

bool ClipboardPayload::operator==(const ClipboardPayload& rhs) const
{
    return
    
    
    
    ((!startIsSet() && !rhs.startIsSet()) || (startIsSet() && rhs.startIsSet() && getStart() == rhs.getStart())) &&
    
    
    ((!stopIsSet() && !rhs.stopIsSet()) || (stopIsSet() && rhs.stopIsSet() && getStop() == rhs.getStop())) &&
    
    
    ((!dataIsSet() && !rhs.dataIsSet()) || (dataIsSet() && rhs.dataIsSet() && getData() == rhs.getData())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!contextIsSet() && !rhs.contextIsSet()) || (contextIsSet() && rhs.contextIsSet() && getContext() == rhs.getContext()))
    
    ;
}

bool ClipboardPayload::operator!=(const ClipboardPayload& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ClipboardPayload& o)
{
    j = nlohmann::json::object();
    if(o.startIsSet() || !o.m_Start.empty())
        j["start"] = o.m_Start;
    if(o.stopIsSet() || !o.m_Stop.empty())
        j["stop"] = o.m_Stop;
    if(o.dataIsSet())
        j["data"] = o.m_Data;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.contextIsSet())
        j["context"] = o.m_Context;
    
}

void from_json(const nlohmann::json& j, ClipboardPayload& o)
{
    if(j.find("start") != j.end())
    {
        j.at("start").get_to(o.m_Start);
        o.m_StartIsSet = true;
    } 
    if(j.find("stop") != j.end())
    {
        j.at("stop").get_to(o.m_Stop);
        o.m_StopIsSet = true;
    } 
    if(j.find("data") != j.end())
    {
        j.at("data").get_to(o.m_Data);
        o.m_DataIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("context") != j.end())
    {
        j.at("context").get_to(o.m_Context);
        o.m_ContextIsSet = true;
    } 
    
}

std::vector<int32_t> ClipboardPayload::getStart() const
{
    return m_Start;
}
void ClipboardPayload::setStart(std::vector<int32_t> const value)
{
    m_Start = value;
    m_StartIsSet = true;
}
bool ClipboardPayload::startIsSet() const
{
    return m_StartIsSet;
}
void ClipboardPayload::unsetStart()
{
    m_StartIsSet = false;
}
std::vector<int32_t> ClipboardPayload::getStop() const
{
    return m_Stop;
}
void ClipboardPayload::setStop(std::vector<int32_t> const value)
{
    m_Stop = value;
    m_StopIsSet = true;
}
bool ClipboardPayload::stopIsSet() const
{
    return m_StopIsSet;
}
void ClipboardPayload::unsetStop()
{
    m_StopIsSet = false;
}
std::string ClipboardPayload::getData() const
{
    return m_Data;
}
void ClipboardPayload::setData(std::string const& value)
{
    m_Data = value;
    m_DataIsSet = true;
}
bool ClipboardPayload::dataIsSet() const
{
    return m_DataIsSet;
}
void ClipboardPayload::unsetData()
{
    m_DataIsSet = false;
}
std::string ClipboardPayload::getType() const
{
    return m_Type;
}
void ClipboardPayload::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool ClipboardPayload::typeIsSet() const
{
    return m_TypeIsSet;
}
void ClipboardPayload::unsetType()
{
    m_TypeIsSet = false;
}
org::openapitools::server::model::ClipboardPayload_context ClipboardPayload::getContext() const
{
    return m_Context;
}
void ClipboardPayload::setContext(org::openapitools::server::model::ClipboardPayload_context const& value)
{
    m_Context = value;
    m_ContextIsSet = true;
}
bool ClipboardPayload::contextIsSet() const
{
    return m_ContextIsSet;
}
void ClipboardPayload::unsetContext()
{
    m_ContextIsSet = false;
}


} // namespace org::openapitools::server::model

