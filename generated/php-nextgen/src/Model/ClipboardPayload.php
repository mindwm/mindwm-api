<?php
/**
 * ClipboardPayload
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mindwm API
 *
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ClipboardPayload Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ClipboardPayload implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ClipboardPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'start' => 'int[]',
        'stop' => 'int[]',
        'data' => 'string',
        'type' => 'string',
        'context' => '\OpenAPI\Client\Model\ClipboardPayloadContext'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'start' => null,
        'stop' => null,
        'data' => null,
        'type' => null,
        'context' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'start' => false,
        'stop' => false,
        'data' => false,
        'type' => false,
        'context' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'start' => 'start',
        'stop' => 'stop',
        'data' => 'data',
        'type' => 'type',
        'context' => 'context'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'start' => 'setStart',
        'stop' => 'setStop',
        'data' => 'setData',
        'type' => 'setType',
        'context' => 'setContext'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'start' => 'getStart',
        'stop' => 'getStop',
        'data' => 'getData',
        'type' => 'getType',
        'context' => 'getContext'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TYPE_PRIMARY = 'primary';
    public const TYPE_SECONDARY = 'secondary';
    public const TYPE_CLIPBOARD = 'clipboard';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PRIMARY,
            self::TYPE_SECONDARY,
            self::TYPE_CLIPBOARD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('start', $data ?? [], null);
        $this->setIfExists('stop', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('context', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['start']) && (count($this->container['start']) > 2)) {
            $invalidProperties[] = "invalid value for 'start', number of items must be less than or equal to 2.";
        }

        if (!is_null($this->container['start']) && (count($this->container['start']) < 2)) {
            $invalidProperties[] = "invalid value for 'start', number of items must be greater than or equal to 2.";
        }

        if (!is_null($this->container['stop']) && (count($this->container['stop']) > 2)) {
            $invalidProperties[] = "invalid value for 'stop', number of items must be less than or equal to 2.";
        }

        if (!is_null($this->container['stop']) && (count($this->container['stop']) < 2)) {
            $invalidProperties[] = "invalid value for 'stop', number of items must be greater than or equal to 2.";
        }

        if (!is_null($this->container['data']) && (mb_strlen($this->container['data']) < 1)) {
            $invalidProperties[] = "invalid value for 'data', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start
     *
     * @return int[]|null
     */
    public function getStart(): ?array
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param int[]|null $start Starting position of clipboard selection [x,y]
     *
     * @return $this
     */
    public function setStart(?array $start): static
    {
        if (is_null($start)) {
            throw new InvalidArgumentException('non-nullable start cannot be null');
        }

        if ((count($start) > 2)) {
            throw new InvalidArgumentException('invalid value for $start when calling ClipboardPayload., number of items must be less than or equal to 2.');
        }
        if ((count($start) < 2)) {
            throw new InvalidArgumentException('invalid length for $start when calling ClipboardPayload., number of items must be greater than or equal to 2.');
        }
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets stop
     *
     * @return int[]|null
     */
    public function getStop(): ?array
    {
        return $this->container['stop'];
    }

    /**
     * Sets stop
     *
     * @param int[]|null $stop Ending position of clipboard selection [x,y]
     *
     * @return $this
     */
    public function setStop(?array $stop): static
    {
        if (is_null($stop)) {
            throw new InvalidArgumentException('non-nullable stop cannot be null');
        }

        if ((count($stop) > 2)) {
            throw new InvalidArgumentException('invalid value for $stop when calling ClipboardPayload., number of items must be less than or equal to 2.');
        }
        if ((count($stop) < 2)) {
            throw new InvalidArgumentException('invalid length for $stop when calling ClipboardPayload., number of items must be greater than or equal to 2.');
        }
        $this->container['stop'] = $stop;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData(): ?string
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data Clipboard data
     *
     * @return $this
     */
    public function setData(?string $data): static
    {
        if (is_null($data)) {
            throw new InvalidArgumentException('non-nullable data cannot be null');
        }

        if ((mb_strlen($data) < 1)) {
            throw new InvalidArgumentException('invalid length for $data when calling ClipboardPayload., must be bigger than or equal to 1.');
        }

        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Clipboard type
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets context
     *
     * @return \OpenAPI\Client\Model\ClipboardPayloadContext|null
     */
    public function getContext(): ?\OpenAPI\Client\Model\ClipboardPayloadContext
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param \OpenAPI\Client\Model\ClipboardPayloadContext|null $context context
     *
     * @return $this
     */
    public function setContext(?\OpenAPI\Client\Model\ClipboardPayloadContext $context): static
    {
        if (is_null($context)) {
            throw new InvalidArgumentException('non-nullable context cannot be null');
        }
        $this->container['context'] = $context;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


