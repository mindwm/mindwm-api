/**
 * Mindwm API
 * This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface Clipboard extends any {
  type?: string;
  source?: string;
  data?: ClipboardPayload;
  /**
   * Identifies the event.
   */
  id: string;
  /**
   * The version of the CloudEvents specification which the event uses.
   */
  specversion: string;
  /**
   * Content type of the data value. Must adhere to RFC 2046 format.
   */
  datacontenttype?: string;
  /**
   * Identifies the schema that data adheres to.
   */
  dataschema?: string;
  /**
   * Describes the subject of the event in the context of the event producer (identified by source).
   */
  subject?: string;
  /**
   * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
   */
  time?: string;
  /**
   * Base64 encoded event payload. Must adhere to RFC4648.
   */
  data_base64?: string;
}


export interface ClipboardPayload {
  /**
   * Starting position of clipboard selection [x,y]
   */
  start?: Array<number>;
  /**
   * Ending position of clipboard selection [x,y]
   */
  stop?: Array<number>;
  /**
   * Clipboard data
   */
  data?: string;
  /**
   * Clipboard type
   */
  type?: ClipboardPayloadTypeEnum;
  context?: ClipboardPayloadContext;
}

/**
 * Enum for the type property.
 */
export type ClipboardPayloadTypeEnum = 'primary' | 'secondary' | 'clipboard';


/**
 * Selection context
 */
export interface ClipboardPayloadContext {
  /**
   * window id
   */
  window?: string;
}


/**
 * CloudEvents Specification JSON Schema
 */
export interface CloudEvent {
  /**
   * Identifies the event.
   */
  id: string;
  /**
   * Identifies the context in which an event happened.
   */
  source: string;
  /**
   * The version of the CloudEvents specification which the event uses.
   */
  specversion: string;
  /**
   * Describes the type of event related to the originating occurrence.
   */
  type: string;
  /**
   * Content type of the data value. Must adhere to RFC 2046 format.
   */
  datacontenttype?: string;
  /**
   * Identifies the schema that data adheres to.
   */
  dataschema?: string;
  /**
   * Describes the subject of the event in the context of the event producer (identified by source).
   */
  subject?: string;
  /**
   * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
   */
  time?: string;
  data?: CloudEventData;
  /**
   * Base64 encoded event payload. Must adhere to RFC4648.
   */
  data_base64?: string;
}


/**
 * The event payload.
 */
export interface CloudEventData {
}


export interface IoDocument extends any {
  type?: string;
  source?: string;
  data?: TmuxPaneIoDocument;
  /**
   * Identifies the event.
   */
  id: string;
  /**
   * The version of the CloudEvents specification which the event uses.
   */
  specversion: string;
  /**
   * Content type of the data value. Must adhere to RFC 2046 format.
   */
  datacontenttype?: string;
  /**
   * Identifies the schema that data adheres to.
   */
  dataschema?: string;
  /**
   * Describes the subject of the event in the context of the event producer (identified by source).
   */
  subject?: string;
  /**
   * Timestamp of when the occurrence happened. Must adhere to RFC 3339.
   */
  time?: string;
  /**
   * Base64 encoded event payload. Must adhere to RFC4648.
   */
  data_base64?: string;
}


export interface TmuxPaneIoDocument extends any {
  /**
   * User input
   */
  input: string;
  /**
   * Command output (mix of stdout & stderr)
   */
  output: string;
  /**
   * ps1 (prompt) AFTER the input and output
   */
  ps1: string;
}

