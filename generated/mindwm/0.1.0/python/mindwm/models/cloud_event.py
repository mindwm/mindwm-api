# coding: utf-8

"""
    Mindwm API

    API defining the operations available in the Mindwm API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CloudEvent(BaseModel):
    """
    CloudEvents Specification JSON Schema
    """ # noqa: E501
    id: Annotated[str, Field(min_length=1, strict=True)]
    source: Annotated[str, Field(min_length=1, strict=True)]
    specversion: Annotated[str, Field(min_length=1, strict=True)]
    type: Annotated[str, Field(min_length=1, strict=True)]
    datacontenttype: Optional[Any] = None
    dataschema: Optional[Any] = None
    subject: Optional[Any] = None
    time: Optional[Any] = None
    data: Optional[Any] = None
    data_base64: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["id", "source", "specversion", "type", "datacontenttype", "dataschema", "subject", "time", "data", "data_base64"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if datacontenttype (nullable) is None
        # and model_fields_set contains the field
        if self.datacontenttype is None and "datacontenttype" in self.model_fields_set:
            _dict['datacontenttype'] = None

        # set to None if dataschema (nullable) is None
        # and model_fields_set contains the field
        if self.dataschema is None and "dataschema" in self.model_fields_set:
            _dict['dataschema'] = None

        # set to None if subject (nullable) is None
        # and model_fields_set contains the field
        if self.subject is None and "subject" in self.model_fields_set:
            _dict['subject'] = None

        # set to None if time (nullable) is None
        # and model_fields_set contains the field
        if self.time is None and "time" in self.model_fields_set:
            _dict['time'] = None

        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        # set to None if data_base64 (nullable) is None
        # and model_fields_set contains the field
        if self.data_base64 is None and "data_base64" in self.model_fields_set:
            _dict['data_base64'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "source": obj.get("source"),
            "specversion": obj.get("specversion"),
            "type": obj.get("type"),
            "datacontenttype": obj.get("datacontenttype"),
            "dataschema": obj.get("dataschema"),
            "subject": obj.get("subject"),
            "time": obj.get("time"),
            "data": obj.get("data"),
            "data_base64": obj.get("data_base64")
        })
        return _obj


