extends Resource
class_name AbstractAction

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# AbstractAction Model


# Name of the action
# Required: False
# isArray: false
@export var name: String = "":
	set(value):
		__name__was__set = true
		name = value
var __name__was__set := false

# Description of the action
# Required: False
# isArray: false
@export var description: String = "":
	set(value):
		__description__was__set = true
		description = value
var __description__was__set := false

# Command to execute the action
# Required: False
# isArray: false
@export var cmd: String = "":
	set(value):
		__cmd__was__set = true
		cmd = value
var __cmd__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__name__was__set:
		bzz_dictionary["name"] = self.name
	if self.__description__was__set:
		bzz_dictionary["description"] = self.description
	if self.__cmd__was__set:
		bzz_dictionary["cmd"] = self.cmd
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("name"):
		me.name = from_dict["name"]
	if from_dict.has("description"):
		me.description = from_dict["description"]
	if from_dict.has("cmd"):
		me.cmd = from_dict["cmd"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

