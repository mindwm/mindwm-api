/*
Mindwm API

API defining the operations available in the Mindwm API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mindwm

import (
	"encoding/json"
)

// checks if the ClipboardPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClipboardPayload{}

// ClipboardPayload struct for ClipboardPayload
type ClipboardPayload struct {
	// Starting position of clipboard selection [x,y]
	Start []int32 `json:"start,omitempty"`
	// Ending position of clipboard selection [x,y]
	Stop []int32 `json:"stop,omitempty"`
	// Clipboard data
	Data *string `json:"data,omitempty"`
	// Clipboard type
	Type *string `json:"type,omitempty"`
	Context *ClipboardPayloadContext `json:"context,omitempty"`
}

// NewClipboardPayload instantiates a new ClipboardPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClipboardPayload() *ClipboardPayload {
	this := ClipboardPayload{}
	return &this
}

// NewClipboardPayloadWithDefaults instantiates a new ClipboardPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClipboardPayloadWithDefaults() *ClipboardPayload {
	this := ClipboardPayload{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *ClipboardPayload) GetStart() []int32 {
	if o == nil || IsNil(o.Start) {
		var ret []int32
		return ret
	}
	return o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClipboardPayload) GetStartOk() ([]int32, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *ClipboardPayload) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given []int32 and assigns it to the Start field.
func (o *ClipboardPayload) SetStart(v []int32) {
	o.Start = v
}

// GetStop returns the Stop field value if set, zero value otherwise.
func (o *ClipboardPayload) GetStop() []int32 {
	if o == nil || IsNil(o.Stop) {
		var ret []int32
		return ret
	}
	return o.Stop
}

// GetStopOk returns a tuple with the Stop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClipboardPayload) GetStopOk() ([]int32, bool) {
	if o == nil || IsNil(o.Stop) {
		return nil, false
	}
	return o.Stop, true
}

// HasStop returns a boolean if a field has been set.
func (o *ClipboardPayload) HasStop() bool {
	if o != nil && !IsNil(o.Stop) {
		return true
	}

	return false
}

// SetStop gets a reference to the given []int32 and assigns it to the Stop field.
func (o *ClipboardPayload) SetStop(v []int32) {
	o.Stop = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ClipboardPayload) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClipboardPayload) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ClipboardPayload) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ClipboardPayload) SetData(v string) {
	o.Data = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ClipboardPayload) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClipboardPayload) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ClipboardPayload) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ClipboardPayload) SetType(v string) {
	o.Type = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ClipboardPayload) GetContext() ClipboardPayloadContext {
	if o == nil || IsNil(o.Context) {
		var ret ClipboardPayloadContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClipboardPayload) GetContextOk() (*ClipboardPayloadContext, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ClipboardPayload) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given ClipboardPayloadContext and assigns it to the Context field.
func (o *ClipboardPayload) SetContext(v ClipboardPayloadContext) {
	o.Context = &v
}

func (o ClipboardPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClipboardPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Stop) {
		toSerialize["stop"] = o.Stop
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	return toSerialize, nil
}

type NullableClipboardPayload struct {
	value *ClipboardPayload
	isSet bool
}

func (v NullableClipboardPayload) Get() *ClipboardPayload {
	return v.value
}

func (v *NullableClipboardPayload) Set(val *ClipboardPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableClipboardPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableClipboardPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClipboardPayload(val *ClipboardPayload) *NullableClipboardPayload {
	return &NullableClipboardPayload{value: val, isSet: true}
}

func (v NullableClipboardPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClipboardPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


