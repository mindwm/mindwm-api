/*
Mindwm API

API defining the operations available in the Mindwm API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mindwm

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CloudEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudEvent{}

// CloudEvent CloudEvents Specification JSON Schema
type CloudEvent struct {
	Id string `json:"id"`
	Source string `json:"source"`
	Specversion string `json:"specversion"`
	Type string `json:"type"`
	Datacontenttype interface{} `json:"datacontenttype,omitempty"`
	Dataschema interface{} `json:"dataschema,omitempty"`
	Subject interface{} `json:"subject,omitempty"`
	Time interface{} `json:"time,omitempty"`
	Data interface{} `json:"data,omitempty"`
	DataBase64 interface{} `json:"data_base64,omitempty"`
}

type _CloudEvent CloudEvent

// NewCloudEvent instantiates a new CloudEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudEvent(id string, source string, specversion string, type_ string) *CloudEvent {
	this := CloudEvent{}
	this.Id = id
	this.Source = source
	this.Specversion = specversion
	this.Type = type_
	return &this
}

// NewCloudEventWithDefaults instantiates a new CloudEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudEventWithDefaults() *CloudEvent {
	this := CloudEvent{}
	return &this
}

// GetId returns the Id field value
func (o *CloudEvent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CloudEvent) SetId(v string) {
	o.Id = v
}

// GetSource returns the Source field value
func (o *CloudEvent) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *CloudEvent) SetSource(v string) {
	o.Source = v
}

// GetSpecversion returns the Specversion field value
func (o *CloudEvent) GetSpecversion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Specversion
}

// GetSpecversionOk returns a tuple with the Specversion field value
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetSpecversionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Specversion, true
}

// SetSpecversion sets field value
func (o *CloudEvent) SetSpecversion(v string) {
	o.Specversion = v
}

// GetType returns the Type field value
func (o *CloudEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CloudEvent) SetType(v string) {
	o.Type = v
}

// GetDatacontenttype returns the Datacontenttype field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudEvent) GetDatacontenttype() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Datacontenttype
}

// GetDatacontenttypeOk returns a tuple with the Datacontenttype field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudEvent) GetDatacontenttypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Datacontenttype) {
		return nil, false
	}
	return &o.Datacontenttype, true
}

// HasDatacontenttype returns a boolean if a field has been set.
func (o *CloudEvent) HasDatacontenttype() bool {
	if o != nil && !IsNil(o.Datacontenttype) {
		return true
	}

	return false
}

// SetDatacontenttype gets a reference to the given interface{} and assigns it to the Datacontenttype field.
func (o *CloudEvent) SetDatacontenttype(v interface{}) {
	o.Datacontenttype = v
}

// GetDataschema returns the Dataschema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudEvent) GetDataschema() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Dataschema
}

// GetDataschemaOk returns a tuple with the Dataschema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudEvent) GetDataschemaOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Dataschema) {
		return nil, false
	}
	return &o.Dataschema, true
}

// HasDataschema returns a boolean if a field has been set.
func (o *CloudEvent) HasDataschema() bool {
	if o != nil && !IsNil(o.Dataschema) {
		return true
	}

	return false
}

// SetDataschema gets a reference to the given interface{} and assigns it to the Dataschema field.
func (o *CloudEvent) SetDataschema(v interface{}) {
	o.Dataschema = v
}

// GetSubject returns the Subject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudEvent) GetSubject() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudEvent) GetSubjectOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return &o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *CloudEvent) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given interface{} and assigns it to the Subject field.
func (o *CloudEvent) SetSubject(v interface{}) {
	o.Subject = v
}

// GetTime returns the Time field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudEvent) GetTime() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudEvent) GetTimeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return &o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *CloudEvent) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given interface{} and assigns it to the Time field.
func (o *CloudEvent) SetTime(v interface{}) {
	o.Time = v
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudEvent) GetData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudEvent) GetDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return &o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CloudEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given interface{} and assigns it to the Data field.
func (o *CloudEvent) SetData(v interface{}) {
	o.Data = v
}

// GetDataBase64 returns the DataBase64 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudEvent) GetDataBase64() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DataBase64
}

// GetDataBase64Ok returns a tuple with the DataBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudEvent) GetDataBase64Ok() (*interface{}, bool) {
	if o == nil || IsNil(o.DataBase64) {
		return nil, false
	}
	return &o.DataBase64, true
}

// HasDataBase64 returns a boolean if a field has been set.
func (o *CloudEvent) HasDataBase64() bool {
	if o != nil && !IsNil(o.DataBase64) {
		return true
	}

	return false
}

// SetDataBase64 gets a reference to the given interface{} and assigns it to the DataBase64 field.
func (o *CloudEvent) SetDataBase64(v interface{}) {
	o.DataBase64 = v
}

func (o CloudEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["source"] = o.Source
	toSerialize["specversion"] = o.Specversion
	toSerialize["type"] = o.Type
	if o.Datacontenttype != nil {
		toSerialize["datacontenttype"] = o.Datacontenttype
	}
	if o.Dataschema != nil {
		toSerialize["dataschema"] = o.Dataschema
	}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.DataBase64 != nil {
		toSerialize["data_base64"] = o.DataBase64
	}
	return toSerialize, nil
}

func (o *CloudEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"source",
		"specversion",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloudEvent := _CloudEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCloudEvent)

	if err != nil {
		return err
	}

	*o = CloudEvent(varCloudEvent)

	return err
}

type NullableCloudEvent struct {
	value *CloudEvent
	isSet bool
}

func (v NullableCloudEvent) Get() *CloudEvent {
	return v.value
}

func (v *NullableCloudEvent) Set(val *CloudEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudEvent(val *CloudEvent) *NullableCloudEvent {
	return &NullableCloudEvent{value: val, isSet: true}
}

func (v NullableCloudEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


