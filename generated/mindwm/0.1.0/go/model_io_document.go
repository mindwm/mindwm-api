/*
Mindwm API

API defining the operations available in the Mindwm API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mindwm

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IoDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IoDocument{}

// IoDocument struct for IoDocument
type IoDocument struct {
	// user input
	UserInput string `json:"user_input"`
	// command output (mix of stdout/stderr)
	Output string `json:"output"`
	// Full input command
	Fullcmd string `json:"fullcmd"`
	// PS1 string AFTER the command output
	Ps1 string `json:"ps1"`
}

type _IoDocument IoDocument

// NewIoDocument instantiates a new IoDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoDocument(userInput string, output string, fullcmd string, ps1 string) *IoDocument {
	this := IoDocument{}
	this.UserInput = userInput
	this.Output = output
	this.Fullcmd = fullcmd
	this.Ps1 = ps1
	return &this
}

// NewIoDocumentWithDefaults instantiates a new IoDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoDocumentWithDefaults() *IoDocument {
	this := IoDocument{}
	return &this
}

// GetUserInput returns the UserInput field value
func (o *IoDocument) GetUserInput() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserInput
}

// GetUserInputOk returns a tuple with the UserInput field value
// and a boolean to check if the value has been set.
func (o *IoDocument) GetUserInputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserInput, true
}

// SetUserInput sets field value
func (o *IoDocument) SetUserInput(v string) {
	o.UserInput = v
}

// GetOutput returns the Output field value
func (o *IoDocument) GetOutput() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Output
}

// GetOutputOk returns a tuple with the Output field value
// and a boolean to check if the value has been set.
func (o *IoDocument) GetOutputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Output, true
}

// SetOutput sets field value
func (o *IoDocument) SetOutput(v string) {
	o.Output = v
}

// GetFullcmd returns the Fullcmd field value
func (o *IoDocument) GetFullcmd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fullcmd
}

// GetFullcmdOk returns a tuple with the Fullcmd field value
// and a boolean to check if the value has been set.
func (o *IoDocument) GetFullcmdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fullcmd, true
}

// SetFullcmd sets field value
func (o *IoDocument) SetFullcmd(v string) {
	o.Fullcmd = v
}

// GetPs1 returns the Ps1 field value
func (o *IoDocument) GetPs1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ps1
}

// GetPs1Ok returns a tuple with the Ps1 field value
// and a boolean to check if the value has been set.
func (o *IoDocument) GetPs1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ps1, true
}

// SetPs1 sets field value
func (o *IoDocument) SetPs1(v string) {
	o.Ps1 = v
}

func (o IoDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IoDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user_input"] = o.UserInput
	toSerialize["output"] = o.Output
	toSerialize["fullcmd"] = o.Fullcmd
	toSerialize["ps1"] = o.Ps1
	return toSerialize, nil
}

func (o *IoDocument) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_input",
		"output",
		"fullcmd",
		"ps1",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIoDocument := _IoDocument{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIoDocument)

	if err != nil {
		return err
	}

	*o = IoDocument(varIoDocument)

	return err
}

type NullableIoDocument struct {
	value *IoDocument
	isSet bool
}

func (v NullableIoDocument) Get() *IoDocument {
	return v.value
}

func (v *NullableIoDocument) Set(val *IoDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableIoDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableIoDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoDocument(val *IoDocument) *NullableIoDocument {
	return &NullableIoDocument{value: val, isSet: true}
}

func (v NullableIoDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


