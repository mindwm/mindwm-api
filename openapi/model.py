# generated by datamodel-codegen:
#   filename:  mindwm.yaml
#   timestamp: 2024-07-18T15:06:06+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class DataBase64def(RootModel[Optional[str]]):
    root: Optional[str]


class Datacontenttypedef(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., min_length=1)


class Datadef(RootModel[Optional[Union[Dict[str, Any], str, float, List[Any], bool]]]):
    root: Optional[Union[Dict[str, Any], str, float, List[Any], bool]]


class Dataschemadef(RootModel[Optional[AnyUrl]]):
    root: Optional[AnyUrl]


class Iddef(RootModel[str]):
    root: str = Field(..., min_length=1)


class Sourcedef(RootModel[str]):
    root: str = Field(..., min_length=1)


class Specversiondef(RootModel[str]):
    root: str = Field(..., min_length=1)


class Subjectdef(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., min_length=1)


class Timedef(RootModel[Optional[AwareDatetime]]):
    root: Optional[AwareDatetime] = Field(..., min_length=1)


class Typedef(RootModel[str]):
    root: str = Field(..., min_length=1)


class Type(Enum):
    primary = 'primary'
    secondary = 'secondary'
    clipboard = 'clipboard'


class Context(BaseModel):
    window: Optional[str] = Field(None, description='window id')


class ClipboardPayload(BaseModel):
    start: Optional[List[int]] = Field(
        None,
        description='Starting position of clipboard selection [x,y]',
        max_length=2,
        min_length=2,
    )
    stop: Optional[List[int]] = Field(
        None,
        description='Ending position of clipboard selection [x,y]',
        max_length=2,
        min_length=2,
    )
    data: Optional[str] = Field(None, description='Clipboard data', min_length=1)
    type: Optional[Type] = Field(None, description='Clipboard type')
    context: Optional[Context] = Field(None, description='Selection context')


class TmuxPaneIoDocument(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    input: str = Field(..., description='User input', min_length=1)
    output: str = Field(
        ..., description='Command output (mix of stdout & stderr)', min_length=0
    )
    ps1: str = Field(
        ..., description='ps1 (prompt) AFTER the input and output', min_length=1
    )


class Type1(Enum):
    created = 'created'
    updated = 'updated'
    deleted = 'deleted'


class Source(Enum):
    graph_node = 'graph.node'
    graph_relationship = 'graph.relationship'


class Source1(Enum):
    graph_relationship = 'graph.relationship'


class Neo4jCaptureDataChange(RootModel[Any]):
    root: Any


class Neo4jCaptureDataChangeNodePayload(RootModel[Any]):
    root: Any


class Neo4jCaptureDataChangeRelationshipPayload(RootModel[Any]):
    root: Any


class Cloudevents(BaseModel):
    id: Iddef = Field(
        ..., description='Identifies the event.', examples=['A234-1234-1234']
    )
    source: Sourcedef = Field(
        ...,
        description='Identifies the context in which an event happened.',
        examples=[
            'https://github.com/cloudevents',
            'mailto:cncf-wg-serverless@lists.cncf.io',
            'urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66',
            'cloudevents/spec/pull/123',
            '/sensors/tn-1234567/alerts',
            '1-555-123-4567',
        ],
    )
    specversion: Specversiondef = Field(
        ...,
        description='The version of the CloudEvents specification which the event uses.',
        examples=['1.0'],
    )
    type: Typedef = Field(
        ...,
        description='Describes the type of event related to the originating occurrence.',
        examples=['com.github.pull_request.opened', 'com.example.object.deleted.v2'],
    )
    datacontenttype: Optional[Datacontenttypedef] = Field(
        None,
        description='Content type of the data value. Must adhere to RFC 2046 format.',
        examples=['text/xml', 'application/json', 'image/png', 'multipart/form-data'],
    )
    dataschema: Optional[Dataschemadef] = Field(
        None, description='Identifies the schema that data adheres to.'
    )
    subject: Optional[Subjectdef] = Field(
        None,
        description='Describes the subject of the event in the context of the event producer (identified by source).',
        examples=['mynewfile.jpg'],
    )
    time: Optional[Timedef] = Field(
        None,
        description='Timestamp of when the occurrence happened. Must adhere to RFC 3339.',
        examples=['2018-04-05T17:31:00Z'],
    )
    data: Optional[Datadef] = Field(
        None, description='The event payload.', examples=['<much wow="xml"/>']
    )
    data_base64: Optional[DataBase64def] = Field(
        None,
        description='Base64 encoded event payload. Must adhere to RFC4648.',
        examples=['Zm9vYg=='],
    )


class Data(BaseModel):
    payload: Optional[Neo4jCaptureDataChangeNodePayload] = None


class Data1(BaseModel):
    payload: Optional[Neo4jCaptureDataChangeRelationshipPayload] = None


class CloudEvent(RootModel[Cloudevents]):
    root: Cloudevents


class Clipboard(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        regex_engine="python-re",
    )
    type: Literal['Clipboard'] = 'Clipboard'
    subject: Literal['Clipboard'] = 'Clipboard'
    source: Optional[str] = Field(
        None,
        pattern='mindwm.[a-zA-Z0-9_][a-zA-Z0-9_-]{0,31}\\\\.(?!-)[a-zA-Z0-9-]{1,63}(?<!-).clipboard$',
    )
    data: Optional[ClipboardPayload] = None


class GraphNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Optional[Type1] = None
    source: Optional[Source] = None
    data: Optional[Data] = None


class GraphRelationship(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Optional[Type1] = None
    source: Optional[Source1] = None
    data: Optional[Data1] = None


class IoDocument(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        regex_engine="python-re",
    )
    type: Literal['IoDocument'] = 'IoDocument'
    subject: Literal['IoDocument']
    source: str = Field(
        ...,
        pattern='[a-zA-Z0-9_][a-zA-Z0-9_-]{0,31}\\\\.(?!-)[a-zA-Z0-9-]{1,63}(?<!-)\\\\.tmux\\\\.[A-Za-z0-9+/]*={0,2}\\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\\\.[0-9]+?\\\\.[0-9]+?\\\\.iodocument$',
    )
    data: Optional[TmuxPaneIoDocument] = None
